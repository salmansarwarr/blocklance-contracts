{
  "address": "0xBa90096276c1DdB02A2cCaE929f1df8555Dd5c4e",
  "abi": [
    {
      "inputs": [],
      "name": "ERC721AddressZeroIsNotaValidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveCallerIsNotOwnerNorApprovedForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721MintToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToNonReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKApprovalForAssetsToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKAssetAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKBadPriorityListLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKCannotTransferSoulbound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKIdZeroForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKMaxPendingAssetsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNoAssetMatchingId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotApprovedForAssetsOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKTokenDoesNotHaveAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedAssetId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedNumberOfAssets",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAllForAssets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalForAssets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "replacesId",
          "type": "uint64"
        }
      ],
      "name": "AssetAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "replacesId",
          "type": "uint64"
        }
      ],
      "name": "AssetAddedToTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AssetPrioritySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "AssetRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "AssetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "Soulbound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RMRK_INTERFACE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "rmrkInterface",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "acceptAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "token_id",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "addAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approveForAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getActiveAssetPriorities",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "priorities",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getActiveAssets",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "assetIds",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApprovedForAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "getAssetMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "newAssetId",
          "type": "uint64"
        }
      ],
      "name": "getAssetReplacements",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "replacesAssetId",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPendingAssets",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "assetIds",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAllForAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTransferable_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "soulBound",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRejections",
          "type": "uint256"
        }
      ],
      "name": "rejectAllAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "rejectAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllForAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64[]",
          "name": "priorities",
          "type": "uint64[]"
        }
      ],
      "name": "setPriority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c800f25398bf6b046f1d16e8b8096e2a3c6462e8078cdfd135d5c511fb83afa",
  "receipt": {
    "to": null,
    "from": "0x79827dAE626421e3E4e548FF524b23d2A3ad776E",
    "contractAddress": "0xBa90096276c1DdB02A2cCaE929f1df8555Dd5c4e",
    "transactionIndex": 0,
    "gasUsed": "2190267",
    "logsBloom": "0x
    "blockHash": "0x08762659080bf0843f570191ba78e28dffd775f2db254cb461fa8908f3fb8d61",
    "transactionHash": "0x8c800f25398bf6b046f1d16e8b8096e2a3c6462e8078cdfd135d5c511fb83afa",
    "logs": [],
    "blockNumber": 192476,
    "cumulativeGasUsed": "2190267",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73623be5649659c8fe18dc3bf5f392c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721AddressZeroIsNotaValidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToNonReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKApprovalForAssetsToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKAssetAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKBadPriorityListLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKCannotTransferSoulbound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIdZeroForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMaxPendingAssetsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNoAssetMatchingId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotApprovedForAssetsOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKTokenDoesNotHaveAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedAssetId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedNumberOfAssets\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAllForAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalForAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"replacesId\",\"type\":\"uint64\"}],\"name\":\"AssetAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"replacesId\",\"type\":\"uint64\"}],\"name\":\"AssetAddedToTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetPrioritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"AssetRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"AssetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Soulbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RMRK_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"rmrkInterface\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"acceptAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"token_id\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveAssetPriorities\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"priorities\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveAssets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"assetIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApprovedForAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"getAssetMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"newAssetId\",\"type\":\"uint64\"}],\"name\":\"getAssetReplacements\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"replacesAssetId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPendingAssets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"assetIds\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAllForAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTransferable_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"soulBound\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRejections\",\"type\":\"uint256\"}],\"name\":\"rejectAllAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"rejectAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"priorities\",\"type\":\"uint64[]\"}],\"name\":\"setPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"RMRKIdZeroForbidden()\":[{\"details\":\"The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ApprovalForAllForAssets(address,address,bool)\":{\"params\":{\"approved\":\"Boolean value signifying whether the permission has been granted (`true`) or revoked (`false`)\",\"operator\":\"Address of the account that has been granted the approval to manage the token's assets on all of  the tokens\",\"owner\":\"Address of the account that has granted the approval for all assets on all of their tokens\"}},\"ApprovalForAssets(address,address,uint256)\":{\"details\":\"Approvals must be cleared on transfer\",\"params\":{\"approved\":\"Address of the account that has been granted approval to manage the token's assets\",\"owner\":\"Address of the account that has granted the approval for all token's assets\",\"tokenId\":\"ID of the token on which the approval was granted\"}},\"AssetAccepted(uint256,uint64,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was accepted\",\"replacesId\":\"ID of the asset that was replaced\",\"tokenId\":\"ID of the token that had a new asset accepted\"}},\"AssetAddedToTokens(uint256[],uint64,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that has been added to the token's pending assets array\",\"replacesId\":\"ID of the asset that would be replaced\",\"tokenIds\":\"An array of token IDs that received a new pending asset\"}},\"AssetPrioritySet(uint256)\":{\"params\":{\"tokenId\":\"ID of the token that had the asset priority array updated\"}},\"AssetRejected(uint256,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was rejected\",\"tokenId\":\"ID of the token that had an asset rejected\"}},\"AssetSet(uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was initialized\"}},\"Soulbound(uint256,bool)\":{\"params\":{\"state\":\"A boolean value signifying whether the token became soulbound (`true`) or transferrable (`false`)\",\"tokenId\":\"ID of the token\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"RMRK_INTERFACE()\":{\"returns\":{\"rmrkInterface\":\"Interface identifier for implementations of the @rmrk-team/evm-contracts package\"}},\"VERSION()\":{\"returns\":{\"version\":\"Version identifier for implementations of the @rmrk-team/evm-contracts package\"}},\"acceptAsset(uint256,uint256,uint64)\":{\"details\":\"Migrates the asset from the token's pending asset array to the token's active asset array.Active assets cannot be removed by anyone, but can be replaced by a new asset.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits an {AssetAccepted} event.\",\"params\":{\"assetId\":\"ID of the asset expected to be in the index\",\"index\":\"Index of the asset in the pending array to accept\",\"tokenId\":\"ID of the token for which to accept the pending asset\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account.The approval is cleared when the token is transferred.Only a single account can be approved at a time, so approving the zero address clears previous approvals.Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist.Emits an {Approval} event.\",\"params\":{\"to\":\"Address receiving the approval\",\"tokenId\":\"ID of the token for which the approval is being granted\"}},\"approveForAssets(address,uint256)\":{\"details\":\"This differs from transfer approvals, as approvals are not cleared when the approved party accepts or  rejects an asset, or sets asset priorities. This approval is cleared on token transfer.Only a single account can be approved at a time, so approving the `0x0` address clears previous approvals.Requirements:  - The caller must own the token or be an approved operator.  - `tokenId` must exist.Emits an {ApprovalForAssets} event.\",\"params\":{\"to\":\"Address of the account to grant the approval to\",\"tokenId\":\"ID of the token for which the approval to manage the assets is granted\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"Address of the account being checked\"},\"returns\":{\"balance\":\"The balance of the given account\"}},\"getActiveAssetPriorities(uint256)\":{\"details\":\"Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset  priorites.\",\"params\":{\"tokenId\":\"ID of the token for which to retrieve the priorities of the active assets\"},\"returns\":{\"priorities\":\"An array of priorities of the active assets of the given token\"}},\"getActiveAssets(uint256)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.You can safely get 10k\",\"params\":{\"tokenId\":\"ID of the token to retrieve the IDs of the active assets\"},\"returns\":{\"assetIds\":\"An array of active asset IDs of the given token\"}},\"getApproved(uint256)\":{\"details\":\"Requirements:  - `tokenId` must exist.\",\"params\":{\"tokenId\":\"ID of the token to check for approval\"},\"returns\":{\"approved\":\"Address of the account approved to manage the token\"}},\"getApprovedForAssets(uint256)\":{\"details\":\"Requirements:  - `tokenId` must exist.\",\"params\":{\"tokenId\":\"ID of the token for which to retrieve the approved address\"},\"returns\":{\"approved\":\"Address of the account that is approved to manage the specified token's assets\"}},\"getAssetMetadata(uint256,uint64)\":{\"details\":\"Assets are stored by reference mapping `_assets[assetId]`.Can be overriden to implement enumerate, fallback or other custom logic.\",\"params\":{\"assetId\":\"Asset Id, must be in the active assets array\",\"tokenId\":\"ID of the token from which to retrieve the asset metadata\"},\"returns\":{\"metadata\":\"The metadata of the asset belonging to the specified index in the token's active assets  array\"}},\"getAssetReplacements(uint256,uint64)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.\",\"params\":{\"newAssetId\":\"ID of the pending asset which will be accepted\",\"tokenId\":\"ID of the token to check\"},\"returns\":{\"replacesAssetId\":\"ID of the asset which will be replaced\"}},\"getPendingAssets(uint256)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.\",\"params\":{\"tokenId\":\"ID of the token to retrieve the IDs of the pending assets\"},\"returns\":{\"assetIds\":\"An array of pending asset IDs of the given token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address being checked for approval\",\"owner\":\"Address of the owner of the tokens\"},\"returns\":{\"isApproved\":\"A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)  or not (`false`)\"}},\"isApprovedForAllForAssets(address,address)\":{\"details\":\"See {setApprovalForAllForAssets}.\",\"params\":{\"operator\":\"Address of the account that we are checking whether it has the operator role or not\",\"owner\":\"Address of the account that we are checking for whether it has granted the operator role\"},\"returns\":{\"isApproved\":\"A boolean value indicating whether the account we are checking has been granted the operator role\"}},\"isTransferable(uint256,address,address)\":{\"details\":\"If this function returns `false`, the transfer of the token MUST revert execution.If the tokenId does not exist, this method MUST revert execution, unless the token is being checked for  minting.\",\"params\":{\"from\":\"Address from which the token is being transferred\",\"to\":\"Address to which the token is being transferred\",\"tokenId\":\"ID of the token being checked\"},\"returns\":{\"isTransferable_\":\"Boolean value indicating whether the given token is transferable\"}},\"ownerOf(uint256)\":{\"details\":\"Requirements:  - `tokenId` must exist.\",\"params\":{\"tokenId\":\"ID of the token for which to retrieve the token for\"},\"returns\":{\"owner\":\"Address of the account owning the token\"}},\"rejectAllAssets(uint256,uint256)\":{\"details\":\"Effecitvely deletes the pending array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.Emits a {AssetRejected} event with assetId = 0.\",\"params\":{\"maxRejections\":\"Maximum number of expected assets to reject, used to prevent from rejecting assets which  arrive just before this operation.\",\"tokenId\":\"ID of the token of which to clear the pending array.\"}},\"rejectAsset(uint256,uint256,uint64)\":{\"details\":\"Removes the asset from the token's pending asset array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits a {AssetRejected} event.\",\"params\":{\"assetId\":\"ID of the asset expected to be in the index\",\"index\":\"Index of the asset in the pending array to be rejected\",\"tokenId\":\"ID of the token that the asset is being rejected from\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.\",\"params\":{\"from\":\"Address to transfer the tokens from\",\"to\":\"Address to transfer the tokens to\",\"tokenId\":\"ID of the token to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.\",\"params\":{\"data\":\"Additional data without a specified format to be sent along with the token transaction\",\"from\":\"Address to transfer the tokens from\",\"to\":\"Address to transfer the tokens to\",\"tokenId\":\"ID of the token to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.Requirements: - The `operator` cannot be the caller.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\",\"operator\":\"Address of the operator being managed\"}},\"setApprovalForAllForAssets(address,bool)\":{\"details\":\"Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token  owned by the caller.Requirements:  - The `operator` cannot be the caller.Emits an {ApprovalForAllForAssets} event.\",\"params\":{\"approved\":\"The boolean value indicating whether the operator role is being granted (`true`) or revoked  (`false`)\",\"operator\":\"Address of the account to which the operator role is granted or revoked from\"}},\"setPriority(uint256,uint64[])\":{\"details\":\"The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest  priority.Value `0` of a priority is a special case equivalent to unitialized.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - The length of `priorities` must be equal the length of the active assets array.Emits a {AssetPrioritySet} event.\",\"params\":{\"priorities\":\"An array of priorities of active assets. The succesion of items in the priorities array  matches that of the succesion of items in the active array\",\"tokenId\":\"ID of the token to set the priorities for\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.Emits a {Transfer} event.\",\"params\":{\"from\":\"Address from which to transfer the token from\",\"to\":\"Address to which to transfer the token to\",\"tokenId\":\"ID of the token to transfer\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721AddressZeroIsNotaValidOwner()\":[{\"notice\":\"Attempting to grant the token to 0x0 address\"}],\"ERC721ApprovalToCurrentOwner()\":[{\"notice\":\"Attempting to grant approval to the current owner of the token\"}],\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll()\":[{\"notice\":\"Attempting to grant approval when not being owner or approved for all should not be permitted\"}],\"ERC721ApproveToCaller()\":[{\"notice\":\"Attempting to grant approval to self\"}],\"ERC721InvalidTokenId()\":[{\"notice\":\"Attempting to use an invalid token ID\"}],\"ERC721MintToTheZeroAddress()\":[{\"notice\":\"Attempting to mint to 0x0 address\"}],\"ERC721NotApprovedOrOwner()\":[{\"notice\":\"Attempting to manage a token without being its owner or approved by the owner\"}],\"ERC721TokenAlreadyMinted()\":[{\"notice\":\"Attempting to mint an already minted token\"}],\"ERC721TransferFromIncorrectOwner()\":[{\"notice\":\"Attempting to transfer the token from an address that is not the owner\"}],\"ERC721TransferToNonReceiverImplementer()\":[{\"notice\":\"Attempting to safe transfer to an address that is unable to receive the token\"}],\"ERC721TransferToTheZeroAddress()\":[{\"notice\":\"Attempting to transfer the token to a 0x0 address\"}],\"RMRKApprovalForAssetsToCurrentOwner()\":[{\"notice\":\"Attempting to grant approval of assets to their current owner\"}],\"RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll()\":[{\"notice\":\"Attempting to grant approval of assets without being the caller or approved for all\"}],\"RMRKAssetAlreadyExists()\":[{\"notice\":\"Attempting to add an asset using an ID that has already been used\"}],\"RMRKBadPriorityListLength()\":[{\"notice\":\"Attempting to set the priorities with an array of length that doesn't match the length of active assets array\"}],\"RMRKCannotTransferSoulbound()\":[{\"notice\":\"Attempting to transfer a soulbound (non-transferrable) token\"}],\"RMRKIdZeroForbidden()\":[{\"notice\":\"Attempting to use ID 0, which is not supported\"}],\"RMRKIndexOutOfRange()\":[{\"notice\":\"Attempting to interact with an asset, using index greater than number of assets\"}],\"RMRKMaxPendingAssetsReached()\":[{\"notice\":\"Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is  128)\"}],\"RMRKNoAssetMatchingId()\":[{\"notice\":\"Attempting to interact with an asset that can not be found\"}],\"RMRKNotApprovedForAssetsOrOwner()\":[{\"notice\":\"Attempting to manage an asset without owning it or having been granted permission by the owner to do so\"}],\"RMRKTokenDoesNotHaveAsset()\":[{\"notice\":\"Attempting to compose a NFT of a token without active assets\"}],\"RMRKUnexpectedAssetId()\":[{\"notice\":\"Attempting to accept or reject an asset which does not match the one at the specified index\"}],\"RMRKUnexpectedNumberOfAssets()\":[{\"notice\":\"Attempting to reject all pending assets but more assets than expected are pending\"}]},\"events\":{\"ApprovalForAllForAssets(address,address,bool)\":{\"notice\":\"Used to notify listeners that owner has granted approval to the user to manage assets of all of their  tokens.\"},\"ApprovalForAssets(address,address,uint256)\":{\"notice\":\"Used to notify listeners that owner has granted an approval to the user to manage the assets of a  given token.\"},\"AssetAccepted(uint256,uint64,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is accepted by the token and migrated  from token's pending assets array to active assets array of the token.\"},\"AssetAddedToTokens(uint256[],uint64,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is added to token's pending asset  array.\"},\"AssetPrioritySet(uint256)\":{\"notice\":\"Used to notify listeners that token's prioritiy array is reordered.\"},\"AssetRejected(uint256,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is rejected from token and is dropped  from the pending assets array of the token.\"},\"AssetSet(uint64)\":{\"notice\":\"Used to notify listeners that an asset object is initialized at `assetId`.\"},\"Soulbound(uint256,bool)\":{\"notice\":\"Emitted when a token's soulbound state changes.\"}},\"kind\":\"user\",\"methods\":{\"RMRK_INTERFACE()\":{\"notice\":\"Interface identifier of the @rmrk-team/evm-contracts package\"},\"VERSION()\":{\"notice\":\"Version of the @rmrk-team/evm-contracts package\"},\"acceptAsset(uint256,uint256,uint64)\":{\"notice\":\"Accepts an asset at from the pending array of given token.\"},\"approve(address,uint256)\":{\"notice\":\"Used to grant a one-time approval to manage one's token.\"},\"approveForAssets(address,uint256)\":{\"notice\":\"Used to grant permission to the user to manage token's assets.\"},\"balanceOf(address)\":{\"notice\":\"Used to retrieve the number of tokens in ``owner``'s account.\"},\"getActiveAssetPriorities(uint256)\":{\"notice\":\"Used to retrieve the priorities of the active resoources of a given token.\"},\"getActiveAssets(uint256)\":{\"notice\":\"Used to retrieve IDs of the active assets of given token.\"},\"getApproved(uint256)\":{\"notice\":\"Used to retrieve the account approved to manage given token.\"},\"getApprovedForAssets(uint256)\":{\"notice\":\"Used to retrieve the address of the account approved to manage assets of a given token.\"},\"getAssetMetadata(uint256,uint64)\":{\"notice\":\"Used to fetch the asset metadata of the specified token's active asset with the given index.\"},\"getAssetReplacements(uint256,uint64)\":{\"notice\":\"Used to retrieve the asset that will be replaced if a given asset from the token's pending array  is accepted.\"},\"getPendingAssets(uint256)\":{\"notice\":\"Used to retrieve IDs of the pending assets of given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Used to check if the given address is allowed to manage the tokens of the specified address.\"},\"isApprovedForAllForAssets(address,address)\":{\"notice\":\"Used to check whether the address has been granted the operator role by a given address or not.\"},\"isTransferable(uint256,address,address)\":{\"notice\":\"Used to check whether the given token is transferable or not.\"},\"ownerOf(uint256)\":{\"notice\":\"Used to retrieve the owner of the given token.\"},\"rejectAllAssets(uint256,uint256)\":{\"notice\":\"Rejects all assets from the pending array of a given token.\"},\"rejectAsset(uint256,uint256,uint64)\":{\"notice\":\"Rejects an asset from the pending array of given token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Used to safely transfer a given token token from `from` to `to`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Used to safely transfer a given token token from `from` to `to`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Used to approve or remove `operator` as an operator for the caller.\"},\"setApprovalForAllForAssets(address,bool)\":{\"notice\":\"Used to add or remove an operator of assets for the caller.\"},\"setPriority(uint256,uint64[])\":{\"notice\":\"Sets a new priority array for a given token.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers a given token from `from` to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiAsset.sol\":\"MultiAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AbstractMultiAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC5773} from \\\"./IERC5773.sol\\\";\\nimport {RMRKLib} from \\\"./RMRKLib.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./RMRKErrors.sol\\\";\\n\\n/**\\n * @title AbstractMultiAsset\\n * @author RMRK team\\n * @notice Abstract Smart contract implementing most of the common logic for contracts implementing IERC5773\\n */\\nabstract contract AbstractMultiAsset is Context, IERC5773 {\\n    using RMRKLib for uint64[];\\n\\n    /// Mapping of uint64 Ids to asset metadata\\n    mapping(uint64 => string) internal _assets;\\n\\n    /// Mapping of tokenId to new asset, to asset to be replaced\\n    mapping(uint256 => mapping(uint64 => uint64)) internal _assetReplacements;\\n\\n    /// Mapping of tokenId to an array of active assets\\n    /// @dev Active recurses is unbounded, getting all would reach gas limit at around 30k items\\n    /// so we leave this as internal in case a custom implementation needs to implement pagination\\n    mapping(uint256 => uint64[]) internal _activeAssets;\\n\\n    /// Mapping of tokenId to an array of pending assets\\n    mapping(uint256 => uint64[]) internal _pendingAssets;\\n\\n    /// Mapping of tokenId to an array of priorities for active assets\\n    mapping(uint256 => uint64[]) internal _activeAssetPriorities;\\n\\n    /// Mapping of tokenId to assetId to whether the token has this asset assigned\\n    mapping(uint256 => mapping(uint64 => bool)) internal _tokenAssets;\\n\\n    /// Mapping from owner to operator approvals for assets\\n    mapping(address => mapping(address => bool))\\n        private _operatorApprovalsForAssets;\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getAssetMetadata(\\n        uint256 tokenId,\\n        uint64 assetId\\n    ) public view virtual returns (string memory metadata) {\\n        if (!_tokenAssets[tokenId][assetId]) revert RMRKTokenDoesNotHaveAsset();\\n        metadata = _assets[assetId];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getActiveAssets(\\n        uint256 tokenId\\n    ) public view virtual returns (uint64[] memory assetIds) {\\n        assetIds = _activeAssets[tokenId];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getPendingAssets(\\n        uint256 tokenId\\n    ) public view virtual returns (uint64[] memory assetIds) {\\n        assetIds = _pendingAssets[tokenId];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getActiveAssetPriorities(\\n        uint256 tokenId\\n    ) public view virtual returns (uint64[] memory priorities) {\\n        priorities = _activeAssetPriorities[tokenId];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getAssetReplacements(\\n        uint256 tokenId,\\n        uint64 newAssetId\\n    ) public view virtual returns (uint64 replacesAssetId) {\\n        replacesAssetId = _assetReplacements[tokenId][newAssetId];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function isApprovedForAllForAssets(\\n        address owner,\\n        address operator\\n    ) public view virtual returns (bool isApproved) {\\n        isApproved = _operatorApprovalsForAssets[owner][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function setApprovalForAllForAssets(\\n        address operator,\\n        bool approved\\n    ) public virtual {\\n        if (_msgSender() == operator)\\n            revert RMRKApprovalForAssetsToCurrentOwner();\\n\\n        _operatorApprovalsForAssets[_msgSender()][operator] = approved;\\n        emit ApprovalForAllForAssets(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @notice Used to accept a pending asset.\\n     * @dev The call is reverted if there is no pending asset at a given index.\\n     * @dev Emits ***AssetAccepted*** event.\\n     * @param tokenId ID of the token for which to accept the pending asset\\n     * @param index Index of the asset in the pending array to accept\\n     * @param assetId ID of the asset to accept in token's pending array\\n     */\\n    function _acceptAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {\\n        _validatePendingAssetAtIndex(tokenId, index, assetId);\\n        _beforeAcceptAsset(tokenId, index, assetId);\\n\\n        uint64 replacesId = _assetReplacements[tokenId][assetId];\\n        uint256 replaceIndex;\\n        bool replacefound;\\n        if (replacesId != uint64(0))\\n            (replaceIndex, replacefound) = _activeAssets[tokenId].indexOf(\\n                replacesId\\n            );\\n\\n        if (replacefound) {\\n            // We don't want to remove and then push a new asset.\\n            // This way we also keep the priority of the original asset\\n            _activeAssets[tokenId][replaceIndex] = assetId;\\n            delete _tokenAssets[tokenId][replacesId];\\n        } else {\\n            // We use the current size as next priority, by default priorities would be [0,1,2...]\\n            _activeAssetPriorities[tokenId].push(\\n                uint64(_activeAssets[tokenId].length)\\n            );\\n            _activeAssets[tokenId].push(assetId);\\n            replacesId = uint64(0);\\n        }\\n        _removePendingAsset(tokenId, index, assetId);\\n\\n        emit AssetAccepted(tokenId, assetId, replacesId);\\n        _afterAcceptAsset(tokenId, index, assetId);\\n    }\\n\\n    /**\\n     * @notice Used to reject the specified asset from the pending array.\\n     * @dev The call is reverted if there is no pending asset at a given index.\\n     * @dev Emits ***AssetRejected*** event.\\n     * @param tokenId ID of the token that the asset is being rejected from\\n     * @param index Index of the asset in the pending array to be rejected\\n     * @param assetId ID of the asset expected to be in the index\\n     */\\n    function _rejectAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {\\n        _validatePendingAssetAtIndex(tokenId, index, assetId);\\n        _beforeRejectAsset(tokenId, index, assetId);\\n\\n        _removePendingAsset(tokenId, index, assetId);\\n        delete _tokenAssets[tokenId][assetId];\\n\\n        emit AssetRejected(tokenId, assetId);\\n        _afterRejectAsset(tokenId, index, assetId);\\n    }\\n\\n    /**\\n     * @notice Used to validate the index on the pending assets array\\n     * @dev The call is reverted if the index is out of range or the asset Id is not present at the index.\\n     * @param tokenId ID of the token that the asset is validated from\\n     * @param index Index of the asset in the pending array\\n     * @param assetId Id of the asset expected to be in the index\\n     */\\n    function _validatePendingAssetAtIndex(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) private view {\\n        if (index >= _pendingAssets[tokenId].length)\\n            revert RMRKIndexOutOfRange();\\n        if (assetId != _pendingAssets[tokenId][index])\\n            revert RMRKUnexpectedAssetId();\\n    }\\n\\n    /**\\n     * @notice Used to remove the asset at the index on the pending assets array\\n     * @param tokenId ID of the token that the asset is being removed from\\n     * @param index Index of the asset in the pending array\\n     * @param assetId Id of the asset expected to be in the index\\n     */\\n    function _removePendingAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) private {\\n        _pendingAssets[tokenId].removeItemByIndex(index);\\n        delete _assetReplacements[tokenId][assetId];\\n    }\\n\\n    /**\\n     * @notice Used to reject all of the pending assets for the given token.\\n     * @dev When rejecting all assets, the pending array is indiscriminately cleared.\\n     * @dev If the number of pending assets is greater than the value of `maxRejections`, the exectuion will be\\n     *  reverted.\\n     * @dev Emits ***AssetRejected*** event.\\n     * @param tokenId ID of the token to reject all of the pending assets.\\n     * @param maxRejections Maximum number of expected assets to reject, used to prevent from\\n     *  rejecting assets which arrive just before this operation.\\n     */\\n    function _rejectAllAssets(\\n        uint256 tokenId,\\n        uint256 maxRejections\\n    ) internal virtual {\\n        uint256 len = _pendingAssets[tokenId].length;\\n        if (len > maxRejections) revert RMRKUnexpectedNumberOfAssets();\\n\\n        _beforeRejectAllAssets(tokenId);\\n\\n        for (uint256 i; i < len; ) {\\n            uint64 assetId = _pendingAssets[tokenId][i];\\n            delete _assetReplacements[tokenId][assetId];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete (_pendingAssets[tokenId]);\\n\\n        emit AssetRejected(tokenId, uint64(0));\\n        _afterRejectAllAssets(tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to specify the priorities for a given token's active assets.\\n     * @dev If the length of the priorities array doesn't match the length of the active assets array, the execution\\n     *  will be reverted.\\n     * @dev The position of the priority value in the array corresponds the position of the asset in the active\\n     *  assets array it will be applied to.\\n     * @dev Emits ***AssetPrioritySet*** event.\\n     * @param tokenId ID of the token for which the priorities are being set\\n     * @param priorities Array of priorities for the assets\\n     */\\n    function _setPriority(\\n        uint256 tokenId,\\n        uint64[] calldata priorities\\n    ) internal virtual {\\n        uint256 length = priorities.length;\\n        if (length != _activeAssets[tokenId].length)\\n            revert RMRKBadPriorityListLength();\\n\\n        _beforeSetPriority(tokenId, priorities);\\n        _activeAssetPriorities[tokenId] = priorities;\\n\\n        emit AssetPrioritySet(tokenId);\\n        _afterSetPriority(tokenId, priorities);\\n    }\\n\\n    /**\\n     * @notice Used to add an asset entry.\\n     * @dev If the specified ID is already used by another asset, the execution will be reverted.\\n     * @dev This internal function warrants custom access control to be implemented when used.\\n     * @dev Emits ***AssetSet*** event.\\n     * @param id ID of the asset to assign to the new asset\\n     * @param metadataURI Metadata URI of the asset\\n     */\\n    function _addAssetEntry(\\n        uint64 id,\\n        string memory metadataURI\\n    ) internal virtual {\\n        if (id == uint64(0)) revert RMRKIdZeroForbidden();\\n        if (bytes(_assets[id]).length > 0) revert RMRKAssetAlreadyExists();\\n\\n        _beforeAddAsset(id, metadataURI);\\n        _assets[id] = metadataURI;\\n\\n        emit AssetSet(id);\\n        _afterAddAsset(id, metadataURI);\\n    }\\n\\n    /**\\n     * @notice Used to add an asset to a token.\\n     * @dev If the given asset is already added to the token, the execution will be reverted.\\n     * @dev If the asset ID is invalid, the execution will be reverted.\\n     * @dev If the token already has the maximum amount of pending assets (128), the execution will be\\n     *  reverted.\\n     * @dev Emits ***AssetAddedToTokens*** event.\\n     * @param tokenId ID of the token to add the asset to\\n     * @param assetId ID of the asset to add to the token\\n     * @param replacesAssetWithId ID of the asset to replace from the token's list of active assets\\n     */\\n    function _addAssetToToken(\\n        uint256 tokenId,\\n        uint64 assetId,\\n        uint64 replacesAssetWithId\\n    ) internal virtual {\\n        if (_tokenAssets[tokenId][assetId]) revert RMRKAssetAlreadyExists();\\n\\n        if (bytes(_assets[assetId]).length == uint256(0))\\n            revert RMRKNoAssetMatchingId();\\n\\n        if (_pendingAssets[tokenId].length >= 128)\\n            revert RMRKMaxPendingAssetsReached();\\n\\n        _beforeAddAssetToToken(tokenId, assetId, replacesAssetWithId);\\n        _tokenAssets[tokenId][assetId] = true;\\n        _pendingAssets[tokenId].push(assetId);\\n\\n        if (replacesAssetWithId != uint64(0)) {\\n            _assetReplacements[tokenId][assetId] = replacesAssetWithId;\\n        }\\n\\n        uint256[] memory tokenIds = new uint256[](1);\\n        tokenIds[0] = tokenId;\\n        emit AssetAddedToTokens(tokenIds, assetId, replacesAssetWithId);\\n        _afterAddAssetToToken(tokenId, assetId, replacesAssetWithId);\\n    }\\n\\n    /**\\n     * @notice Hook that is called before an asset is added.\\n     * @param id ID of the asset\\n     * @param metadataURI Metadata URI of the asset\\n     */\\n    function _beforeAddAsset(\\n        uint64 id,\\n        string memory metadataURI\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after an asset is added.\\n     * @param id ID of the asset\\n     * @param metadataURI Metadata URI of the asset\\n     */\\n    function _afterAddAsset(\\n        uint64 id,\\n        string memory metadataURI\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called before adding an asset to a token's pending assets array.\\n     * @dev If the asset doesn't intend to replace another asset, the `replacesAssetWithId` value should be `0`.\\n     * @param tokenId ID of the token to which the asset is being added\\n     * @param assetId ID of the asset that is being added\\n     * @param replacesAssetWithId ID of the asset that this asset is attempting to replace\\n     */\\n    function _beforeAddAssetToToken(\\n        uint256 tokenId,\\n        uint64 assetId,\\n        uint64 replacesAssetWithId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after an asset has been added to a token's pending assets array.\\n     * @dev If the asset doesn't intend to replace another asset, the `replacesAssetWithId` value should be `0`.\\n     * @param tokenId ID of the token to which the asset is has been added\\n     * @param assetId ID of the asset that is has been added\\n     * @param replacesAssetWithId ID of the asset that this asset is attempting to replace\\n     */\\n    function _afterAddAssetToToken(\\n        uint256 tokenId,\\n        uint64 assetId,\\n        uint64 replacesAssetWithId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called before an asset is accepted to a token's active assets array.\\n     * @param tokenId ID of the token for which the asset is being accepted\\n     * @param index Index of the asset in the token's pending assets array\\n     * @param assetId ID of the asset expected to be located at the specified `index`\\n     */\\n    function _beforeAcceptAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after an asset is accepted to a token's active assets array.\\n     * @param tokenId ID of the token for which the asset has been accepted\\n     * @param index Index of the asset in the token's pending assets array\\n     * @param assetId ID of the asset expected to have been located at the specified `index`\\n     */\\n    function _afterAcceptAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called before rejecting an asset.\\n     * @param tokenId ID of the token from which the asset is being rejected\\n     * @param index Index of the asset in the token's pending assets array\\n     * @param assetId ID of the asset expected to be located at the specified `index`\\n     */\\n    function _beforeRejectAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after rejecting an asset.\\n     * @param tokenId ID of the token from which the asset has been rejected\\n     * @param index Index of the asset in the token's pending assets array\\n     * @param assetId ID of the asset expected to have been located at the specified `index`\\n     */\\n    function _afterRejectAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called before rejecting all assets of a token.\\n     * @param tokenId ID of the token from which all of the assets are being rejected\\n     */\\n    function _beforeRejectAllAssets(uint256 tokenId) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after rejecting all assets of a token.\\n     * @param tokenId ID of the token from which all of the assets have been rejected\\n     */\\n    function _afterRejectAllAssets(uint256 tokenId) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called before the priorities for token's assets is set.\\n     * @param tokenId ID of the token for which the asset priorities are being set\\n     * @param priorities[] An array of priorities for token's active resources\\n     */\\n    function _beforeSetPriority(\\n        uint256 tokenId,\\n        uint64[] calldata priorities\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after the priorities for token's assets is set.\\n     * @param tokenId ID of the token for which the asset priorities have been set\\n     * @param priorities[] An array of priorities for token's active resources\\n     */\\n    function _afterSetPriority(\\n        uint256 tokenId,\\n        uint64[] calldata priorities\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0x6c18aff7ff097784f13692a3f7b6bd9f9725dd6280ceedfa8748aa798d995d0a\",\"license\":\"Apache-2.0\"},\"contracts/IERC5773.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IERC5773\\n * @author RMRK team\\n * @notice Interface smart contract of the RMRK multi asset module.\\n */\\ninterface IERC5773 is IERC165 {\\n    /**\\n     * @notice Used to notify listeners that an asset object is initialized at `assetId`.\\n     * @param assetId ID of the asset that was initialized\\n     */\\n    event AssetSet(uint64 indexed assetId);\\n\\n    /**\\n     * @notice Used to notify listeners that an asset object at `assetId` is added to token's pending asset\\n     *  array.\\n     * @param tokenIds An array of token IDs that received a new pending asset\\n     * @param assetId ID of the asset that has been added to the token's pending assets array\\n     * @param replacesId ID of the asset that would be replaced\\n     */\\n    event AssetAddedToTokens(\\n        uint256[] tokenIds,\\n        uint64 indexed assetId,\\n        uint64 indexed replacesId\\n    );\\n\\n    /**\\n     * @notice Used to notify listeners that an asset object at `assetId` is accepted by the token and migrated\\n     *  from token's pending assets array to active assets array of the token.\\n     * @param tokenId ID of the token that had a new asset accepted\\n     * @param assetId ID of the asset that was accepted\\n     * @param replacesId ID of the asset that was replaced\\n     */\\n    event AssetAccepted(\\n        uint256 indexed tokenId,\\n        uint64 indexed assetId,\\n        uint64 indexed replacesId\\n    );\\n\\n    /**\\n     * @notice Used to notify listeners that an asset object at `assetId` is rejected from token and is dropped\\n     *  from the pending assets array of the token.\\n     * @param tokenId ID of the token that had an asset rejected\\n     * @param assetId ID of the asset that was rejected\\n     */\\n    event AssetRejected(uint256 indexed tokenId, uint64 indexed assetId);\\n\\n    /**\\n     * @notice Used to notify listeners that token's prioritiy array is reordered.\\n     * @param tokenId ID of the token that had the asset priority array updated\\n     */\\n    event AssetPrioritySet(uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Used to notify listeners that owner has granted an approval to the user to manage the assets of a\\n     *  given token.\\n     * @dev Approvals must be cleared on transfer\\n     * @param owner Address of the account that has granted the approval for all token's assets\\n     * @param approved Address of the account that has been granted approval to manage the token's assets\\n     * @param tokenId ID of the token on which the approval was granted\\n     */\\n    event ApprovalForAssets(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @notice Used to notify listeners that owner has granted approval to the user to manage assets of all of their\\n     *  tokens.\\n     * @param owner Address of the account that has granted the approval for all assets on all of their tokens\\n     * @param operator Address of the account that has been granted the approval to manage the token's assets on all of\\n     *  the tokens\\n     * @param approved Boolean value signifying whether the permission has been granted (`true`) or revoked (`false`)\\n     */\\n    event ApprovalForAllForAssets(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @notice Accepts an asset at from the pending array of given token.\\n     * @dev Migrates the asset from the token's pending asset array to the token's active asset array.\\n     * @dev Active assets cannot be removed by anyone, but can be replaced by a new asset.\\n     * @dev Requirements:\\n     *\\n     *  - The caller must own the token or be approved to manage the token's assets\\n     *  - `tokenId` must exist.\\n     *  - `index` must be in range of the length of the pending asset array.\\n     * @dev Emits an {AssetAccepted} event.\\n     * @param tokenId ID of the token for which to accept the pending asset\\n     * @param index Index of the asset in the pending array to accept\\n     * @param assetId ID of the asset expected to be in the index\\n     */\\n    function acceptAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) external;\\n\\n    /**\\n     * @notice Rejects an asset from the pending array of given token.\\n     * @dev Removes the asset from the token's pending asset array.\\n     * @dev Requirements:\\n     *\\n     *  - The caller must own the token or be approved to manage the token's assets\\n     *  - `tokenId` must exist.\\n     *  - `index` must be in range of the length of the pending asset array.\\n     * @dev Emits a {AssetRejected} event.\\n     * @param tokenId ID of the token that the asset is being rejected from\\n     * @param index Index of the asset in the pending array to be rejected\\n     * @param assetId ID of the asset expected to be in the index\\n     */\\n    function rejectAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) external;\\n\\n    /**\\n     * @notice Rejects all assets from the pending array of a given token.\\n     * @dev Effecitvely deletes the pending array.\\n     * @dev Requirements:\\n     *\\n     *  - The caller must own the token or be approved to manage the token's assets\\n     *  - `tokenId` must exist.\\n     * @dev Emits a {AssetRejected} event with assetId = 0.\\n     * @param tokenId ID of the token of which to clear the pending array.\\n     * @param maxRejections Maximum number of expected assets to reject, used to prevent from rejecting assets which\\n     *  arrive just before this operation.\\n     */\\n    function rejectAllAssets(uint256 tokenId, uint256 maxRejections) external;\\n\\n    /**\\n     * @notice Sets a new priority array for a given token.\\n     * @dev The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest\\n     *  priority.\\n     * @dev Value `0` of a priority is a special case equivalent to unitialized.\\n     * @dev Requirements:\\n     *\\n     *  - The caller must own the token or be approved to manage the token's assets\\n     *  - `tokenId` must exist.\\n     *  - The length of `priorities` must be equal the length of the active assets array.\\n     * @dev Emits a {AssetPrioritySet} event.\\n     * @param tokenId ID of the token to set the priorities for\\n     * @param priorities An array of priorities of active assets. The succesion of items in the priorities array\\n     *  matches that of the succesion of items in the active array\\n     */\\n    function setPriority(\\n        uint256 tokenId,\\n        uint64[] calldata priorities\\n    ) external;\\n\\n    /**\\n     * @notice Used to retrieve IDs of the active assets of given token.\\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\\n     *  `getAssetMetadata(tokenId, assetId)`.\\n     * @dev You can safely get 10k\\n     * @param tokenId ID of the token to retrieve the IDs of the active assets\\n     * @return assetIds An array of active asset IDs of the given token\\n     */\\n    function getActiveAssets(\\n        uint256 tokenId\\n    ) external view returns (uint64[] memory assetIds);\\n\\n    /**\\n     * @notice Used to retrieve IDs of the pending assets of given token.\\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\\n     *  `getAssetMetadata(tokenId, assetId)`.\\n     * @param tokenId ID of the token to retrieve the IDs of the pending assets\\n     * @return assetIds An array of pending asset IDs of the given token\\n     */\\n    function getPendingAssets(\\n        uint256 tokenId\\n    ) external view returns (uint64[] memory assetIds);\\n\\n    /**\\n     * @notice Used to retrieve the priorities of the active resoources of a given token.\\n     * @dev Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset\\n     *  priorites.\\n     * @param tokenId ID of the token for which to retrieve the priorities of the active assets\\n     * @return priorities An array of priorities of the active assets of the given token\\n     */\\n    function getActiveAssetPriorities(\\n        uint256 tokenId\\n    ) external view returns (uint64[] memory priorities);\\n\\n    /**\\n     * @notice Used to retrieve the asset that will be replaced if a given asset from the token's pending array\\n     *  is accepted.\\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\\n     *  `getAssetMetadata(tokenId, assetId)`.\\n     * @param tokenId ID of the token to check\\n     * @param newAssetId ID of the pending asset which will be accepted\\n     * @return replacesAssetWithId ID of the asset which will be replaced\\n     */\\n    function getAssetReplacements(\\n        uint256 tokenId,\\n        uint64 newAssetId\\n    ) external view returns (uint64 replacesAssetWithId);\\n\\n    /**\\n     * @notice Used to fetch the asset metadata of the specified token's active asset with the given index.\\n     * @dev Assets are stored by reference mapping `_assets[assetId]`.\\n     * @dev Can be overriden to implement enumerate, fallback or other custom logic.\\n     * @param tokenId ID of the token from which to retrieve the asset metadata\\n     * @param assetId Asset Id, must be in the active assets array\\n     * @return metadata The metadata of the asset belonging to the specified index in the token's active assets\\n     *  array\\n     */\\n    function getAssetMetadata(\\n        uint256 tokenId,\\n        uint64 assetId\\n    ) external view returns (string memory metadata);\\n\\n    // Approvals\\n\\n    /**\\n     * @notice Used to grant permission to the user to manage token's assets.\\n     * @dev This differs from transfer approvals, as approvals are not cleared when the approved party accepts or\\n     *  rejects an asset, or sets asset priorities. This approval is cleared on token transfer.\\n     * @dev Only a single account can be approved at a time, so approving the `0x0` address clears previous approvals.\\n     * @dev Requirements:\\n     *\\n     *  - The caller must own the token or be an approved operator.\\n     *  - `tokenId` must exist.\\n     * @dev Emits an {ApprovalForAssets} event.\\n     * @param to Address of the account to grant the approval to\\n     * @param tokenId ID of the token for which the approval to manage the assets is granted\\n     */\\n    function approveForAssets(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Used to retrieve the address of the account approved to manage assets of a given token.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must exist.\\n     * @param tokenId ID of the token for which to retrieve the approved address\\n     * @return approved Address of the account that is approved to manage the specified token's assets\\n     */\\n    function getApprovedForAssets(\\n        uint256 tokenId\\n    ) external view returns (address approved);\\n\\n    /**\\n     * @notice Used to add or remove an operator of assets for the caller.\\n     * @dev Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token\\n     *  owned by the caller.\\n     * @dev Requirements:\\n     *\\n     *  - The `operator` cannot be the caller.\\n     * @dev Emits an {ApprovalForAllForAssets} event.\\n     * @param operator Address of the account to which the operator role is granted or revoked from\\n     * @param approved The boolean value indicating whether the operator role is being granted (`true`) or revoked\\n     *  (`false`)\\n     */\\n    function setApprovalForAllForAssets(\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @notice Used to check whether the address has been granted the operator role by a given address or not.\\n     * @dev See {setApprovalForAllForAssets}.\\n     * @param owner Address of the account that we are checking for whether it has granted the operator role\\n     * @param operator Address of the account that we are checking whether it has the operator role or not\\n     * @return isApproved A boolean value indicating whether the account we are checking has been granted the operator role\\n     */\\n    function isApprovedForAllForAssets(\\n        address owner,\\n        address operator\\n    ) external view returns (bool isApproved);\\n}\",\"keccak256\":\"0x3bdf56b2724091dc847b8dcc6059afbf4742fce8d000ffaf49c368adb21dfe96\",\"license\":\"Apache-2.0\"},\"contracts/IERC6454.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IERC6454\\n * @author RMRK team\\n * @notice A minimal extension to identify the transferability of Non-Fungible Tokens.\\n */\\ninterface IERC6454 is IERC165 {\\n    /**\\n     * @notice Used to check whether the given token is transferable or not.\\n     * @dev If this function returns `false`, the transfer of the token MUST revert execution.\\n     * @dev If the tokenId does not exist, this method MUST revert execution, unless the token is being checked for\\n     *  minting.\\n     * @param tokenId ID of the token being checked\\n     * @param from Address from which the token is being transferred\\n     * @param to Address to which the token is being transferred\\n     * @return isTransferable_ Boolean value indicating whether the given token is transferable\\n     */\\n    function isTransferable(\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) external view returns (bool isTransferable_);\\n}\",\"keccak256\":\"0x1484cf73a9d4e8c7648f4f9687cedb6f2cbf47807683ac7452f32071b711b998\",\"license\":\"Apache-2.0\"},\"contracts/MultiAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./RMRKMultiAsset.sol\\\";\\nimport \\\"./RMRKSoulboundPerToken.sol\\\";\\n\\ncontract MultiAsset is RMRKMultiAsset,RMRKSoulboundPerToken{\\n    uint64 tokenId = 1;\\n    uint64 assetId = 1;\\n    uint256 index = 0;\\n    function mint(string memory metadataURI,bool soulBound) public{\\n        _mint(msg.sender,tokenId);\\n        addAssets(tokenId,metadataURI);\\n        _setSoulbound(tokenId,!soulBound);\\n        tokenId++;\\n    }\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 token_id\\n    ) internal virtual override (RMRKSoulbound,RMRKMultiAsset) {\\n        if (!isTransferable(token_id, from, to))\\n            revert RMRKCannotTransferSoulbound();\\n    }\\n    function tokenCount() public view returns(uint64){\\n        return tokenId;\\n    }\\n    function getTokens()  public view returns(uint64 [] memory){\\n        uint64[] memory tokens = new uint64[] (tokenId-1);\\n        for(uint64 i = 1; i < tokenId;i++){\\n            tokens[i-1] = i;\\n        }\\n        return tokens;\\n    }\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(RMRKMultiAsset,RMRKSoulbound) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n    function addAssets(uint64 token_id,string memory metadataURI) public {   \\n        address owner = ownerOf(token_id);\\n        require(owner == msg.sender,\\\"only owner can add assets\\\");   \\n        _addAssetEntry(assetId,metadataURI);\\n        _addAssetToToken(token_id,assetId,assetId);\\n        _acceptAsset(token_id,index,assetId);\\n        assetId++;\\n    }\\n}\",\"keccak256\":\"0x18f8889c8913f1de31591d67f840725587bf27aa477df4ff13c7d1534fce4848\",\"license\":\"MIT\"},\"contracts/RMRKCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RMRKCore\\n * @author RMRK team\\n * @notice Smart contract of the RMRK core module.\\n * @dev This is currently just a passthrough contract which allows for granular editing of base-level ERC721 functions.\\n */\\ncontract RMRKCore {\\n    string private constant _VERSION = \\\"2.3.2\\\";\\n    bytes4 private constant _RMRK_INTERFACE = 0x524D524B; // \\\"RMRK\\\" in ASCII hex\\n\\n    /**\\n     * @notice Version of the @rmrk-team/evm-contracts package\\n     * @return version Version identifier for implementations of the @rmrk-team/evm-contracts package\\n     */\\n    function VERSION() public pure returns (string memory version) {\\n        version = _VERSION;\\n    }\\n\\n    /**\\n     * @notice Interface identifier of the @rmrk-team/evm-contracts package\\n     * @return rmrkInterface Interface identifier for implementations of the @rmrk-team/evm-contracts package\\n     */\\n    function RMRK_INTERFACE() public pure returns (bytes4 rmrkInterface) {\\n        rmrkInterface = _RMRK_INTERFACE;\\n    }\\n}\",\"keccak256\":\"0x96ed0062d33f751a844208620d25c83318f8a68d03f97d4b0b34d991c1ab8874\",\"license\":\"Apache-2.0\"},\"contracts/RMRKErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/// @title RMRKErrors\\n/// @author RMRK team\\n/// @notice A collection of errors used in the RMRK suite\\n/// @dev Errors are kept in a centralised file in order to provide a central point of reference and to avoid error\\n///  naming collisions due to inheritance\\n\\n/// Attempting to grant the token to 0x0 address\\nerror ERC721AddressZeroIsNotaValidOwner();\\n/// Attempting to grant approval to the current owner of the token\\nerror ERC721ApprovalToCurrentOwner();\\n/// Attempting to grant approval when not being owner or approved for all should not be permitted\\nerror ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\\n/// Attempting to grant approval to self\\nerror ERC721ApproveToCaller();\\n/// Attempting to use an invalid token ID\\nerror ERC721InvalidTokenId();\\n/// Attempting to mint to 0x0 address\\nerror ERC721MintToTheZeroAddress();\\n/// Attempting to manage a token without being its owner or approved by the owner\\nerror ERC721NotApprovedOrOwner();\\n/// Attempting to mint an already minted token\\nerror ERC721TokenAlreadyMinted();\\n/// Attempting to transfer the token from an address that is not the owner\\nerror ERC721TransferFromIncorrectOwner();\\n/// Attempting to safe transfer to an address that is unable to receive the token\\nerror ERC721TransferToNonReceiverImplementer();\\n/// Attempting to transfer the token to a 0x0 address\\nerror ERC721TransferToTheZeroAddress();\\n/// Attempting to grant approval of assets to their current owner\\nerror RMRKApprovalForAssetsToCurrentOwner();\\n/// Attempting to grant approval of assets without being the caller or approved for all\\nerror RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\\n/// Attempting to incorrectly configue a Catalog item\\nerror RMRKBadConfig();\\n/// Attempting to set the priorities with an array of length that doesn't match the length of active assets array\\nerror RMRKBadPriorityListLength();\\n/// Attempting to add an asset entry with `Part`s, without setting the `Catalog` address\\nerror RMRKCatalogRequiredForParts();\\n/// Attempting to transfer a soulbound (non-transferrable) token\\nerror RMRKCannotTransferSoulbound();\\n/// Attempting to accept a child that has already been accepted\\nerror RMRKChildAlreadyExists();\\n/// Attempting to interact with a child, using index that is higher than the number of children\\nerror RMRKChildIndexOutOfRange();\\n/// Attempting to find the index of a child token on a parent which does not own it.\\nerror RMRKChildNotFoundInParent();\\n/// Attempting to equip a `Part` with a child not approved by the Catalog\\nerror RMRKEquippableEquipNotAllowedByCatalog();\\n/// Attempting to use ID 0, which is not supported\\n/// @dev The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\\nerror RMRKIdZeroForbidden();\\n/// Attempting to interact with an asset, using index greater than number of assets\\nerror RMRKIndexOutOfRange();\\n/// Attempting to reclaim a child that can't be reclaimed\\nerror RMRKInvalidChildReclaim();\\n/// Attempting to interact with an end-user account when the contract account is expected\\nerror RMRKIsNotContract();\\n/// Attempting to interact with a contract that had its operation locked\\nerror RMRKLocked();\\n/// Attempting to add a pending child after the number of pending children has reached the limit (default limit is 128)\\nerror RMRKMaxPendingChildrenReached();\\n/// Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is\\n///  128)\\nerror RMRKMaxPendingAssetsReached();\\n/// Attempting to burn a total number of recursive children higher than maximum set\\n/// @param childContract Address of the collection smart contract in which the maximum number of recursive burns was reached\\n/// @param childId ID of the child token at which the maximum number of recursive burns was reached\\nerror RMRKMaxRecursiveBurnsReached(address childContract, uint256 childId);\\n/// Attempting to mint a number of tokens that would cause the total supply to be greater than maximum supply\\nerror RMRKMintOverMax();\\n/// Attempting to mint zero tokens\\nerror RMRKMintZero();\\n/// Attempting to pass complementary arrays of different lengths\\nerror RMRKMismachedArrayLength();\\n/// Attempting to transfer a child before it is unequipped\\nerror RMRKMustUnequipFirst();\\n/// Attempting to nest a child over the nestable limit (current limit is 100 levels of nesting)\\nerror RMRKNestableTooDeep();\\n/// Attempting to nest the token to own descendant, which would create a loop and leave the looped tokens in limbo\\nerror RMRKNestableTransferToDescendant();\\n/// Attempting to nest the token to a smart contract that doesn't support nesting\\nerror RMRKNestableTransferToNonRMRKNestableImplementer();\\n/// Attempting to nest the token into itself\\nerror RMRKNestableTransferToSelf();\\n/// Attempting to interact with an asset that can not be found\\nerror RMRKNoAssetMatchingId();\\n/// Attempting to manage an asset without owning it or having been granted permission by the owner to do so\\nerror RMRKNotApprovedForAssetsOrOwner();\\n/// Attempting to interact with a token without being its owner or having been granted permission by the\\n///  owner to do so\\n/// @dev When a token is nested, only the direct owner (NFT parent) can mange it. In that case, approved addresses are\\n///  not allowed to manage it, in order to ensure the expected behaviour\\nerror RMRKNotApprovedOrDirectOwner();\\n/// Attempting to compose an asset wihtout having an associated Catalog\\nerror RMRKNotComposableAsset();\\n/// Attempting to unequip an item that isn't equipped\\nerror RMRKNotEquipped();\\n/// Attempting to interact with a management function without being the smart contract's owner\\nerror RMRKNotOwner();\\n/// Attempting to interact with a function without being the owner or contributor of the collection\\nerror RMRKNotOwnerOrContributor();\\n/// Attempting to transfer the ownership to the 0x0 address\\nerror RMRKNewOwnerIsZeroAddress();\\n/// Attempting to assign a 0x0 address as a contributor\\nerror RMRKNewContributorIsZeroAddress();\\n/// Attempting an operation requiring the token being nested, while it is not\\nerror RMRKParentIsNotNFT();\\n/// Attempting to add a `Part` with an ID that is already used\\nerror RMRKPartAlreadyExists();\\n/// Attempting to use a `Part` that doesn't exist\\nerror RMRKPartDoesNotExist();\\n/// Attempting to use a `Part` that is `Fixed` when `Slot` kind of `Part` should be used\\nerror RMRKPartIsNotSlot();\\n/// Attempting to interact with a pending child using an index greater than the size of pending array\\nerror RMRKPendingChildIndexOutOfRange();\\n/// Attempting to add an asset using an ID that has already been used\\nerror RMRKAssetAlreadyExists();\\n/// Attempting to equip an item into a slot that already has an item equipped\\nerror RMRKSlotAlreadyUsed();\\n/// Attempting to equip an item into a `Slot` that the target asset does not implement\\nerror RMRKTargetAssetCannotReceiveSlot();\\n/// Attempting to equip a child into a `Slot` and parent that the child's collection doesn't support\\nerror RMRKTokenCannotBeEquippedWithAssetIntoSlot();\\n/// Attempting to compose a NFT of a token without active assets\\nerror RMRKTokenDoesNotHaveAsset();\\n/// Attempting to determine the asset with the top priority on a token without assets\\nerror RMRKTokenHasNoAssets();\\n/// Attempting to accept or transfer a child which does not match the one at the specified index\\nerror RMRKUnexpectedChildId();\\n/// Attempting to reject all pending assets but more assets than expected are pending\\nerror RMRKUnexpectedNumberOfAssets();\\n/// Attempting to reject all pending children but children assets than expected are pending\\nerror RMRKUnexpectedNumberOfChildren();\\n/// Attempting to accept or reject an asset which does not match the one at the specified index\\nerror RMRKUnexpectedAssetId();\\n/// Attempting an operation expecting a parent to the token which is not the actual one\\nerror RMRKUnexpectedParent();\\n/// Attempting not to pass an empty array of equippable addresses when adding or setting the equippable addresses\\nerror RMRKZeroLengthIdsPassed();\\n/// Attempting to set the royalties to a value higher than 100% (10000 in basis points)\\nerror RMRKRoyaltiesTooHigh();\\n/// Attempting to do a bulk operation on a token that is not owned by the caller\\nerror RMRKCanOnlyDoBulkOperationsOnOwnedTokens();\\n/// Attempting to do a bulk operation with multiple tokens at a time\\nerror RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime();\\n/// Attempting to pay with native token with a value different than expected\\nerror RMRKWrongValueSent();\\n// Attempting to send native token to a recipient that is unable to receive it\\nerror TransferFailed();\",\"keccak256\":\"0x5ccf6f776fd1671316fad0d7371af3e5194403a8ce2577b12be237ed78b2ce4b\",\"license\":\"Apache-2.0\"},\"contracts/RMRKLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RMRKLib\\n * @author RMRK team\\n * @notice RMRK library smart contract.\\n */\\nlibrary RMRKLib {\\n    error IndexOutOfBounds();\\n\\n    /**\\n     * @notice Used to remove an item from the array using the specified index.\\n     * @dev The item is removed by replacing it with the last item and removing the last element.\\n     * @param array An array of items containing the item to be removed\\n     * @param index Index of the item to remove\\n     */\\n    function removeItemByIndex(uint64[] storage array, uint256 index) internal {\\n        //Check to see if this is already gated by require in all calls\\n        if (index >= array.length) revert IndexOutOfBounds();\\n        array[index] = array[array.length - 1];\\n        array.pop();\\n    }\\n\\n    /**\\n     * @notice Used to determine the index of the item in the array by spedifying its value.\\n     * @dev This was adapted from Cryptofin-Solidity `arrayUtils`.\\n     * @dev If the item is not found the index returned will equal `0`.\\n     * @param A The array containing the item to be found\\n     * @param a The value of the item to find the index of\\n     * @return The index of the item in the array\\n     * @return A boolean value specifying whether the item was found\\n     */\\n    function indexOf(\\n        uint64[] memory A,\\n        uint64 a\\n    ) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (0, false);\\n    }\\n}\",\"keccak256\":\"0x85d6166c1a7931135f6d1da218624ff3ebbb3ec922b644599561d42e3b6e4608\",\"license\":\"Apache-2.0\"},\"contracts/RMRKMultiAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC5773} from \\\"./IERC5773.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {AbstractMultiAsset} from \\\"./AbstractMultiAsset.sol\\\";\\nimport {RMRKCore} from \\\"./RMRKCore.sol\\\";\\nimport \\\"./RMRKErrors.sol\\\";\\n\\n/**\\n * @title RMRKMultiAsset\\n * @author RMRK team\\n * @notice Smart contract of the RMRK Multi asset module.\\n */\\ncontract RMRKMultiAsset is IERC165, IERC721, AbstractMultiAsset, RMRKCore {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // ------------------- ASSETS --------------\\n\\n    // Mapping from token ID to approved address for assets\\n    mapping(uint256 => address) private _tokenApprovalsForAssets;\\n\\n    // -------------------------- ERC721 MODIFIERS ----------------------------\\n\\n    /**\\n     * @notice Used to verify that the caller is the owner of the given token or approved by its owner to manage it.\\n     * @dev If the caller is not the owner or approved by the owner, the execution is reverted.\\n     * @param tokenId ID of the token being checked\\n     */\\n    function _onlyApprovedOrOwner(uint256 tokenId) internal view {\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\\n            revert ERC721NotApprovedOrOwner();\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is the owner of the given token or approved by its owner to manage it.\\n     * @param tokenId ID of the token being checked\\n     */\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\n        _onlyApprovedOrOwner(tokenId);\\n        _;\\n    }\\n\\n    // ----------------------- MODIFIERS FOR ASSETS ------------------------\\n\\n    /**\\n     * @notice Internal function to check whether the queried user is either:\\n     *   1. The root owner of the token associated with `tokenId`.\\n     *   2. Is approved for all assets of the current owner via the `setApprovalForAllForAssets` function.\\n     *   3. Is granted approval for the specific tokenId for asset management via the `approveForAssets` function.\\n     * @param user Address of the user we are checking for permission\\n     * @param tokenId ID of the token to query for permission for a given `user`\\n     * @return A boolean value indicating whether the user is approved to manage the token or not\\n     */\\n    function _isApprovedForAssetsOrOwner(\\n        address user,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (user == owner ||\\n            isApprovedForAllForAssets(owner, user) ||\\n            getApprovedForAssets(tokenId) == user);\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is either the owner of the given token or approved by its owner to manage\\n     *  the assets on the given token.\\n     * @dev If the caller is not the owner of the given token or approved by its owner to manage the assets on the\\n     *  given token, the execution will be reverted.\\n     * @param tokenId ID of the token being checked\\n     */\\n    function _onlyApprovedForAssetsOrOwner(uint256 tokenId) internal view {\\n        if (!_isApprovedForAssetsOrOwner(_msgSender(), tokenId))\\n            revert RMRKNotApprovedForAssetsOrOwner();\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is either the owner of the given token or approved by its owner to manage\\n     *  the assets on the given token.\\n     * @param tokenId ID of the token being checked\\n     */\\n    modifier onlyApprovedForAssetsOrOwner(uint256 tokenId) {\\n        _onlyApprovedForAssetsOrOwner(tokenId);\\n        _;\\n    }\\n\\n    // ------------------------------- ERC721 ---------------------------------\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC5773).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the number of tokens in ``owner``'s account.\\n     * @param owner Address of the account being checked\\n     * @return balance The balance of the given account\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721AddressZeroIsNotaValidOwner();\\n        balance = _balances[owner];\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the owner of the given token.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must exist.\\n     * @param tokenId ID of the token for which to retrieve the token for\\n     * @return owner Address of the account owning the token\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual returns (address owner) {\\n        owner = _owners[tokenId];\\n        if (owner == address(0)) revert ERC721InvalidTokenId();\\n    }\\n\\n    /**\\n     * @notice Used to grant a one-time approval to manage one's token.\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * @dev The approval is cleared when the token is transferred.\\n     * @dev Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     * @dev Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     * @dev Emits an {Approval} event.\\n     * @param to Address receiving the approval\\n     * @param tokenId ID of the token for which the approval is being granted\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        address owner = ownerOf(tokenId);\\n        if (to == owner) revert ERC721ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\\n            revert ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the account approved to manage given token.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must exist.\\n     * @param tokenId ID of the token to check for approval\\n     * @return approved Address of the account approved to manage the token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual returns (address approved) {\\n        _requireMinted(tokenId);\\n\\n        approved = _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Used to approve or remove `operator` as an operator for the caller.\\n     * @dev Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @dev Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     * @dev Emits an {ApprovalForAll} event.\\n     * @param operator Address of the operator being managed\\n     * @param approved A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @notice Used to check if the given address is allowed to manage the tokens of the specified address.\\n     * @param owner Address of the owner of the tokens\\n     * @param operator Address being checked for approval\\n     * @return isApproved A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)\\n     *  or not (`false`)\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual returns (bool isApproved) {\\n        isApproved = _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @notice Transfers a given token from `from` to `to`.\\n     * @dev Requirements:\\n     *\\n     *  - `from` cannot be the zero address.\\n     *  - `to` cannot be the zero address.\\n     *  - `tokenId` token must be owned by `from`.\\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * @dev Emits a {Transfer} event.\\n     * @param from Address from which to transfer the token from\\n     * @param to Address to which to transfer the token to\\n     * @param tokenId ID of the token to transfer\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual onlyApprovedOrOwner(tokenId) {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to safely transfer a given token token from `from` to `to`.\\n     * @dev Requirements:\\n     *\\n     *  - `from` cannot be the zero address.\\n     *  - `to` cannot be the zero address.\\n     *  - `tokenId` token must exist and be owned by `from`.\\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     * @dev Emits a {Transfer} event.\\n     * @param from Address to transfer the tokens from\\n     * @param to Address to transfer the tokens to\\n     * @param tokenId ID of the token to transfer\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Used to safely transfer a given token token from `from` to `to`.\\n     * @dev Requirements:\\n     *\\n     *  - `from` cannot be the zero address.\\n     *  - `to` cannot be the zero address.\\n     *  - `tokenId` token must exist and be owned by `from`.\\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     * @dev Emits a {Transfer} event.\\n     * @param from Address to transfer the tokens from\\n     * @param to Address to transfer the tokens to\\n     * @param tokenId ID of the token to transfer\\n     * @param data Additional data without a specified format to be sent along with the token transaction\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual onlyApprovedOrOwner(tokenId) {\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware\\n     *  of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @dev `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     * @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative\\n     *  mechanisms to perform token transfer, such as signature-based.\\n     * @dev Requirements:\\n     *\\n     *  - `from` cannot be the zero address.\\n     *  - `to` cannot be the zero address.\\n     *  - `tokenId` token must exist and be owned by `from`.\\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     * @dev Emits a {Transfer} event.\\n     * @param from Address from which to send the token from\\n     * @param to Address to which to send the token to\\n     * @param tokenId ID of the token to be sent\\n     * @param data Additional data to send with the tokens\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721TransferToNonReceiverImplementer();\\n    }\\n\\n    /**\\n     * @notice Used to check whether the given token exists.\\n     * @dev Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     * @dev Tokens start existing when they are minted (`_mint`) and stop existing when they are burned (`_burn`).\\n     * @param tokenId ID of the token being checked\\n     * @return exists A boolean value signifying whether the token exists\\n     */\\n    function _exists(\\n        uint256 tokenId\\n    ) internal view virtual returns (bool exists) {\\n        exists = _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @notice Used to check whether the given account is allowed to manage the given token.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must exist.\\n     * @param spender Address that is being checked for approval\\n     * @param tokenId ID of the token being checked\\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @notice Used to safely mint the token to the specified address while passing the additional data to contract\\n     *  recipients.\\n     * @param to Address to which to mint the token.\\n     * @param tokenId ID of the token to mint\\n     * @param data Additional data to send with the tokens\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721TransferToNonReceiverImplementer();\\n    }\\n\\n    /**\\n     * @notice Used to mint a specified token to a given address.\\n     * @dev WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must not exist.\\n     *  - `to` cannot be the zero address.\\n     * @dev Emits a {Transfer} event.\\n     * @param to Address to mint the token to\\n     * @param tokenId ID of the token to mint\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721MintToTheZeroAddress();\\n        if (_exists(tokenId)) revert ERC721TokenAlreadyMinted();\\n        if (tokenId == uint256(0)) revert RMRKIdZeroForbidden();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to destroy the specified token.\\n     * @dev The approval is cleared when the token is burned.\\n     * @dev Requirements:\\n     *\\n     *  - `tokenId` must exist.\\n     * @dev Emits a {Transfer} event.\\n     * @param tokenId ID of the token to burn\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        _approveForAssets(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to transfer the specified token from one user to another.\\n     * @dev As opposed to {transferFrom}, this imposes no restrictions on `msg.sender`.\\n     * @dev Requirements:\\n     *\\n     *  - `to` cannot be the zero address.\\n     *  - `tokenId` token must be owned by `from`.\\n     * @dev Emits a {Transfer} event.\\n     * @param from Address from which to transfer the token\\n     * @param to Address to which to transfer the token\\n     * @param tokenId ID of the token to transfer\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (ownerOf(tokenId) != from) revert ERC721TransferFromIncorrectOwner();\\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n        delete _tokenApprovalsForAssets[tokenId];\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to grant an approval to an address to manage the given token.\\n     * @dev Emits an {Approval} event.\\n     * @param to Address receiveing the approval\\n     * @param tokenId ID of the token that the approval is being granted for\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to manage an approval to an address to manage all of the tokens of the user.\\n     * @dev If the user attempts to grant the approval to themselves, the execution is reverted.\\n     * @dev Emits an {ApprovalForAll} event.\\n     * @param owner Address of the account for which the approval is being granted\\n     * @param operator Address receiving approval to manage all of the tokens of the `owner`\\n     * @param approved Boolean value signifying whether\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        if (owner == operator) revert ERC721ApproveToCaller();\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Used to verify thet the token has been minted.\\n     * @dev The token is considered minted if its owner is not the `0x0` address.\\n     * @dev This function doesn't output any feedback about the token existing, but it reverts if the token doesn't\\n     *  exist.\\n     * @param tokenId ID of the token being checked\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) revert ERC721InvalidTokenId();\\n    }\\n\\n    /**\\n     * @notice Used to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * @dev The call is not executed if the target address is not a contract.\\n     * @param from Address representing the previous owner of the given token\\n     * @param to Yarget address that will receive the tokens\\n     * @param tokenId ID of the token to be transferred\\n     * @param data Optional data to send along with the call\\n     * @return valid Boolean value signifying whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool valid) {\\n        if (to.code.length != 0) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                valid = retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == uint256(0)) {\\n                    revert ERC721TransferToNonReceiverImplementer();\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            valid = true;\\n        }\\n    }\\n\\n    // ------------------------------- ASSETS ------------------------------\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function acceptAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\\n        _acceptAsset(tokenId, index, assetId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function rejectAsset(\\n        uint256 tokenId,\\n        uint256 index,\\n        uint64 assetId\\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\\n        _rejectAsset(tokenId, index, assetId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function rejectAllAssets(\\n        uint256 tokenId,\\n        uint256 maxRejections\\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\\n        _rejectAllAssets(tokenId, maxRejections);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function setPriority(\\n        uint256 tokenId,\\n        uint64[] calldata priorities\\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\\n        _setPriority(tokenId, priorities);\\n    }\\n\\n    // ----------------------- APPROVALS FOR ASSETS ------------------------\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function approveForAssets(address to, uint256 tokenId) public virtual {\\n        address owner = ownerOf(tokenId);\\n        if (to == owner) revert RMRKApprovalForAssetsToCurrentOwner();\\n\\n        if (\\n            _msgSender() != owner &&\\n            !isApprovedForAllForAssets(owner, _msgSender())\\n        ) revert RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\\n        _approveForAssets(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Used to grant an approval to an address to manage assets of a given token.\\n     * @dev Emits ***ApprovalForAssets*** event.\\n     * @param to Address of the account to grant the approval to\\n     * @param tokenId ID of the token for which the approval is being given\\n     */\\n    function _approveForAssets(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovalsForAssets[tokenId] = to;\\n        emit ApprovalForAssets(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5773\\n     */\\n    function getApprovedForAssets(\\n        uint256 tokenId\\n    ) public view virtual returns (address approved) {\\n        _requireMinted(tokenId);\\n        approved = _tokenApprovalsForAssets[tokenId];\\n    }\\n\\n    /**\\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\\n     * @dev Calling conditions:\\n     *\\n     *  - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`.\\n     *  - When `from` is zero, `tokenId` will be minted to `to`.\\n     *  - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     *  - `from` and `to` are never zero at the same time.\\n     *\\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     * @param from Address from which the token is being transferred\\n     * @param to Address to which the token is being transferred\\n     * @param tokenId ID of the token being transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice Hook that is called after any transfer of tokens. This includes minting and burning.\\n     * @dev Calling conditions:\\n     *\\n     *  - When `from` and `to` are both non-zero.\\n     *  - `from` and `to` are never zero at the same time.\\n     *\\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     * @param from Address from which the token has been transferred\\n     * @param to Address to which the token has been transferred\\n     * @param tokenId ID of the token that has been transferred\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53c07ce815aee7663feb0103fcc95ad278d3e36cfa0ae7c15bf18cb4eb82bc98\",\"license\":\"MIT\"},\"contracts/RMRKSoulbound.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.21;\\n\\nimport {IERC6454} from \\\"./IERC6454.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./RMRKErrors.sol\\\";\\n\\n/**\\n * @title RMRKSoulbound\\n * @author RMRK team\\n * @notice Smart contract of the RMRK Soulbound module.\\n */\\nabstract contract RMRKSoulbound is IERC6454 {\\n    /**\\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\\n     * @dev This is a hook ensuring that all transfers of tokens are reverted if the token is soulbound.\\n     * @dev The only exception of transfers being allowed is when the tokens are minted or when they are being burned.\\n     * @param from Address from which the token is originating (current owner of the token)\\n     * @param to Address to which the token would be sent\\n     * @param tokenId ID of the token that would be transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (!isTransferable(tokenId, from, to))\\n            revert RMRKCannotTransferSoulbound();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC6454\\n     */\\n    function isTransferable(\\n        uint256,\\n        address from,\\n        address to\\n    ) public view virtual returns (bool isTransferable_) {\\n        isTransferable_ = ((from == address(0) || // Exclude minting\\n            to == address(0)) && from != to); // Exclude Burning // Besides the obvious transfer to self, if both are address 0 (general transferability check), it returns false\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual returns (bool) {\\n        return interfaceId == type(IERC6454).interfaceId;\\n    }\\n}\",\"keccak256\":\"0xe09e69783740a15fdf9b99c872b923f1f62638f7caae450487ceef3f5b35c384\",\"license\":\"Apache-2.0\"},\"contracts/RMRKSoulboundPerToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC6454} from \\\"./IERC6454.sol\\\";\\nimport {RMRKSoulbound} from \\\"./RMRKSoulbound.sol\\\";\\n\\n/**\\n * @title RMRKSoulboundPerToken\\n * @author RMRK team\\n * @notice Smart contract of the RMRK Soulbound module where the transfers are permitted or prohibited\\u00a0on a per-token basis.\\n */\\nabstract contract RMRKSoulboundPerToken is RMRKSoulbound {\\n    /**\\n     * @notice Emitted when a token's soulbound state changes.\\n     * @param tokenId ID of the token\\n     * @param state A boolean value signifying whether the token became soulbound (`true`) or transferrable (`false`)\\n     */\\n    event Soulbound(uint256 indexed tokenId, bool state);\\n\\n    // Mapping of token ID to soulbound state\\n    mapping(uint256 => bool) private _isSoulbound;\\n\\n    /**\\n     * @notice Sets the soulbound state of a token.\\n     * @dev Custom access control has to be implemented when exposing this method in a smart contract that utillizes it.\\n     * @param tokenId ID of the token\\n     * @param state New soulbound state\\n     */\\n    function _setSoulbound(uint256 tokenId, bool state) internal virtual {\\n        _isSoulbound[tokenId] = state;\\n        emit Soulbound(tokenId, state);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC6454\\n     */\\n    function isTransferable(\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) public view virtual override returns (bool isTransferable_) {\\n        isTransferable_ = (from == address(0) || // Exclude minting\\n            to == address(0) || // Exclude Burning\\n            !_isSoulbound[tokenId]);\\n    }\\n}\",\"keccak256\":\"0x865c00b90f55b9f8acd2d57aaab886018c6c1c7f5a72bd4b4b6ecaa2a537b769\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80637280281e11610104578063b88d4fde116100a2578063e7de4de411610071578063e7de4de41461047a578063e985e9c51461048d578063fc3517c8146104c9578063ffa1ad74146104dc57600080fd5b8063b88d4fde1461040a578063de8e602c1461041d578063df6f556b14610430578063e467a48f1461046757600080fd5b806391a6262f116100de57806391a6262f146103b75780639f181b5e146103ca578063a22cb465146103ef578063aa6ca8081461040257600080fd5b80637280281e1461037c5780638507dc281461038f5780638d4f3bf5146103a257600080fd5b806345349e8c1161017c5780635ea72f361161014b5780635ea72f36146103225780635f257f29146103355780636352211e1461034857806370a082311461035b57600080fd5b806345349e8c146102bc57806351532e5a146102cf5780635e2e3292146102ef5780635e94354a1461030f57600080fd5b806322e6d160116101b857806322e6d1601461024757806322f6da9c1461028357806323b872dd1461029657806342842e0e146102a957600080fd5b806301ffc9a7146101df578063081812fc14610207578063095ea7b314610232575b600080fd5b6101f26101ed366004611e9c565b6104fd565b60405190151581526020015b60405180910390f35b61021a610215366004611ec0565b61051a565b6040516001600160a01b0390911681526020016101fe565b610245610240366004611ef0565b610541565b005b6101f2610255366004611f1a565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b610245610291366004611f64565b6105cd565b6102456102a4366004611f99565b6105e8565b6102456102b7366004611f99565b6105fd565b6102456102ca366004612080565b610618565b6102e26102dd366004611ec0565b610735565b6040516101fe91906120cd565b6103026102fd36600461211a565b6107c9565b6040516101fe9190612183565b6102e261031d366004611ec0565b6108b8565b610245610330366004611ef0565b610921565b6102456103433660046121a6565b6109a8565b61021a610356366004611ec0565b610a2e565b61036e6103693660046121ea565b610a69565b6040519081526020016101fe565b6102e261038a366004611ec0565b610aae565b61024561039d366004612205565b610b17565b60405163524d524b60e01b81526020016101fe565b6101f26103c536600461222f565b610bac565b600d546001600160401b03165b6040516001600160401b0390911681526020016101fe565b6102456103fd366004612205565b610bed565b6102e2610bfc565b610245610418366004612262565b610cd6565b61024561042b3660046122dd565b610cf3565b6103d761043e36600461211a565b60009182526001602090815260408084206001600160401b039384168552909152909120541690565b61021a610475366004611ec0565b610d08565b61024561048836600461235b565b610d2f565b6101f261049b366004611f1a565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205460ff1690565b6102456104d7366004611f64565b610d43565b604080518082019091526005815264191719971960d91b6020820152610302565b60006391a6262f60e01b6001600160e01b03198316145b92915050565b600061052582610d58565b506000908152600960205260409020546001600160a01b031690565b600061054c82610a2e565b9050806001600160a01b0316836001600160a01b03160361058057604051630591db6d60e01b815260040160405180910390fd5b336001600160a01b038216148015906105a0575061059e813361049b565b155b156105be57604051634c12315960e11b815260040160405180910390fd5b6105c88383610d90565b505050565b826105d781610dfe565b6105e2848484610e25565b50505050565b806105f281610e94565b6105e2848484610ebb565b6105c883838360405180602001604052806000815250610cd6565b600061062c836001600160401b0316610a2e565b90506001600160a01b038116331461068a5760405162461bcd60e51b815260206004820152601960248201527f6f6e6c79206f776e65722063616e206164642061737365747300000000000000604482015260640160405180910390fd5b600d546106a790600160401b90046001600160401b03168361100a565b600d546106c8906001600160401b0380861691600160401b900416806110d0565b600e54600d546106eb916001600160401b0380871692600160401b9004166112c6565b600d8054600160401b90046001600160401b031690600861070b83612393565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156107bd57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161077a5790505b50505050509050919050565b60008281526005602090815260408083206001600160401b038516845290915290205460609060ff1661080f57604051631b9928fd60e31b815260040160405180910390fd5b6001600160401b03821660009081526020819052604090208054610832906123b9565b80601f016020809104026020016040519081016040528092919081815260200182805461085e906123b9565b80156108ab5780601f10610880576101008083540402835291602001916108ab565b820191906000526020600020905b81548152906001019060200180831161088e57829003601f168201915b5050505050905092915050565b6000818152600460209081526040918290208054835181840281018401909452808452606093928301828280156107bd57600091825260209182902080546001600160401b0316845290820283019290916008910180841161077a575094979650505050505050565b600061092c82610a2e565b9050806001600160a01b0316836001600160a01b031603610960576040516375f45abd60e01b815260040160405180910390fd5b336001600160a01b03821614801590610980575061097e8133610255565b155b1561099e576040516357a2e94960e11b815260040160405180910390fd5b6105c88383611508565b600d546109bf9033906001600160401b0316611576565b600d546109d5906001600160401b031683610618565b600d546109ec906001600160401b03168215611684565b600d80546001600160401b0316906000610a0583612393565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505050565b6000818152600760205260409020546001600160a01b031680610a645760405163089ba7e160e41b815260040160405180910390fd5b919050565b60006001600160a01b038216610a9257604051633bb9143360e11b815260040160405180910390fd5b506001600160a01b031660009081526008602052604090205490565b6000818152600260209081526040918290208054835181840281018401909452808452606093928301828280156107bd57600091825260209182902080546001600160401b0316845290820283019290916008910180841161077a575094979650505050505050565b6001600160a01b0382163303610b40576040516375f45abd60e01b815260040160405180910390fd5b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f0cff4fcf777050010027190b8061fd8bfd1de16d81b1f94e9752df1427a26235910160405180910390a35050565b60006001600160a01b0383161580610bcb57506001600160a01b038216155b80610be557506000848152600c602052604090205460ff16155b949350505050565b610bf83383836116db565b5050565b600d54606090600090610c1a906001906001600160401b03166123ed565b6001600160401b03166001600160401b03811115610c3a57610c3a611fd5565b604051908082528060200260200182016040528015610c63578160200160208202803683370190505b50905060015b600d546001600160401b039081169082161015610cd0578082610c8d6001836123ed565b6001600160401b031681518110610ca657610ca6612414565b6001600160401b039092166020928302919091019091015280610cc881612393565b915050610c69565b50919050565b81610ce081610e94565b610cec8585858561177a565b5050505050565b82610cfd81610dfe565b6105e28484846117ae565b6000610d1382610d58565b506000908152600b60205260409020546001600160a01b031690565b81610d3981610dfe565b6105c88383611828565b82610d4d81610dfe565b6105e28484846112c6565b6000818152600760205260409020546001600160a01b0316610d8d5760405163089ba7e160e41b815260040160405180910390fd5b50565b600081815260096020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610dc582610a2e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610e083382611925565b610d8d57604051635d64832960e01b815260040160405180910390fd5b610e308383836119a3565b610e3b838383611a4b565b60008381526005602090815260408083206001600160401b0385168085529252808320805460ff1916905551909185917f1010837a46db9510cad56c9b63e97183557a136e9d4ddbec309ce52c99afb1249190a3505050565b610e9e3382611a99565b610d8d576040516302728a9d60e41b815260040160405180910390fd5b826001600160a01b0316610ece82610a2e565b6001600160a01b031614610ef55760405163e146af6f60e01b815260040160405180910390fd5b6001600160a01b038216610f1c576040516338f646ff60e21b815260040160405180910390fd5b610f27838383611b05565b600081815260096020908152604080832080546001600160a01b0319908116909155600b8352818420805490911690556001600160a01b038616835260089091528120805460019290610f7b90849061242a565b90915550506001600160a01b0382166000908152600860205260408120805460019290610fa990849061243d565b909155505060008181526007602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160401b038216611031576040516312c33ce360e01b815260040160405180910390fd5b6001600160401b03821660009081526020819052604081208054611054906123b9565b90501115611075576040516308fe3c3160e41b815260040160405180910390fd5b6001600160401b03821660009081526020819052604090206110978282612496565b506040516001600160401b038316907f3cd061096eaf881067d936308fbd8b81d060c45ab2ec910c02b953162befc10990600090a25050565b60008381526005602090815260408083206001600160401b038616845290915290205460ff1615611114576040516308fe3c3160e41b815260040160405180910390fd5b6001600160401b03821660009081526020819052604081208054611137906123b9565b90500361115757604051632aa5eff960e11b815260040160405180910390fd5b6000838152600360205260409020546080116111865760405163bade3a7b60e01b815260040160405180910390fd5b60008381526005602090815260408083206001600160401b03808716808652918452828520805460ff1916600190811790915588865260038086529386208054918201815586529390942060048404018054600894909316939093026101000a908102908402199091161790558116156112345760008381526001602090815260408083206001600160401b0386811685529252909120805467ffffffffffffffff19169183169190911790555b60408051600180825281830190925260009160208083019080368337019050509050838160008151811061126a5761126a612414565b602002602001018181525050816001600160401b0316836001600160401b03167f4a85a0221f784dbe75db7c29c422f474c15bde9211a98e50a30018fa8dfa937b836040516112b99190612555565b60405180910390a36105e2565b6112d18383836119a3565b60008381526001602090815260408083206001600160401b038086168552925282205416908082156113a9576113a3836002600089815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561139057602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161134d5790505b5050505050611b2d90919063ffffffff16565b90925090505b801561142a5760008681526002602052604090208054859190849081106113d2576113d2612414565b600091825260208083206004830401805460039093166008026101000a6001600160401b038181021990941695841602949094179093558882526005835260408083209187168352925220805460ff191690556114b3565b60008681526004602081815260408084206002835290842080548254600180820185559387528487208682040180546003928316600890810261010090810a6001600160401b038181021990941696841602959095179092558454958601855593885294872095840490950180549390951690930290920a808302199091169188160217905592505b6114be868686611a4b565b826001600160401b0316846001600160401b0316877f3f2709a99f6c06b4e57bbb38eb0134332f96f51a3da314f41a515adbb28b17cc60405160405180910390a45b505050505050565b6000818152600b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153d82610a2e565b6001600160a01b03167fb90cc0d925ac3511ab6af2d7ca73ffcf7ec4bd871fff36b958ecf440079c463e60405160405180910390a45050565b6001600160a01b03821661159d576040516325bd6bd360e01b815260040160405180910390fd5b6000818152600760205260409020546001600160a01b0316156115d35760405163c5a8d37160e01b815260040160405180910390fd5b806115f1576040516312c33ce360e01b815260040160405180910390fd5b6115fd60008383611b05565b6001600160a01b038216600090815260086020526040812080546001929061162690849061243d565b909155505060008181526007602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600c6020908152604091829020805460ff1916841515908117909155915191825283917fe0abe9435049152fa612635eac4022235b6f5c156ecf799bdac41b11b9fa2211910160405180910390a25050565b816001600160a01b0316836001600160a01b03160361170d57604051630b7b99b960e21b815260040160405180910390fd5b6001600160a01b038381166000818152600a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611785848484610ebb565b61179184848484611b96565b6105e25760405163bcb5663760e01b815260040160405180910390fd5b600083815260026020526040902054819081146117de57604051633581be1d60e11b815260040160405180910390fd5b60008481526004602052604090206117f7908484611d8f565b5060405184907ff0bfd70b0068f973d58178846ca67112671ec45e060838f7de5662036bcf801790600090a26105e2565b6000828152600360205260409020548181111561185857604051635134ce8960e01b815260040160405180910390fd5b60005b818110156118db57600084815260036020526040812080548390811061188357611883612414565b600091825260208083206004830401548884526001808352604080862060039095166008026101000a9092046001600160401b0316855292909152909120805467ffffffffffffffff1916905591909101905061185b565b5060008381526003602052604081206118f391611e50565b60405160009084907f1010837a46db9510cad56c9b63e97183557a136e9d4ddbec309ce52c99afb124908390a3505050565b60008061193183610a2e565b9050806001600160a01b0316846001600160a01b0316148061197857506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610be55750836001600160a01b031661199184610d08565b6001600160a01b031614949350505050565b60008381526003602052604090205482106119d157604051630757d52160e01b815260040160405180910390fd5b60008381526003602052604090208054839081106119f1576119f1612414565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b03166001600160401b0316816001600160401b0316146105c8576040516378eeeecf60e01b815260040160405180910390fd5b6000838152600360205260409020611a639083611c95565b60009283526001602090815260408085206001600160401b039093168552919052909120805467ffffffffffffffff1916905550565b600080611aa583610a2e565b9050806001600160a01b0316846001600160a01b03161480611aec57506001600160a01b038082166000908152600a602090815260408083209388168352929052205460ff165b80610be55750836001600160a01b03166119918461051a565b611b10818484610bac565b6105c85760405163792fac8360e11b815260040160405180910390fd5b81516000908190815b81811015611b8557846001600160401b0316868281518110611b5a57611b5a612414565b60200260200101516001600160401b031603611b7d57925060019150611b8f9050565b600101611b36565b5060008092509250505b9250929050565b60006001600160a01b0384163b15611c8a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611bda90339089908890889060040161258d565b6020604051808303816000875af1925050508015611c15575060408051601f3d908101601f19168201909252611c12918101906125c9565b60015b611c70573d808015611c43576040519150601f19603f3d011682016040523d82523d6000602084013e611c48565b606091505b508051611c685760405163bcb5663760e01b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610be5565b506001949350505050565b81548110611cb657604051634e23d03560e01b815260040160405180910390fd5b81548290611cc69060019061242a565b81548110611cd657611cd6612414565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316828281548110611d1157611d11612414565b90600052602060002090600491828204019190066008026101000a8154816001600160401b0302191690836001600160401b0316021790555081805480611d5a57611d5a6125e6565b60008281526020902060046000199092019182040180546001600160401b03600860038516026101000a021916905590555050565b82805482825590600052602060002090600301600490048101928215611e405791602002820160005b83821115611e0b5783356001600160401b031683826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302611db8565b8015611e3e5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302611e0b565b505b50611e4c929150611e71565b5090565b508054600082556003016004900490600052602060002090810190610d8d91905b5b80821115611e4c5760008155600101611e72565b6001600160e01b031981168114610d8d57600080fd5b600060208284031215611eae57600080fd5b8135611eb981611e86565b9392505050565b600060208284031215611ed257600080fd5b5035919050565b80356001600160a01b0381168114610a6457600080fd5b60008060408385031215611f0357600080fd5b611f0c83611ed9565b946020939093013593505050565b60008060408385031215611f2d57600080fd5b611f3683611ed9565b9150611f4460208401611ed9565b90509250929050565b80356001600160401b0381168114610a6457600080fd5b600080600060608486031215611f7957600080fd5b8335925060208401359150611f9060408501611f4d565b90509250925092565b600080600060608486031215611fae57600080fd5b611fb784611ed9565b9250611fc560208501611ed9565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561200557612005611fd5565b604051601f8501601f19908116603f0116810190828211818310171561202d5761202d611fd5565b8160405280935085815286868601111561204657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261207157600080fd5b611eb983833560208501611feb565b6000806040838503121561209357600080fd5b61209c83611f4d565b915060208301356001600160401b038111156120b757600080fd5b6120c385828601612060565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561210e5783516001600160401b0316835292840192918401916001016120e9565b50909695505050505050565b6000806040838503121561212d57600080fd5b82359150611f4460208401611f4d565b6000815180845260005b8181101561216357602081850181015186830182015201612147565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611eb9602083018461213d565b80358015158114610a6457600080fd5b600080604083850312156121b957600080fd5b82356001600160401b038111156121cf57600080fd5b6121db85828601612060565b925050611f4460208401612196565b6000602082840312156121fc57600080fd5b611eb982611ed9565b6000806040838503121561221857600080fd5b61222183611ed9565b9150611f4460208401612196565b60008060006060848603121561224457600080fd5b8335925061225460208501611ed9565b9150611f9060408501611ed9565b6000806000806080858703121561227857600080fd5b61228185611ed9565b935061228f60208601611ed9565b92506040850135915060608501356001600160401b038111156122b157600080fd5b8501601f810187136122c257600080fd5b6122d187823560208401611feb565b91505092959194509250565b6000806000604084860312156122f257600080fd5b8335925060208401356001600160401b038082111561231057600080fd5b818601915086601f83011261232457600080fd5b81358181111561233357600080fd5b8760208260051b850101111561234857600080fd5b6020830194508093505050509250925092565b6000806040838503121561236e57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038083168181036123af576123af61237d565b6001019392505050565b600181811c908216806123cd57607f821691505b602082108103610cd057634e487b7160e01b600052602260045260246000fd5b6001600160401b0382811682821603908082111561240d5761240d61237d565b5092915050565b634e487b7160e01b600052603260045260246000fd5b818103818111156105145761051461237d565b808201808211156105145761051461237d565b601f8211156105c857600081815260208120601f850160051c810160208610156124775750805b601f850160051c820191505b8181101561150057828155600101612483565b81516001600160401b038111156124af576124af611fd5565b6124c3816124bd84546123b9565b84612450565b602080601f8311600181146124f857600084156124e05750858301515b600019600386901b1c1916600185901b178555611500565b600085815260208120601f198616915b8281101561252757888601518255948401946001909101908401612508565b50858210156125455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252825182820181905260009190848201906040850190845b8181101561210e57835183529284019291840191600101612571565b60006001600160a01b038087168352808616602084015250836040830152608060608301526125bf608083018461213d565b9695505050505050565b6000602082840312156125db57600080fd5b8151611eb981611e86565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204139b68e12487df53a553fd195f2faef860157fc90a739dea013e1ce4af9dd3d64736f6c63430008150033",
  "devdoc": {
    "errors": {
      "RMRKIdZeroForbidden()": [
        {
          "details": "The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ApprovalForAllForAssets(address,address,bool)": {
        "params": {
          "approved": "Boolean value signifying whether the permission has been granted (`true`) or revoked (`false`)",
          "operator": "Address of the account that has been granted the approval to manage the token's assets on all of  the tokens",
          "owner": "Address of the account that has granted the approval for all assets on all of their tokens"
        }
      },
      "ApprovalForAssets(address,address,uint256)": {
        "details": "Approvals must be cleared on transfer",
        "params": {
          "approved": "Address of the account that has been granted approval to manage the token's assets",
          "owner": "Address of the account that has granted the approval for all token's assets",
          "tokenId": "ID of the token on which the approval was granted"
        }
      },
      "AssetAccepted(uint256,uint64,uint64)": {
        "params": {
          "assetId": "ID of the asset that was accepted",
          "replacesId": "ID of the asset that was replaced",
          "tokenId": "ID of the token that had a new asset accepted"
        }
      },
      "AssetAddedToTokens(uint256[],uint64,uint64)": {
        "params": {
          "assetId": "ID of the asset that has been added to the token's pending assets array",
          "replacesId": "ID of the asset that would be replaced",
          "tokenIds": "An array of token IDs that received a new pending asset"
        }
      },
      "AssetPrioritySet(uint256)": {
        "params": {
          "tokenId": "ID of the token that had the asset priority array updated"
        }
      },
      "AssetRejected(uint256,uint64)": {
        "params": {
          "assetId": "ID of the asset that was rejected",
          "tokenId": "ID of the token that had an asset rejected"
        }
      },
      "AssetSet(uint64)": {
        "params": {
          "assetId": "ID of the asset that was initialized"
        }
      },
      "Soulbound(uint256,bool)": {
        "params": {
          "state": "A boolean value signifying whether the token became soulbound (`true`) or transferrable (`false`)",
          "tokenId": "ID of the token"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "RMRK_INTERFACE()": {
        "returns": {
          "rmrkInterface": "Interface identifier for implementations of the @rmrk-team/evm-contracts package"
        }
      },
      "VERSION()": {
        "returns": {
          "version": "Version identifier for implementations of the @rmrk-team/evm-contracts package"
        }
      },
      "acceptAsset(uint256,uint256,uint64)": {
        "details": "Migrates the asset from the token's pending asset array to the token's active asset array.Active assets cannot be removed by anyone, but can be replaced by a new asset.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits an {AssetAccepted} event.",
        "params": {
          "assetId": "ID of the asset expected to be in the index",
          "index": "Index of the asset in the pending array to accept",
          "tokenId": "ID of the token for which to accept the pending asset"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account.The approval is cleared when the token is transferred.Only a single account can be approved at a time, so approving the zero address clears previous approvals.Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist.Emits an {Approval} event.",
        "params": {
          "to": "Address receiving the approval",
          "tokenId": "ID of the token for which the approval is being granted"
        }
      },
      "approveForAssets(address,uint256)": {
        "details": "This differs from transfer approvals, as approvals are not cleared when the approved party accepts or  rejects an asset, or sets asset priorities. This approval is cleared on token transfer.Only a single account can be approved at a time, so approving the `0x0` address clears previous approvals.Requirements:  - The caller must own the token or be an approved operator.  - `tokenId` must exist.Emits an {ApprovalForAssets} event.",
        "params": {
          "to": "Address of the account to grant the approval to",
          "tokenId": "ID of the token for which the approval to manage the assets is granted"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "Address of the account being checked"
        },
        "returns": {
          "balance": "The balance of the given account"
        }
      },
      "getActiveAssetPriorities(uint256)": {
        "details": "Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset  priorites.",
        "params": {
          "tokenId": "ID of the token for which to retrieve the priorities of the active assets"
        },
        "returns": {
          "priorities": "An array of priorities of the active assets of the given token"
        }
      },
      "getActiveAssets(uint256)": {
        "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.You can safely get 10k",
        "params": {
          "tokenId": "ID of the token to retrieve the IDs of the active assets"
        },
        "returns": {
          "assetIds": "An array of active asset IDs of the given token"
        }
      },
      "getApproved(uint256)": {
        "details": "Requirements:  - `tokenId` must exist.",
        "params": {
          "tokenId": "ID of the token to check for approval"
        },
        "returns": {
          "approved": "Address of the account approved to manage the token"
        }
      },
      "getApprovedForAssets(uint256)": {
        "details": "Requirements:  - `tokenId` must exist.",
        "params": {
          "tokenId": "ID of the token for which to retrieve the approved address"
        },
        "returns": {
          "approved": "Address of the account that is approved to manage the specified token's assets"
        }
      },
      "getAssetMetadata(uint256,uint64)": {
        "details": "Assets are stored by reference mapping `_assets[assetId]`.Can be overriden to implement enumerate, fallback or other custom logic.",
        "params": {
          "assetId": "Asset Id, must be in the active assets array",
          "tokenId": "ID of the token from which to retrieve the asset metadata"
        },
        "returns": {
          "metadata": "The metadata of the asset belonging to the specified index in the token's active assets  array"
        }
      },
      "getAssetReplacements(uint256,uint64)": {
        "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.",
        "params": {
          "newAssetId": "ID of the pending asset which will be accepted",
          "tokenId": "ID of the token to check"
        },
        "returns": {
          "replacesAssetId": "ID of the asset which will be replaced"
        }
      },
      "getPendingAssets(uint256)": {
        "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.",
        "params": {
          "tokenId": "ID of the token to retrieve the IDs of the pending assets"
        },
        "returns": {
          "assetIds": "An array of pending asset IDs of the given token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "Address being checked for approval",
          "owner": "Address of the owner of the tokens"
        },
        "returns": {
          "isApproved": "A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)  or not (`false`)"
        }
      },
      "isApprovedForAllForAssets(address,address)": {
        "details": "See {setApprovalForAllForAssets}.",
        "params": {
          "operator": "Address of the account that we are checking whether it has the operator role or not",
          "owner": "Address of the account that we are checking for whether it has granted the operator role"
        },
        "returns": {
          "isApproved": "A boolean value indicating whether the account we are checking has been granted the operator role"
        }
      },
      "isTransferable(uint256,address,address)": {
        "details": "If this function returns `false`, the transfer of the token MUST revert execution.If the tokenId does not exist, this method MUST revert execution, unless the token is being checked for  minting.",
        "params": {
          "from": "Address from which the token is being transferred",
          "to": "Address to which the token is being transferred",
          "tokenId": "ID of the token being checked"
        },
        "returns": {
          "isTransferable_": "Boolean value indicating whether the given token is transferable"
        }
      },
      "ownerOf(uint256)": {
        "details": "Requirements:  - `tokenId` must exist.",
        "params": {
          "tokenId": "ID of the token for which to retrieve the token for"
        },
        "returns": {
          "owner": "Address of the account owning the token"
        }
      },
      "rejectAllAssets(uint256,uint256)": {
        "details": "Effecitvely deletes the pending array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.Emits a {AssetRejected} event with assetId = 0.",
        "params": {
          "maxRejections": "Maximum number of expected assets to reject, used to prevent from rejecting assets which  arrive just before this operation.",
          "tokenId": "ID of the token of which to clear the pending array."
        }
      },
      "rejectAsset(uint256,uint256,uint64)": {
        "details": "Removes the asset from the token's pending asset array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits a {AssetRejected} event.",
        "params": {
          "assetId": "ID of the asset expected to be in the index",
          "index": "Index of the asset in the pending array to be rejected",
          "tokenId": "ID of the token that the asset is being rejected from"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
        "params": {
          "from": "Address to transfer the tokens from",
          "to": "Address to transfer the tokens to",
          "tokenId": "ID of the token to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
        "params": {
          "data": "Additional data without a specified format to be sent along with the token transaction",
          "from": "Address to transfer the tokens from",
          "to": "Address to transfer the tokens to",
          "tokenId": "ID of the token to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.Requirements: - The `operator` cannot be the caller.Emits an {ApprovalForAll} event.",
        "params": {
          "approved": "A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)",
          "operator": "Address of the operator being managed"
        }
      },
      "setApprovalForAllForAssets(address,bool)": {
        "details": "Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token  owned by the caller.Requirements:  - The `operator` cannot be the caller.Emits an {ApprovalForAllForAssets} event.",
        "params": {
          "approved": "The boolean value indicating whether the operator role is being granted (`true`) or revoked  (`false`)",
          "operator": "Address of the account to which the operator role is granted or revoked from"
        }
      },
      "setPriority(uint256,uint64[])": {
        "details": "The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest  priority.Value `0` of a priority is a special case equivalent to unitialized.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - The length of `priorities` must be equal the length of the active assets array.Emits a {AssetPrioritySet} event.",
        "params": {
          "priorities": "An array of priorities of active assets. The succesion of items in the priorities array  matches that of the succesion of items in the active array",
          "tokenId": "ID of the token to set the priorities for"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.Emits a {Transfer} event.",
        "params": {
          "from": "Address from which to transfer the token from",
          "to": "Address to which to transfer the token to",
          "tokenId": "ID of the token to transfer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC721AddressZeroIsNotaValidOwner()": [
        {
          "notice": "Attempting to grant the token to 0x0 address"
        }
      ],
      "ERC721ApprovalToCurrentOwner()": [
        {
          "notice": "Attempting to grant approval to the current owner of the token"
        }
      ],
      "ERC721ApproveCallerIsNotOwnerNorApprovedForAll()": [
        {
          "notice": "Attempting to grant approval when not being owner or approved for all should not be permitted"
        }
      ],
      "ERC721ApproveToCaller()": [
        {
          "notice": "Attempting to grant approval to self"
        }
      ],
      "ERC721InvalidTokenId()": [
        {
          "notice": "Attempting to use an invalid token ID"
        }
      ],
      "ERC721MintToTheZeroAddress()": [
        {
          "notice": "Attempting to mint to 0x0 address"
        }
      ],
      "ERC721NotApprovedOrOwner()": [
        {
          "notice": "Attempting to manage a token without being its owner or approved by the owner"
        }
      ],
      "ERC721TokenAlreadyMinted()": [
        {
          "notice": "Attempting to mint an already minted token"
        }
      ],
      "ERC721TransferFromIncorrectOwner()": [
        {
          "notice": "Attempting to transfer the token from an address that is not the owner"
        }
      ],
      "ERC721TransferToNonReceiverImplementer()": [
        {
          "notice": "Attempting to safe transfer to an address that is unable to receive the token"
        }
      ],
      "ERC721TransferToTheZeroAddress()": [
        {
          "notice": "Attempting to transfer the token to a 0x0 address"
        }
      ],
      "RMRKApprovalForAssetsToCurrentOwner()": [
        {
          "notice": "Attempting to grant approval of assets to their current owner"
        }
      ],
      "RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll()": [
        {
          "notice": "Attempting to grant approval of assets without being the caller or approved for all"
        }
      ],
      "RMRKAssetAlreadyExists()": [
        {
          "notice": "Attempting to add an asset using an ID that has already been used"
        }
      ],
      "RMRKBadPriorityListLength()": [
        {
          "notice": "Attempting to set the priorities with an array of length that doesn't match the length of active assets array"
        }
      ],
      "RMRKCannotTransferSoulbound()": [
        {
          "notice": "Attempting to transfer a soulbound (non-transferrable) token"
        }
      ],
      "RMRKIdZeroForbidden()": [
        {
          "notice": "Attempting to use ID 0, which is not supported"
        }
      ],
      "RMRKIndexOutOfRange()": [
        {
          "notice": "Attempting to interact with an asset, using index greater than number of assets"
        }
      ],
      "RMRKMaxPendingAssetsReached()": [
        {
          "notice": "Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is  128)"
        }
      ],
      "RMRKNoAssetMatchingId()": [
        {
          "notice": "Attempting to interact with an asset that can not be found"
        }
      ],
      "RMRKNotApprovedForAssetsOrOwner()": [
        {
          "notice": "Attempting to manage an asset without owning it or having been granted permission by the owner to do so"
        }
      ],
      "RMRKTokenDoesNotHaveAsset()": [
        {
          "notice": "Attempting to compose a NFT of a token without active assets"
        }
      ],
      "RMRKUnexpectedAssetId()": [
        {
          "notice": "Attempting to accept or reject an asset which does not match the one at the specified index"
        }
      ],
      "RMRKUnexpectedNumberOfAssets()": [
        {
          "notice": "Attempting to reject all pending assets but more assets than expected are pending"
        }
      ]
    },
    "events": {
      "ApprovalForAllForAssets(address,address,bool)": {
        "notice": "Used to notify listeners that owner has granted approval to the user to manage assets of all of their  tokens."
      },
      "ApprovalForAssets(address,address,uint256)": {
        "notice": "Used to notify listeners that owner has granted an approval to the user to manage the assets of a  given token."
      },
      "AssetAccepted(uint256,uint64,uint64)": {
        "notice": "Used to notify listeners that an asset object at `assetId` is accepted by the token and migrated  from token's pending assets array to active assets array of the token."
      },
      "AssetAddedToTokens(uint256[],uint64,uint64)": {
        "notice": "Used to notify listeners that an asset object at `assetId` is added to token's pending asset  array."
      },
      "AssetPrioritySet(uint256)": {
        "notice": "Used to notify listeners that token's prioritiy array is reordered."
      },
      "AssetRejected(uint256,uint64)": {
        "notice": "Used to notify listeners that an asset object at `assetId` is rejected from token and is dropped  from the pending assets array of the token."
      },
      "AssetSet(uint64)": {
        "notice": "Used to notify listeners that an asset object is initialized at `assetId`."
      },
      "Soulbound(uint256,bool)": {
        "notice": "Emitted when a token's soulbound state changes."
      }
    },
    "kind": "user",
    "methods": {
      "RMRK_INTERFACE()": {
        "notice": "Interface identifier of the @rmrk-team/evm-contracts package"
      },
      "VERSION()": {
        "notice": "Version of the @rmrk-team/evm-contracts package"
      },
      "acceptAsset(uint256,uint256,uint64)": {
        "notice": "Accepts an asset at from the pending array of given token."
      },
      "approve(address,uint256)": {
        "notice": "Used to grant a one-time approval to manage one's token."
      },
      "approveForAssets(address,uint256)": {
        "notice": "Used to grant permission to the user to manage token's assets."
      },
      "balanceOf(address)": {
        "notice": "Used to retrieve the number of tokens in ``owner``'s account."
      },
      "getActiveAssetPriorities(uint256)": {
        "notice": "Used to retrieve the priorities of the active resoources of a given token."
      },
      "getActiveAssets(uint256)": {
        "notice": "Used to retrieve IDs of the active assets of given token."
      },
      "getApproved(uint256)": {
        "notice": "Used to retrieve the account approved to manage given token."
      },
      "getApprovedForAssets(uint256)": {
        "notice": "Used to retrieve the address of the account approved to manage assets of a given token."
      },
      "getAssetMetadata(uint256,uint64)": {
        "notice": "Used to fetch the asset metadata of the specified token's active asset with the given index."
      },
      "getAssetReplacements(uint256,uint64)": {
        "notice": "Used to retrieve the asset that will be replaced if a given asset from the token's pending array  is accepted."
      },
      "getPendingAssets(uint256)": {
        "notice": "Used to retrieve IDs of the pending assets of given token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Used to check if the given address is allowed to manage the tokens of the specified address."
      },
      "isApprovedForAllForAssets(address,address)": {
        "notice": "Used to check whether the address has been granted the operator role by a given address or not."
      },
      "isTransferable(uint256,address,address)": {
        "notice": "Used to check whether the given token is transferable or not."
      },
      "ownerOf(uint256)": {
        "notice": "Used to retrieve the owner of the given token."
      },
      "rejectAllAssets(uint256,uint256)": {
        "notice": "Rejects all assets from the pending array of a given token."
      },
      "rejectAsset(uint256,uint256,uint64)": {
        "notice": "Rejects an asset from the pending array of given token."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Used to safely transfer a given token token from `from` to `to`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Used to safely transfer a given token token from `from` to `to`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Used to approve or remove `operator` as an operator for the caller."
      },
      "setApprovalForAllForAssets(address,bool)": {
        "notice": "Used to add or remove an operator of assets for the caller."
      },
      "setPriority(uint256,uint64[])": {
        "notice": "Sets a new priority array for a given token."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers a given token from `from` to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2299,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_assets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint64,t_string_storage)"
      },
      {
        "astId": 2306,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_assetReplacements",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint64,t_uint64))"
      },
      {
        "astId": 2312,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_activeAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 2318,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_pendingAssets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 2324,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_activeAssetPriorities",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 2331,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_tokenAssets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint64,t_bool))"
      },
      {
        "astId": 2338,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_operatorApprovalsForAssets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7573,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_owners",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7577,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7581,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7587,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7591,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_tokenApprovalsForAssets",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10959,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "_isSoulbound",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5502,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "tokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 5505,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "assetId",
        "offset": 8,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 5508,
        "contract": "contracts/MultiAsset.sol:MultiAsset",
        "label": "index",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint64,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint64 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_uint64)"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint64,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}