{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/AbstractMultiAsset.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport {IERC5773} from \"./IERC5773.sol\";\nimport {RMRKLib} from \"./RMRKLib.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title AbstractMultiAsset\n * @author RMRK team\n * @notice Abstract Smart contract implementing most of the common logic for contracts implementing IERC5773\n */\nabstract contract AbstractMultiAsset is Context, IERC5773 {\n    using RMRKLib for uint64[];\n\n    /// Mapping of uint64 Ids to asset metadata\n    mapping(uint64 => string) internal _assets;\n\n    /// Mapping of tokenId to new asset, to asset to be replaced\n    mapping(uint256 => mapping(uint64 => uint64)) internal _assetReplacements;\n\n    /// Mapping of tokenId to an array of active assets\n    /// @dev Active recurses is unbounded, getting all would reach gas limit at around 30k items\n    /// so we leave this as internal in case a custom implementation needs to implement pagination\n    mapping(uint256 => uint64[]) internal _activeAssets;\n\n    /// Mapping of tokenId to an array of pending assets\n    mapping(uint256 => uint64[]) internal _pendingAssets;\n\n    /// Mapping of tokenId to an array of priorities for active assets\n    mapping(uint256 => uint64[]) internal _activeAssetPriorities;\n\n    /// Mapping of tokenId to assetId to whether the token has this asset assigned\n    mapping(uint256 => mapping(uint64 => bool)) internal _tokenAssets;\n\n    /// Mapping from owner to operator approvals for assets\n    mapping(address => mapping(address => bool))\n        private _operatorApprovalsForAssets;\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getAssetMetadata(\n        uint256 tokenId,\n        uint64 assetId\n    ) public view virtual returns (string memory metadata) {\n        if (!_tokenAssets[tokenId][assetId]) revert RMRKTokenDoesNotHaveAsset();\n        metadata = _assets[assetId];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getActiveAssets(\n        uint256 tokenId\n    ) public view virtual returns (uint64[] memory assetIds) {\n        assetIds = _activeAssets[tokenId];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getPendingAssets(\n        uint256 tokenId\n    ) public view virtual returns (uint64[] memory assetIds) {\n        assetIds = _pendingAssets[tokenId];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getActiveAssetPriorities(\n        uint256 tokenId\n    ) public view virtual returns (uint64[] memory priorities) {\n        priorities = _activeAssetPriorities[tokenId];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getAssetReplacements(\n        uint256 tokenId,\n        uint64 newAssetId\n    ) public view virtual returns (uint64 replacesAssetId) {\n        replacesAssetId = _assetReplacements[tokenId][newAssetId];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function isApprovedForAllForAssets(\n        address owner,\n        address operator\n    ) public view virtual returns (bool isApproved) {\n        isApproved = _operatorApprovalsForAssets[owner][operator];\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function setApprovalForAllForAssets(\n        address operator,\n        bool approved\n    ) public virtual {\n        if (_msgSender() == operator)\n            revert RMRKApprovalForAssetsToCurrentOwner();\n\n        _operatorApprovalsForAssets[_msgSender()][operator] = approved;\n        emit ApprovalForAllForAssets(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @notice Used to accept a pending asset.\n     * @dev The call is reverted if there is no pending asset at a given index.\n     * @dev Emits ***AssetAccepted*** event.\n     * @param tokenId ID of the token for which to accept the pending asset\n     * @param index Index of the asset in the pending array to accept\n     * @param assetId ID of the asset to accept in token's pending array\n     */\n    function _acceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {\n        _validatePendingAssetAtIndex(tokenId, index, assetId);\n        _beforeAcceptAsset(tokenId, index, assetId);\n\n        uint64 replacesId = _assetReplacements[tokenId][assetId];\n        uint256 replaceIndex;\n        bool replacefound;\n        if (replacesId != uint64(0))\n            (replaceIndex, replacefound) = _activeAssets[tokenId].indexOf(\n                replacesId\n            );\n\n        if (replacefound) {\n            // We don't want to remove and then push a new asset.\n            // This way we also keep the priority of the original asset\n            _activeAssets[tokenId][replaceIndex] = assetId;\n            delete _tokenAssets[tokenId][replacesId];\n        } else {\n            // We use the current size as next priority, by default priorities would be [0,1,2...]\n            _activeAssetPriorities[tokenId].push(\n                uint64(_activeAssets[tokenId].length)\n            );\n            _activeAssets[tokenId].push(assetId);\n            replacesId = uint64(0);\n        }\n        _removePendingAsset(tokenId, index, assetId);\n\n        emit AssetAccepted(tokenId, assetId, replacesId);\n        _afterAcceptAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @notice Used to reject the specified asset from the pending array.\n     * @dev The call is reverted if there is no pending asset at a given index.\n     * @dev Emits ***AssetRejected*** event.\n     * @param tokenId ID of the token that the asset is being rejected from\n     * @param index Index of the asset in the pending array to be rejected\n     * @param assetId ID of the asset expected to be in the index\n     */\n    function _rejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {\n        _validatePendingAssetAtIndex(tokenId, index, assetId);\n        _beforeRejectAsset(tokenId, index, assetId);\n\n        _removePendingAsset(tokenId, index, assetId);\n        delete _tokenAssets[tokenId][assetId];\n\n        emit AssetRejected(tokenId, assetId);\n        _afterRejectAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @notice Used to validate the index on the pending assets array\n     * @dev The call is reverted if the index is out of range or the asset Id is not present at the index.\n     * @param tokenId ID of the token that the asset is validated from\n     * @param index Index of the asset in the pending array\n     * @param assetId Id of the asset expected to be in the index\n     */\n    function _validatePendingAssetAtIndex(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) private view {\n        if (index >= _pendingAssets[tokenId].length)\n            revert RMRKIndexOutOfRange();\n        if (assetId != _pendingAssets[tokenId][index])\n            revert RMRKUnexpectedAssetId();\n    }\n\n    /**\n     * @notice Used to remove the asset at the index on the pending assets array\n     * @param tokenId ID of the token that the asset is being removed from\n     * @param index Index of the asset in the pending array\n     * @param assetId Id of the asset expected to be in the index\n     */\n    function _removePendingAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) private {\n        _pendingAssets[tokenId].removeItemByIndex(index);\n        delete _assetReplacements[tokenId][assetId];\n    }\n\n    /**\n     * @notice Used to reject all of the pending assets for the given token.\n     * @dev When rejecting all assets, the pending array is indiscriminately cleared.\n     * @dev If the number of pending assets is greater than the value of `maxRejections`, the exectuion will be\n     *  reverted.\n     * @dev Emits ***AssetRejected*** event.\n     * @param tokenId ID of the token to reject all of the pending assets.\n     * @param maxRejections Maximum number of expected assets to reject, used to prevent from\n     *  rejecting assets which arrive just before this operation.\n     */\n    function _rejectAllAssets(\n        uint256 tokenId,\n        uint256 maxRejections\n    ) internal virtual {\n        uint256 len = _pendingAssets[tokenId].length;\n        if (len > maxRejections) revert RMRKUnexpectedNumberOfAssets();\n\n        _beforeRejectAllAssets(tokenId);\n\n        for (uint256 i; i < len; ) {\n            uint64 assetId = _pendingAssets[tokenId][i];\n            delete _assetReplacements[tokenId][assetId];\n            unchecked {\n                ++i;\n            }\n        }\n        delete (_pendingAssets[tokenId]);\n\n        emit AssetRejected(tokenId, uint64(0));\n        _afterRejectAllAssets(tokenId);\n    }\n\n    /**\n     * @notice Used to specify the priorities for a given token's active assets.\n     * @dev If the length of the priorities array doesn't match the length of the active assets array, the execution\n     *  will be reverted.\n     * @dev The position of the priority value in the array corresponds the position of the asset in the active\n     *  assets array it will be applied to.\n     * @dev Emits ***AssetPrioritySet*** event.\n     * @param tokenId ID of the token for which the priorities are being set\n     * @param priorities Array of priorities for the assets\n     */\n    function _setPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) internal virtual {\n        uint256 length = priorities.length;\n        if (length != _activeAssets[tokenId].length)\n            revert RMRKBadPriorityListLength();\n\n        _beforeSetPriority(tokenId, priorities);\n        _activeAssetPriorities[tokenId] = priorities;\n\n        emit AssetPrioritySet(tokenId);\n        _afterSetPriority(tokenId, priorities);\n    }\n\n    /**\n     * @notice Used to add an asset entry.\n     * @dev If the specified ID is already used by another asset, the execution will be reverted.\n     * @dev This internal function warrants custom access control to be implemented when used.\n     * @dev Emits ***AssetSet*** event.\n     * @param id ID of the asset to assign to the new asset\n     * @param metadataURI Metadata URI of the asset\n     */\n    function _addAssetEntry(\n        uint64 id,\n        string memory metadataURI\n    ) internal virtual {\n        if (id == uint64(0)) revert RMRKIdZeroForbidden();\n        if (bytes(_assets[id]).length > 0) revert RMRKAssetAlreadyExists();\n\n        _beforeAddAsset(id, metadataURI);\n        _assets[id] = metadataURI;\n\n        emit AssetSet(id);\n        _afterAddAsset(id, metadataURI);\n    }\n\n    /**\n     * @notice Used to add an asset to a token.\n     * @dev If the given asset is already added to the token, the execution will be reverted.\n     * @dev If the asset ID is invalid, the execution will be reverted.\n     * @dev If the token already has the maximum amount of pending assets (128), the execution will be\n     *  reverted.\n     * @dev Emits ***AssetAddedToTokens*** event.\n     * @param tokenId ID of the token to add the asset to\n     * @param assetId ID of the asset to add to the token\n     * @param replacesAssetWithId ID of the asset to replace from the token's list of active assets\n     */\n    function _addAssetToToken(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 replacesAssetWithId\n    ) internal virtual {\n        if (_tokenAssets[tokenId][assetId]) revert RMRKAssetAlreadyExists();\n\n        if (bytes(_assets[assetId]).length == uint256(0))\n            revert RMRKNoAssetMatchingId();\n\n        if (_pendingAssets[tokenId].length >= 128)\n            revert RMRKMaxPendingAssetsReached();\n\n        _beforeAddAssetToToken(tokenId, assetId, replacesAssetWithId);\n        _tokenAssets[tokenId][assetId] = true;\n        _pendingAssets[tokenId].push(assetId);\n\n        if (replacesAssetWithId != uint64(0)) {\n            _assetReplacements[tokenId][assetId] = replacesAssetWithId;\n        }\n\n        uint256[] memory tokenIds = new uint256[](1);\n        tokenIds[0] = tokenId;\n        emit AssetAddedToTokens(tokenIds, assetId, replacesAssetWithId);\n        _afterAddAssetToToken(tokenId, assetId, replacesAssetWithId);\n    }\n\n    /**\n     * @notice Hook that is called before an asset is added.\n     * @param id ID of the asset\n     * @param metadataURI Metadata URI of the asset\n     */\n    function _beforeAddAsset(\n        uint64 id,\n        string memory metadataURI\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after an asset is added.\n     * @param id ID of the asset\n     * @param metadataURI Metadata URI of the asset\n     */\n    function _afterAddAsset(\n        uint64 id,\n        string memory metadataURI\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before adding an asset to a token's pending assets array.\n     * @dev If the asset doesn't intend to replace another asset, the `replacesAssetWithId` value should be `0`.\n     * @param tokenId ID of the token to which the asset is being added\n     * @param assetId ID of the asset that is being added\n     * @param replacesAssetWithId ID of the asset that this asset is attempting to replace\n     */\n    function _beforeAddAssetToToken(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 replacesAssetWithId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after an asset has been added to a token's pending assets array.\n     * @dev If the asset doesn't intend to replace another asset, the `replacesAssetWithId` value should be `0`.\n     * @param tokenId ID of the token to which the asset is has been added\n     * @param assetId ID of the asset that is has been added\n     * @param replacesAssetWithId ID of the asset that this asset is attempting to replace\n     */\n    function _afterAddAssetToToken(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 replacesAssetWithId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before an asset is accepted to a token's active assets array.\n     * @param tokenId ID of the token for which the asset is being accepted\n     * @param index Index of the asset in the token's pending assets array\n     * @param assetId ID of the asset expected to be located at the specified `index`\n     */\n    function _beforeAcceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after an asset is accepted to a token's active assets array.\n     * @param tokenId ID of the token for which the asset has been accepted\n     * @param index Index of the asset in the token's pending assets array\n     * @param assetId ID of the asset expected to have been located at the specified `index`\n     */\n    function _afterAcceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before rejecting an asset.\n     * @param tokenId ID of the token from which the asset is being rejected\n     * @param index Index of the asset in the token's pending assets array\n     * @param assetId ID of the asset expected to be located at the specified `index`\n     */\n    function _beforeRejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after rejecting an asset.\n     * @param tokenId ID of the token from which the asset has been rejected\n     * @param index Index of the asset in the token's pending assets array\n     * @param assetId ID of the asset expected to have been located at the specified `index`\n     */\n    function _afterRejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before rejecting all assets of a token.\n     * @param tokenId ID of the token from which all of the assets are being rejected\n     */\n    function _beforeRejectAllAssets(uint256 tokenId) internal virtual {}\n\n    /**\n     * @notice Hook that is called after rejecting all assets of a token.\n     * @param tokenId ID of the token from which all of the assets have been rejected\n     */\n    function _afterRejectAllAssets(uint256 tokenId) internal virtual {}\n\n    /**\n     * @notice Hook that is called before the priorities for token's assets is set.\n     * @param tokenId ID of the token for which the asset priorities are being set\n     * @param priorities[] An array of priorities for token's active resources\n     */\n    function _beforeSetPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after the priorities for token's assets is set.\n     * @param tokenId ID of the token for which the asset priorities have been set\n     * @param priorities[] An array of priorities for token's active resources\n     */\n    function _afterSetPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) internal virtual {}\n}"
    },
    "contracts/BlendNft.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BlendNft is Ownable, ERC721URIStorage {\n    using Counters for Counters.Counter;\n    using Strings for uint256;\n    Counters.Counter public _tokenIds;\n\n    event NFTMinted(address indexed owner, uint256 indexed tokenId);\n\n    mapping(address => uint) _mintCount;\n\n    string _uri =\n        \"https://gateway.pinata.cloud/ipfs/QmUDnBmE9nUZAVPpA95nvwXczT7hTvmdD2AiwbQumSYjwB\"; //4Body7Background1.png\n\n    constructor() ERC721(\"Avalanche Blend\", \"FACE\") {}\n\n    function mint(string memory ipfsUri) public {\n        _uri = ipfsUri;\n\n        _tokenIds.increment();\n        uint256 newItemId = _tokenIds.current();\n        _mintCount[_msgSender()] += 1;\n        _safeMint(_msgSender(), newItemId);\n        _setTokenURI(newItemId, _uri);\n        emit NFTMinted(_msgSender(), newItemId);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC721) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/EmotableRepository.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.21;\n\nimport \"./IERC7409.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nerror BulkParametersOfUnequalLength();\nerror ExpiredPresignedEmote();\nerror InvalidSignature();\n\ncontract EmoteRepository is IERC7409 {\n    bytes32 public immutable DOMAIN_SEPARATOR =\n        keccak256(\n            abi.encode(\n                \"ERC-7409: Public Non-Fungible Token Emote Repository\",\n                \"1\",\n                block.chainid,\n                address(this)\n            )\n        );\n\n    // Used to avoid double emoting and control undoing\n    mapping(address emoter => mapping(address collection => mapping(uint256 tokenId => mapping(string emoji => uint256 state))))\n        private _emotesUsedByEmoter; // Cheaper than using a bool\n    mapping(address collection => mapping(uint256 tokenId => mapping(string emoji => uint256 count)))\n        private _emotesPerToken;\n\n    function emoteCountOf(\n        address collection,\n        uint256 tokenId,\n        string memory emoji\n    ) public view returns (uint256) {\n        return _emotesPerToken[collection][tokenId][emoji];\n    }\n\n    function bulkEmoteCountOf(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis\n    ) public view returns (uint256[] memory) {\n        if (\n            collections.length != tokenIds.length ||\n            collections.length != emojis.length\n        ) {\n            revert BulkParametersOfUnequalLength();\n        }\n\n        uint256[] memory counts = new uint256[](collections.length);\n        for (uint256 i; i < collections.length; ) {\n            counts[i] = _emotesPerToken[collections[i]][tokenIds[i]][emojis[i]];\n            unchecked {\n                ++i;\n            }\n        }\n        return counts;\n    }\n\n    function hasEmoterUsedEmote(\n        address emoter,\n        address collection,\n        uint256 tokenId,\n        string memory emoji\n    ) public view returns (bool) {\n        return _emotesUsedByEmoter[emoter][collection][tokenId][emoji] == 1;\n    }\n\n    function haveEmotersUsedEmotes(\n        address[] memory emoters,\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis\n    ) public view returns (bool[] memory) {\n        if (\n            emoters.length != collections.length ||\n            emoters.length != tokenIds.length ||\n            emoters.length != emojis.length\n        ) {\n            revert BulkParametersOfUnequalLength();\n        }\n\n        bool[] memory states = new bool[](collections.length);\n        for (uint256 i; i < collections.length; ) {\n            states[i] =\n                _emotesUsedByEmoter[emoters[i]][collections[i]][tokenIds[i]][\n                    emojis[i]\n                ] ==\n                1;\n            unchecked {\n                ++i;\n            }\n        }\n        return states;\n    }\n\n    function emote(\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state\n    ) public {\n        bool currentVal = _emotesUsedByEmoter[msg.sender][collection][tokenId][\n            emoji\n        ] == 1;\n        if (currentVal != state) {\n            if (state) {\n                _emotesPerToken[collection][tokenId][emoji] += 1;\n            } else {\n                _emotesPerToken[collection][tokenId][emoji] -= 1;\n            }\n            _emotesUsedByEmoter[msg.sender][collection][tokenId][emoji] = state\n                ? 1\n                : 0;\n            emit Emoted(msg.sender, collection, tokenId, emoji, state);\n        }\n    }\n\n    function bulkEmote(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states\n    ) public {\n        if (\n            collections.length != tokenIds.length ||\n            collections.length != emojis.length ||\n            collections.length != states.length\n        ) {\n            revert BulkParametersOfUnequalLength();\n        }\n\n        bool currentVal;\n        for (uint256 i; i < collections.length; ) {\n            currentVal =\n                _emotesUsedByEmoter[msg.sender][collections[i]][tokenIds[i]][\n                    emojis[i]\n                ] ==\n                1;\n            if (currentVal != states[i]) {\n                if (states[i]) {\n                    _emotesPerToken[collections[i]][tokenIds[i]][\n                        emojis[i]\n                    ] += 1;\n                } else {\n                    _emotesPerToken[collections[i]][tokenIds[i]][\n                        emojis[i]\n                    ] -= 1;\n                }\n                _emotesUsedByEmoter[msg.sender][collections[i]][tokenIds[i]][\n                    emojis[i]\n                ] = states[i] ? 1 : 0;\n                emit Emoted(\n                    msg.sender,\n                    collections[i],\n                    tokenIds[i],\n                    emojis[i],\n                    states[i]\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function prepareMessageToPresignEmote(\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state,\n        uint256 deadline\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    DOMAIN_SEPARATOR,\n                    collection,\n                    tokenId,\n                    emoji,\n                    state,\n                    deadline\n                )\n            );\n    }\n\n    function bulkPrepareMessagesToPresignEmote(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states,\n        uint256[] memory deadlines\n    ) public view returns (bytes32[] memory) {\n        if (\n            collections.length != tokenIds.length ||\n            collections.length != emojis.length ||\n            collections.length != states.length ||\n            collections.length != deadlines.length\n        ) {\n            revert BulkParametersOfUnequalLength();\n        }\n\n        bytes32[] memory messages = new bytes32[](collections.length);\n        for (uint256 i; i < collections.length; ) {\n            messages[i] = keccak256(\n                abi.encode(\n                    DOMAIN_SEPARATOR,\n                    collections[i],\n                    tokenIds[i],\n                    emojis[i],\n                    states[i],\n                    deadlines[i]\n                )\n            );\n            unchecked {\n                ++i;\n            }\n        }\n\n        return messages;\n    }\n\n    function presignedEmote(\n        address emoter,\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        if (block.timestamp > deadline) {\n            revert ExpiredPresignedEmote();\n        }\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(\n                    abi.encode(\n                        DOMAIN_SEPARATOR,\n                        collection,\n                        tokenId,\n                        emoji,\n                        state,\n                        deadline\n                    )\n                )\n            )\n        );\n        address signer = ecrecover(digest, v, r, s);\n        if (signer != emoter) {\n            revert InvalidSignature();\n        }\n\n        bool currentVal = _emotesUsedByEmoter[signer][collection][tokenId][\n            emoji\n        ] == 1;\n        if (currentVal != state) {\n            if (state) {\n                _emotesPerToken[collection][tokenId][emoji] += 1;\n            } else {\n                _emotesPerToken[collection][tokenId][emoji] -= 1;\n            }\n            _emotesUsedByEmoter[signer][collection][tokenId][emoji] = state\n                ? 1\n                : 0;\n            emit Emoted(signer, collection, tokenId, emoji, state);\n        }\n    }\n\n    function bulkPresignedEmote(\n        address[] memory emoters,\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states,\n        uint256[] memory deadlines,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) public {\n        if (\n            emoters.length != collections.length ||\n            emoters.length != tokenIds.length ||\n            emoters.length != emojis.length ||\n            emoters.length != states.length ||\n            emoters.length != deadlines.length ||\n            emoters.length != v.length ||\n            emoters.length != r.length ||\n            emoters.length != s.length\n        ) {\n            revert BulkParametersOfUnequalLength();\n        }\n\n        bytes32 digest;\n        address signer;\n        bool currentVal;\n        for (uint256 i; i < collections.length; ) {\n            if (block.timestamp > deadlines[i]) {\n                revert ExpiredPresignedEmote();\n            }\n            digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    keccak256(\n                        abi.encode(\n                            DOMAIN_SEPARATOR,\n                            collections[i],\n                            tokenIds[i],\n                            emojis[i],\n                            states[i],\n                            deadlines[i]\n                        )\n                    )\n                )\n            );\n            signer = ecrecover(digest, v[i], r[i], s[i]);\n            if (signer != emoters[i]) {\n                revert InvalidSignature();\n            }\n\n            currentVal =\n                _emotesUsedByEmoter[signer][collections[i]][tokenIds[i]][\n                    emojis[i]\n                ] ==\n                1;\n            if (currentVal != states[i]) {\n                if (states[i]) {\n                    _emotesPerToken[collections[i]][tokenIds[i]][\n                        emojis[i]\n                    ] += 1;\n                } else {\n                    _emotesPerToken[collections[i]][tokenIds[i]][\n                        emojis[i]\n                    ] -= 1;\n                }\n                _emotesUsedByEmoter[signer][collections[i]][tokenIds[i]][\n                    emojis[i]\n                ] = states[i] ? 1 : 0;\n                emit Emoted(\n                    signer,\n                    collections[i],\n                    tokenIds[i],\n                    emojis[i],\n                    states[i]\n                );\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual returns (bool) {\n        return\n            interfaceId == type(IERC7409).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "contracts/Equippable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./RMRKEquippable.sol\";\nimport \"./RMRKSoulboundPerToken.sol\";\nimport \"./RMRKCatalog.sol\";\n\ncontract Equippale is\n    RMRKEquippable,\n    RMRKSoulboundPerToken,\n    RMRKCatalog(\"google.com\", \"slot\")\n{\n    uint64 tokenId = 1;\n    uint64 childId = 1;\n    uint64 assetId = 1;\n    uint64 groupId = 1;\n    uint64 partId = 1;\n    uint64[] parentTokens;\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 token_id\n    ) internal virtual override(RMRKNestable, RMRKSoulbound) {\n        if (!isTransferable(token_id, from, to))\n            revert RMRKCannotTransferSoulbound();\n    }\n\n    function mint(\n        string memory metadataURI,\n        address[] memory equippables\n    ) public {\n        uint64[] memory partIds = new uint64[](3);\n        _mint(msg.sender, tokenId, \"0x64\");\n        uint64 length = partId + 3;\n        uint index = 0;\n        for (uint64 parts = partId; parts < length; parts++) {\n            addPart(equippables, metadataURI, parts);\n            partIds[index] = parts;\n            index++;\n            partId++;\n        }\n        _addAssetEntry(tokenId, groupId, address(this), metadataURI, partIds);\n        _addAssetToToken(tokenId, assetId, assetId);\n        _acceptAsset(tokenId, 0, assetId);\n        parentTokens.push(tokenId);\n        tokenId++;\n        assetId++;\n    }\n\n    function getParentTokens() public view returns (uint64[] memory) {\n        return parentTokens;\n    }\n\n    function mintChild(uint64 token_id, string memory metadataURI) public {\n        uint64[] memory part;\n        _mint(msg.sender, tokenId, \"0x64\");\n        _addAssetEntry(tokenId, groupId, address(this), metadataURI, part);\n        _addAssetToToken(tokenId, assetId, assetId);\n        _acceptAsset(tokenId, 0, assetId);\n        addChild(token_id, tokenId);\n        acceptChild(token_id, 0, address(this), tokenId);\n        tokenId++;\n        assetId++;\n    }\n\n    function addChild(uint64 token_id, uint64 child_id) internal {\n        IERC7401 destContract = IERC7401(address(this));\n        destContract.addChild(token_id, child_id, \"0x64\");\n    }\n\n    function addPart(\n        address[] memory equippables,\n        string memory metadataURI,\n        uint64 _partId\n    ) public {\n        Part memory partData = Part({\n            itemType: ItemType.Slot,\n            z: 2,\n            equippable: equippables,\n            metadataURI: metadataURI\n        });\n        IntakeStruct memory partIntake = IntakeStruct({\n            partId: partId,\n            part: partData\n        });\n        _addPart(partIntake);\n        _setEquippableToAll(_partId);\n    }\n\n    function equipToken(\n        uint64 equippableGroupId,\n        address parentAddress,\n        uint64 slotPartId,\n        IntakeEquip memory data\n    ) public {\n        setValidParentForEquippableGroup(\n            equippableGroupId,\n            parentAddress,\n            slotPartId\n        );\n        equip(data);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(RMRKEquippable, RMRKSoulbound, RMRKCatalog)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setValidParentForEquippableGroup(\n        uint64 equippableGroupId,\n        address parentAddress,\n        uint64 slotPartId\n    ) public {\n        _setValidParentForEquippableGroup(\n            equippableGroupId,\n            parentAddress,\n            slotPartId\n        );\n    }\n\n    function getTokenId() public view returns (uint64) {\n        return tokenId;\n    }\n}\n"
    },
    "contracts/IERC5773.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IERC5773\n * @author RMRK team\n * @notice Interface smart contract of the RMRK multi asset module.\n */\ninterface IERC5773 is IERC165 {\n    /**\n     * @notice Used to notify listeners that an asset object is initialized at `assetId`.\n     * @param assetId ID of the asset that was initialized\n     */\n    event AssetSet(uint64 indexed assetId);\n\n    /**\n     * @notice Used to notify listeners that an asset object at `assetId` is added to token's pending asset\n     *  array.\n     * @param tokenIds An array of token IDs that received a new pending asset\n     * @param assetId ID of the asset that has been added to the token's pending assets array\n     * @param replacesId ID of the asset that would be replaced\n     */\n    event AssetAddedToTokens(\n        uint256[] tokenIds,\n        uint64 indexed assetId,\n        uint64 indexed replacesId\n    );\n\n    /**\n     * @notice Used to notify listeners that an asset object at `assetId` is accepted by the token and migrated\n     *  from token's pending assets array to active assets array of the token.\n     * @param tokenId ID of the token that had a new asset accepted\n     * @param assetId ID of the asset that was accepted\n     * @param replacesId ID of the asset that was replaced\n     */\n    event AssetAccepted(\n        uint256 indexed tokenId,\n        uint64 indexed assetId,\n        uint64 indexed replacesId\n    );\n\n    /**\n     * @notice Used to notify listeners that an asset object at `assetId` is rejected from token and is dropped\n     *  from the pending assets array of the token.\n     * @param tokenId ID of the token that had an asset rejected\n     * @param assetId ID of the asset that was rejected\n     */\n    event AssetRejected(uint256 indexed tokenId, uint64 indexed assetId);\n\n    /**\n     * @notice Used to notify listeners that token's prioritiy array is reordered.\n     * @param tokenId ID of the token that had the asset priority array updated\n     */\n    event AssetPrioritySet(uint256 indexed tokenId);\n\n    /**\n     * @notice Used to notify listeners that owner has granted an approval to the user to manage the assets of a\n     *  given token.\n     * @dev Approvals must be cleared on transfer\n     * @param owner Address of the account that has granted the approval for all token's assets\n     * @param approved Address of the account that has been granted approval to manage the token's assets\n     * @param tokenId ID of the token on which the approval was granted\n     */\n    event ApprovalForAssets(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @notice Used to notify listeners that owner has granted approval to the user to manage assets of all of their\n     *  tokens.\n     * @param owner Address of the account that has granted the approval for all assets on all of their tokens\n     * @param operator Address of the account that has been granted the approval to manage the token's assets on all of\n     *  the tokens\n     * @param approved Boolean value signifying whether the permission has been granted (`true`) or revoked (`false`)\n     */\n    event ApprovalForAllForAssets(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @notice Accepts an asset at from the pending array of given token.\n     * @dev Migrates the asset from the token's pending asset array to the token's active asset array.\n     * @dev Active assets cannot be removed by anyone, but can be replaced by a new asset.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - `index` must be in range of the length of the pending asset array.\n     * @dev Emits an {AssetAccepted} event.\n     * @param tokenId ID of the token for which to accept the pending asset\n     * @param index Index of the asset in the pending array to accept\n     * @param assetId ID of the asset expected to be in the index\n     */\n    function acceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) external;\n\n    /**\n     * @notice Rejects an asset from the pending array of given token.\n     * @dev Removes the asset from the token's pending asset array.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - `index` must be in range of the length of the pending asset array.\n     * @dev Emits a {AssetRejected} event.\n     * @param tokenId ID of the token that the asset is being rejected from\n     * @param index Index of the asset in the pending array to be rejected\n     * @param assetId ID of the asset expected to be in the index\n     */\n    function rejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) external;\n\n    /**\n     * @notice Rejects all assets from the pending array of a given token.\n     * @dev Effecitvely deletes the pending array.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     * @dev Emits a {AssetRejected} event with assetId = 0.\n     * @param tokenId ID of the token of which to clear the pending array.\n     * @param maxRejections Maximum number of expected assets to reject, used to prevent from rejecting assets which\n     *  arrive just before this operation.\n     */\n    function rejectAllAssets(uint256 tokenId, uint256 maxRejections) external;\n\n    /**\n     * @notice Sets a new priority array for a given token.\n     * @dev The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest\n     *  priority.\n     * @dev Value `0` of a priority is a special case equivalent to unitialized.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - The length of `priorities` must be equal the length of the active assets array.\n     * @dev Emits a {AssetPrioritySet} event.\n     * @param tokenId ID of the token to set the priorities for\n     * @param priorities An array of priorities of active assets. The succesion of items in the priorities array\n     *  matches that of the succesion of items in the active array\n     */\n    function setPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) external;\n\n    /**\n     * @notice Used to retrieve IDs of the active assets of given token.\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\n     *  `getAssetMetadata(tokenId, assetId)`.\n     * @dev You can safely get 10k\n     * @param tokenId ID of the token to retrieve the IDs of the active assets\n     * @return assetIds An array of active asset IDs of the given token\n     */\n    function getActiveAssets(\n        uint256 tokenId\n    ) external view returns (uint64[] memory assetIds);\n\n    /**\n     * @notice Used to retrieve IDs of the pending assets of given token.\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\n     *  `getAssetMetadata(tokenId, assetId)`.\n     * @param tokenId ID of the token to retrieve the IDs of the pending assets\n     * @return assetIds An array of pending asset IDs of the given token\n     */\n    function getPendingAssets(\n        uint256 tokenId\n    ) external view returns (uint64[] memory assetIds);\n\n    /**\n     * @notice Used to retrieve the priorities of the active resoources of a given token.\n     * @dev Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset\n     *  priorites.\n     * @param tokenId ID of the token for which to retrieve the priorities of the active assets\n     * @return priorities An array of priorities of the active assets of the given token\n     */\n    function getActiveAssetPriorities(\n        uint256 tokenId\n    ) external view returns (uint64[] memory priorities);\n\n    /**\n     * @notice Used to retrieve the asset that will be replaced if a given asset from the token's pending array\n     *  is accepted.\n     * @dev Asset data is stored by reference, in order to access the data corresponding to the ID, call\n     *  `getAssetMetadata(tokenId, assetId)`.\n     * @param tokenId ID of the token to check\n     * @param newAssetId ID of the pending asset which will be accepted\n     * @return replacesAssetWithId ID of the asset which will be replaced\n     */\n    function getAssetReplacements(\n        uint256 tokenId,\n        uint64 newAssetId\n    ) external view returns (uint64 replacesAssetWithId);\n\n    /**\n     * @notice Used to fetch the asset metadata of the specified token's active asset with the given index.\n     * @dev Assets are stored by reference mapping `_assets[assetId]`.\n     * @dev Can be overriden to implement enumerate, fallback or other custom logic.\n     * @param tokenId ID of the token from which to retrieve the asset metadata\n     * @param assetId Asset Id, must be in the active assets array\n     * @return metadata The metadata of the asset belonging to the specified index in the token's active assets\n     *  array\n     */\n    function getAssetMetadata(\n        uint256 tokenId,\n        uint64 assetId\n    ) external view returns (string memory metadata);\n\n    // Approvals\n\n    /**\n     * @notice Used to grant permission to the user to manage token's assets.\n     * @dev This differs from transfer approvals, as approvals are not cleared when the approved party accepts or\n     *  rejects an asset, or sets asset priorities. This approval is cleared on token transfer.\n     * @dev Only a single account can be approved at a time, so approving the `0x0` address clears previous approvals.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be an approved operator.\n     *  - `tokenId` must exist.\n     * @dev Emits an {ApprovalForAssets} event.\n     * @param to Address of the account to grant the approval to\n     * @param tokenId ID of the token for which the approval to manage the assets is granted\n     */\n    function approveForAssets(address to, uint256 tokenId) external;\n\n    /**\n     * @notice Used to retrieve the address of the account approved to manage assets of a given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param tokenId ID of the token for which to retrieve the approved address\n     * @return approved Address of the account that is approved to manage the specified token's assets\n     */\n    function getApprovedForAssets(\n        uint256 tokenId\n    ) external view returns (address approved);\n\n    /**\n     * @notice Used to add or remove an operator of assets for the caller.\n     * @dev Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token\n     *  owned by the caller.\n     * @dev Requirements:\n     *\n     *  - The `operator` cannot be the caller.\n     * @dev Emits an {ApprovalForAllForAssets} event.\n     * @param operator Address of the account to which the operator role is granted or revoked from\n     * @param approved The boolean value indicating whether the operator role is being granted (`true`) or revoked\n     *  (`false`)\n     */\n    function setApprovalForAllForAssets(\n        address operator,\n        bool approved\n    ) external;\n\n    /**\n     * @notice Used to check whether the address has been granted the operator role by a given address or not.\n     * @dev See {setApprovalForAllForAssets}.\n     * @param owner Address of the account that we are checking for whether it has granted the operator role\n     * @param operator Address of the account that we are checking whether it has the operator role or not\n     * @return isApproved A boolean value indicating whether the account we are checking has been granted the operator role\n     */\n    function isApprovedForAllForAssets(\n        address owner,\n        address operator\n    ) external view returns (bool isApproved);\n}"
    },
    "contracts/IERC6220.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.21;\n\nimport {IERC5773} from \"./IERC5773.sol\";\n\n/**\n * @title IERC6220\n * @author RMRK team\n * @notice Interface smart contract of the RMRK equippable module.\n */\ninterface IERC6220 is IERC5773 {\n    /**\n     * @notice Used to store the core structure of the `Equippable` RMRK lego.\n     * @return assetId The ID of the asset equipping a child\n     * @return childAssetId The ID of the asset used as equipment\n     * @return childId The ID of token that is equipped\n     * @return childEquippableAddress Address of the collection to which the child asset belongs to\n     */\n    struct Equipment {\n        uint64 assetId;\n        uint64 childAssetId;\n        uint256 childId;\n        address childEquippableAddress;\n    }\n\n    /**\n     * @notice Used to provide a struct for inputing equip data.\n     * @dev Only used for input and not storage of data.\n     * @return tokenId ID of the token we are managing\n     * @return childIndex Index of a child in the list of token's active children\n     * @return assetId ID of the asset that we are equipping into\n     * @return slotPartId ID of the slot part that we are using to equip\n     * @return childAssetId ID of the asset that we are equipping\n     */\n    struct IntakeEquip {\n        uint256 tokenId;\n        uint256 childIndex;\n        uint64 assetId;\n        uint64 slotPartId;\n        uint64 childAssetId;\n    }\n\n    /**\n     * @notice Used to notify listeners that a child's asset has been equipped into one of its parent assets.\n     * @param tokenId ID of the token that had an asset equipped\n     * @param assetId ID of the asset associated with the token we are equipping into\n     * @param slotPartId ID of the slot we are using to equip\n     * @param childId ID of the child token we are equipping into the slot\n     * @param childAddress Address of the child token's collection\n     * @param childAssetId ID of the asset associated with the token we are equipping\n     */\n    event ChildAssetEquipped(\n        uint256 indexed tokenId,\n        uint64 indexed assetId,\n        uint64 indexed slotPartId,\n        uint256 childId,\n        address childAddress,\n        uint64 childAssetId\n    );\n\n    /**\n     * @notice Used to notify listeners that a child's asset has been unequipped from one of its parent assets.\n     * @param tokenId ID of the token that had an asset unequipped\n     * @param assetId ID of the asset associated with the token we are unequipping out of\n     * @param slotPartId ID of the slot we are unequipping from\n     * @param childId ID of the token being unequipped\n     * @param childAddress Address of the collection that a token that is being unequipped belongs to\n     * @param childAssetId ID of the asset associated with the token we are unequipping\n     */\n    event ChildAssetUnequipped(\n        uint256 indexed tokenId,\n        uint64 indexed assetId,\n        uint64 indexed slotPartId,\n        uint256 childId,\n        address childAddress,\n        uint64 childAssetId\n    );\n\n    /**\n     * @notice Used to notify listeners that the assets belonging to a `equippableGroupId` have been marked as\n     *  equippable into a given slot and parent\n     * @param equippableGroupId ID of the equippable group being marked as equippable into the slot associated with\n     *  `slotPartId` of the `parentAddress` collection\n     * @param slotPartId ID of the slot part of the catalog into which the parts belonging to the equippable group\n     *  associated with `equippableGroupId` can be equipped\n     * @param parentAddress Address of the collection into which the parts belonging to `equippableGroupId` can be\n     *  equipped\n     */\n    event ValidParentEquippableGroupIdSet(\n        uint64 indexed equippableGroupId,\n        uint64 indexed slotPartId,\n        address parentAddress\n    );\n\n    /**\n     * @notice Used to equip a child into a token.\n     * @dev The `IntakeEquip` stuct contains the following data:\n     *  [\n     *      tokenId,\n     *      childIndex,\n     *      assetId,\n     *      slotPartId,\n     *      childAssetId\n     *  ]\n     * @param data An `IntakeEquip` struct specifying the equip data\n     */\n    function equip(IntakeEquip memory data) external;\n\n    /**\n     * @notice Used to unequip child from parent token.\n     * @dev This can only be called by the owner of the token or by an account that has been granted permission to\n     *  manage the given token by the current owner.\n     * @param tokenId ID of the parent from which the child is being unequipped\n     * @param assetId ID of the parent's asset that contains the `Slot` into which the child is equipped\n     * @param slotPartId ID of the `Slot` from which to unequip the child\n     */\n    function unequip(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotPartId\n    ) external;\n\n    /**\n     * @notice Used to check whether the token has a given child equipped.\n     * @dev This is used to prevent from transferring a child that is equipped.\n     * @param tokenId ID of the parent token for which we are querying for\n     * @param childAddress Address of the child token's smart contract\n     * @param childId ID of the child token\n     * @return isEquipped A boolean value indicating whether the child token is equipped into the given token or not\n     */\n    function isChildEquipped(\n        uint256 tokenId,\n        address childAddress,\n        uint256 childId\n    ) external view returns (bool isEquipped);\n\n    /**\n     * @notice Used to verify whether a token can be equipped into a given parent's slot.\n     * @param parent Address of the parent token's smart contract\n     * @param tokenId ID of the token we want to equip\n     * @param assetId ID of the asset associated with the token we want to equip\n     * @param slotId ID of the slot that we want to equip the token into\n     * @return canBeEquipped A boolean indicating whether the token with the given asset can be equipped into the desired slot\n     */\n    function canTokenBeEquippedWithAssetIntoSlot(\n        address parent,\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotId\n    ) external view returns (bool canBeEquipped);\n\n    /**\n     * @notice Used to get the Equipment object equipped into the specified slot of the desired token.\n     * @dev The `Equipment` struct consists of the following data:\n     *  [\n     *      assetId,\n     *      childAssetId,\n     *      childId,\n     *      childEquippableAddress\n     *  ]\n     * @param tokenId ID of the token for which we are retrieving the equipped object\n     * @param targetCatalogAddress Address of the `Catalog` associated with the `Slot` part of the token\n     * @param slotPartId ID of the `Slot` part that we are checking for equipped objects\n     * @return equipment The `Equipment` struct containing data about the equipped object\n     */\n    function getEquipment(\n        uint256 tokenId,\n        address targetCatalogAddress,\n        uint64 slotPartId\n    ) external view returns (Equipment memory equipment);\n\n    /**\n     * @notice Used to get the asset and equippable data associated with given `assetId`.\n     * @param tokenId ID of the token for which to retrieve the asset\n     * @param assetId ID of the asset of which we are retrieving\n     * @return metadataURI The metadata URI of the asset\n     * @return equippableGroupId ID of the equippable group this asset belongs to\n     * @return catalogAddress The address of the catalog the part belongs to\n     * @return partIds An array of IDs of parts included in the asset\n     */\n    function getAssetAndEquippableData(\n        uint256 tokenId,\n        uint64 assetId\n    )\n        external\n        view\n        returns (\n            string memory metadataURI,\n            uint64 equippableGroupId,\n            address catalogAddress,\n            uint64[] memory partIds\n        );\n}\n"
    },
    "contracts/IERC6454.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IERC6454\n * @author RMRK team\n * @notice A minimal extension to identify the transferability of Non-Fungible Tokens.\n */\ninterface IERC6454 is IERC165 {\n    /**\n     * @notice Used to check whether the given token is transferable or not.\n     * @dev If this function returns `false`, the transfer of the token MUST revert execution.\n     * @dev If the tokenId does not exist, this method MUST revert execution, unless the token is being checked for\n     *  minting.\n     * @param tokenId ID of the token being checked\n     * @param from Address from which the token is being transferred\n     * @param to Address to which the token is being transferred\n     * @return isTransferable_ Boolean value indicating whether the given token is transferable\n     */\n    function isTransferable(\n        uint256 tokenId,\n        address from,\n        address to\n    ) external view returns (bool isTransferable_);\n}"
    },
    "contracts/IERC7401.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IERC7401\n * @author RMRK team\n * @notice Interface smart contract of the RMRK nestable module.\n */\ninterface IERC7401 is IERC165 {\n    /**\n     * @notice The core struct of RMRK ownership.\n     * @dev The `DirectOwner` struct is used to store information of the next immediate owner, be it the parent token or\n     *  the externally owned account.\n     * @dev If the token is owned by the externally owned account, the `tokenId` should equal `0`.\n     * @param tokenId ID of the parent token\n     * @param ownerAddress Address of the owner of the token. If the owner is another token, then the address should be\n     *  the one of the parent token's collection smart contract. If the owner is externally owned account, the address\n     *  should be the address of this account\n     * @param isNft A boolean value signifying whether the token is owned by another token (`true`) or by an externally\n     *  owned account (`false`)\n     */\n    struct DirectOwner {\n        uint256 tokenId;\n        address ownerAddress;\n    }\n\n    /**\n     * @notice Used to notify listeners that the token is being transferred.\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     * @param from Address of the previous immediate owner, which is a smart contract if the token was nested.\n     * @param to Address of the new immediate owner, which is a smart contract if the token is being nested.\n     * @param fromTokenId ID of the previous parent token. If the token was not nested before, the value should be `0`\n     * @param toTokenId ID of the new parent token. If the token is not being nested, the value should be `0`\n     * @param tokenId ID of the token being transferred\n     */\n    event NestTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 fromTokenId,\n        uint256 toTokenId,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @notice Used to notify listeners that a new token has been added to a given token's pending children array.\n     * @dev Emitted when a child NFT is added to a token's pending array.\n     * @param tokenId ID of the token that received a new pending child token\n     * @param childIndex Index of the proposed child token in the parent token's pending children array\n     * @param childAddress Address of the proposed child token's collection smart contract\n     * @param childId ID of the child token in the child token's collection smart contract\n     */\n    event ChildProposed(\n        uint256 indexed tokenId,\n        uint256 childIndex,\n        address indexed childAddress,\n        uint256 indexed childId\n    );\n\n    /**\n     * @notice Used to notify listeners that a new child token was accepted by the parent token.\n     * @dev Emitted when a parent token accepts a token from its pending array, migrating it to the active array.\n     * @param tokenId ID of the token that accepted a new child token\n     * @param childIndex Index of the newly accepted child token in the parent token's active children array\n     * @param childAddress Address of the child token's collection smart contract\n     * @param childId ID of the child token in the child token's collection smart contract\n     */\n    event ChildAccepted(\n        uint256 indexed tokenId,\n        uint256 childIndex,\n        address indexed childAddress,\n        uint256 indexed childId\n    );\n\n    /**\n     * @notice Used to notify listeners that all pending child tokens of a given token have been rejected.\n     * @dev Emitted when a token removes all a child tokens from its pending array.\n     * @param tokenId ID of the token that rejected all of the pending children\n     */\n    event AllChildrenRejected(uint256 indexed tokenId);\n\n    /**\n     * @notice Used to notify listeners a child token has been transferred from parent token.\n     * @dev Emitted when a token transfers a child from itself, transferring ownership to the root owner.\n     * @param tokenId ID of the token that transferred a child token\n     * @param childIndex Index of a child in the array from which it is being transferred\n     * @param childAddress Address of the child token's collection smart contract\n     * @param childId ID of the child token in the child token's collection smart contract\n     * @param fromPending A boolean value signifying whether the token was in the pending child tokens array (`true`) or\n     *  in the active child tokens array (`false`)\n     * @param toZero A boolean value signifying whether the token is being transferred to the `0x0` address (`true`) or\n     *  not (`false`)\n     */\n    event ChildTransferred(\n        uint256 indexed tokenId,\n        uint256 childIndex,\n        address indexed childAddress,\n        uint256 indexed childId,\n        bool fromPending,\n        bool toZero\n    );\n\n    /**\n     * @notice The core child token struct, holding the information about the child tokens.\n     * @return tokenId ID of the child token in the child token's collection smart contract\n     * @return contractAddress Address of the child token's smart contract\n     */\n    struct Child {\n        uint256 tokenId;\n        address contractAddress;\n    }\n\n    /**\n     * @notice Used to retrieve the *root* owner of a given token.\n     * @dev The *root* owner of the token is an externally owned account (EOA). If the given token is child of another\n     *  NFT, this will return an EOA address. Otherwise, if the token is owned by an EOA, this EOA will be returned.\n     * @param tokenId ID of the token for which the *root* owner has been retrieved\n     * @return owner_ The *root* owner of the token\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner_);\n\n    /**\n     * @notice Used to retrieve the immediate owner of the given token.\n     * @dev If the immediate owner is another token, the address returned, should be the one of the parent token's\n     *  collection smart contract.\n     * @param tokenId ID of the token for which the RMRK owner is being retrieved\n     * @return owner Address of the given token's owner\n     * @return parentId The ID of the parent token. Should be `0` if the owner is an externally owned account\n     * @return isNFT The boolean value signifying whether the owner is an NFT or not\n     */\n    function directOwnerOf(\n        uint256 tokenId\n    ) external view returns (address owner, uint256 parentId, bool isNFT);\n\n    /**\n     * @notice Used to burn a given token.\n     * @dev When a token is burned, all of its child tokens are recursively burned as well.\n     * @dev When specifying the maximum recursive burns, the execution will be reverted if there are more children to be\n     *  burned.\n     * @dev Setting the `maxRecursiveBurn` value to 0 will only attempt to burn the specified token and revert if there\n     *  are any child tokens present.\n     * @dev The approvals are cleared when the token is burned.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @dev Emits a {Transfer} event.\n     * @param tokenId ID of the token to burn\n     * @param maxRecursiveBurns Maximum number of tokens to recursively burn\n     * @return burnedChildren Number of recursively burned children\n     */\n    function burn(\n        uint256 tokenId,\n        uint256 maxRecursiveBurns\n    ) external returns (uint256 burnedChildren);\n\n    /**\n     * @notice Used to add a child token to a given parent token.\n     * @dev This adds the child token into the given parent token's pending child tokens array.\n     * @dev Requirements:\n     *\n     *  - `directOwnerOf` on the child contract must resolve to the called contract.\n     *  - the pending array of the parent contract must not be full.\n     * @param parentId ID of the parent token to receive the new child token\n     * @param childId ID of the new proposed child token\n     * @param data Additional data with no specified format\n     */\n    function addChild(\n        uint256 parentId,\n        uint256 childId,\n        bytes memory data\n    ) external;\n\n    /**\n     * @notice Used to accept a pending child token for a given parent token.\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\n     *  array.\n     * @param parentId ID of the parent token for which the child token is being accepted\n     * @param childIndex Index of a child tokem in the given parent's pending children array\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\n     *  specified index of the given parent token's pending children array\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\n     *  pending children array\n     */\n    function acceptChild(\n        uint256 parentId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId\n    ) external;\n\n    /**\n     * @notice Used to reject all pending children of a given parent token.\n     * @dev Removes the children from the pending array mapping.\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\n     *  rootOwner of the previous parent.\n     * @dev Requirements:\n     *\n     * Requirements:\n     *\n     * - `parentId` must exist\n     * @param parentId ID of the parent token for which to reject all of the pending tokens.\n     * @param maxRejections Maximum number of expected children to reject, used to prevent from rejecting children which\n     *  arrive just before this operation.\n     */\n    function rejectAllChildren(\n        uint256 parentId,\n        uint256 maxRejections\n    ) external;\n\n    /**\n     * @notice Used to transfer a child token from a given parent token.\n     * @dev When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of\n     *  `to` being the `0x0` address.\n     * @param tokenId ID of the parent token from which the child token is being transferred\n     * @param to Address to which to transfer the token to\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\n     *  pending array)\n     * @param childAddress Address of the child token's collection smart contract.\n     * @param childId ID of the child token in its own collection smart contract.\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of\n     *  the parent token (`true`) or in the active array (`false`)\n     * @param data Additional data with no specified format, sent in call to `_to`\n     */\n    function transferChild(\n        uint256 tokenId,\n        address to,\n        uint256 destinationId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) external;\n\n    /**\n     * @notice Used to retrieve the active child tokens of a given parent token.\n     * @dev Returns array of Child structs existing for parent token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param parentId ID of the parent token for which to retrieve the active child tokens\n     * @return children An array of Child structs containing the parent token's active child tokens\n     */\n    function childrenOf(\n        uint256 parentId\n    ) external view returns (Child[] memory children);\n\n    /**\n     * @notice Used to retrieve the pending child tokens of a given parent token.\n     * @dev Returns array of pending Child structs existing for given parent.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param parentId ID of the parent token for which to retrieve the pending child tokens\n     * @return children An array of Child structs containing the parent token's pending child tokens\n     */\n    function pendingChildrenOf(\n        uint256 parentId\n    ) external view returns (Child[] memory children);\n\n    /**\n     * @notice Used to retrieve a specific active child token for a given parent token.\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param parentId ID of the parent token for which the child is being retrieved\n     * @param index Index of the child token in the parent token's active child tokens array\n     * @return child A Child struct containing data about the specified child\n     */\n    function childOf(\n        uint256 parentId,\n        uint256 index\n    ) external view returns (Child memory child);\n\n    /**\n     * @notice Used to retrieve a specific pending child token from a given parent token.\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param parentId ID of the parent token for which the pending child token is being retrieved\n     * @param index Index of the child token in the parent token's pending child tokens array\n     * @return child A Child struct containting data about the specified child\n     */\n    function pendingChildOf(\n        uint256 parentId,\n        uint256 index\n    ) external view returns (Child memory child);\n\n    /**\n     * @notice Used to transfer the token into another token.\n     * @param from Address of the direct owner of the token to be transferred\n     * @param to Address of the receiving token's collection smart contract\n     * @param tokenId ID of the token being transferred\n     * @param destinationId ID of the token to receive the token being transferred\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function nestTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 destinationId,\n        bytes memory data\n    ) external;\n}"
    },
    "contracts/IERC7409.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.16;\n\ninterface IERC7409 {\n    event Emoted(\n        address indexed emoter,\n        address indexed collection,\n        uint256 indexed tokenId,\n        string emoji,\n        bool on\n    );\n\n    function emoteCountOf(\n        address collection,\n        uint256 tokenId,\n        string memory emoji\n    ) external view returns (uint256);\n\n    function bulkEmoteCountOf(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis\n    ) external view returns (uint256[] memory);\n\n    function hasEmoterUsedEmote(\n        address emoter,\n        address collection,\n        uint256 tokenId,\n        string memory emoji\n    ) external view returns (bool);\n\n    function haveEmotersUsedEmotes(\n        address[] memory emoters,\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis\n    ) external view returns (bool[] memory);\n\n    function prepareMessageToPresignEmote(\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state,\n        uint256 deadline\n    ) external view returns (bytes32);\n    \n    function bulkPrepareMessagesToPresignEmote(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states,\n        uint256[] memory deadlines\n    ) external view returns (bytes32[] memory);\n\n    function emote(\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state\n    ) external;\n\n    function bulkEmote(\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states\n    ) external;\n\n    function presignedEmote(\n        address emoter,\n        address collection,\n        uint256 tokenId,\n        string memory emoji,\n        bool state,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function bulkPresignedEmote(\n        address[] memory emoters,\n        address[] memory collections,\n        uint256[] memory tokenIds,\n        string[] memory emojis,\n        bool[] memory states,\n        uint256[] memory deadlines,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) external;\n}"
    },
    "contracts/IRMRKCatalog.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IRMRKCatalog\n * @author RMRK team\n * @notice An interface Catalog for RMRK equippable module.\n */\ninterface IRMRKCatalog is IERC165 {\n    /**\n     * @notice Event to announce addition of a new part.\n     * @dev It is emitted when a new part is added.\n     * @param partId ID of the part that was added\n     * @param itemType Enum value specifying whether the part is `None`, `Slot` and `Fixed`\n     * @param zIndex An uint specifying the z value of the part. It is used to specify the depth which the part should\n     *  be rendered at\n     * @param equippableAddresses An array of addresses that can equip this part\n     * @param metadataURI The metadata URI of the part\n     */\n    event AddedPart(\n        uint64 indexed partId,\n        ItemType indexed itemType,\n        uint8 zIndex,\n        address[] equippableAddresses,\n        string metadataURI\n    );\n\n    /**\n     * @notice Event to announce new equippables to the part.\n     * @dev It is emitted when new addresses are marked as equippable for `partId`.\n     * @param partId ID of the part that had new equippable addresses added\n     * @param equippableAddresses An array of the new addresses that can equip this part\n     */\n    event AddedEquippables(\n        uint64 indexed partId,\n        address[] equippableAddresses\n    );\n\n    /**\n     * @notice Event to announce the overriding of equippable addresses of the part.\n     * @dev It is emitted when the existing list of addresses marked as equippable for `partId` is overwritten by a new one.\n     * @param partId ID of the part whose list of equippable addresses was overwritten\n     * @param equippableAddresses The new, full, list of addresses that can equip this part\n     */\n    event SetEquippables(uint64 indexed partId, address[] equippableAddresses);\n\n    /**\n     * @notice Event to announce that a given part can be equipped by any address.\n     * @dev It is emitted when a given part is marked as equippable by any.\n     * @param partId ID of the part marked as equippable by any address\n     */\n    event SetEquippableToAll(uint64 indexed partId);\n\n    /**\n     * @notice Used to define a type of the item. Possible values are `None`, `Slot` or `Fixed`.\n     * @dev Used for fixed and slot parts.\n     */\n    enum ItemType {\n        None,\n        Slot,\n        Fixed\n    }\n\n    /**\n     * @notice The integral structure of a standard RMRK catalog item defining it.\n     * @dev Requires a minimum of 3 storage slots per catalog item, equivalent to roughly 60,000 gas as of Berlin hard\n     *  fork (April 14, 2021), though 5-7 storage slots is more realistic, given the standard length of an IPFS URI.\n     *  This will result in between 25,000,000 and 35,000,000 gas per 250 assets--the maximum block size of Ethereum\n     *  mainnet is 30M at peak usage.\n     * @return itemType The item type of the part\n     * @return z The z value of the part defining how it should be rendered when presenting the full NFT\n     * @return equippable The array of addresses allowed to be equipped in this part\n     * @return metadataURI The metadata URI of the part\n     */\n    struct Part {\n        ItemType itemType; //1 byte\n        uint8 z; //1 byte\n        address[] equippable; //n Collections that can be equipped into this slot\n        string metadataURI; //n bytes 32+\n    }\n\n    /**\n     * @notice The structure used to add a new `Part`.\n     * @dev The part is added with specified ID, so you have to make sure that you are using an unused `partId`,\n     *  otherwise the addition of the part vill be reverted.\n     * @dev The full `IntakeStruct` looks like this:\n     *  [\n     *          partID,\n     *      [\n     *          itemType,\n     *          z,\n     *          [\n     *               permittedCollectionAddress0,\n     *               permittedCollectionAddress1,\n     *               permittedCollectionAddress2\n     *           ],\n     *           metadataURI\n     *       ]\n     *   ]\n     * @return partId ID to be assigned to the `Part`\n     * @return part A `Part` to be added\n     */\n    struct IntakeStruct {\n        uint64 partId;\n        Part part;\n    }\n\n    /**\n     * @notice Used to return the metadata URI of the associated Catalog.\n     * @return Catalog metadata URI\n     */\n    function getMetadataURI() external view returns (string memory);\n\n    /**\n     * @notice Used to return the `itemType` of the associated Catalog\n     * @return `itemType` of the associated Catalog\n     */\n    function getType() external view returns (string memory);\n\n    /**\n     * @notice Used to check whether the given address is allowed to equip the desired `Part`.\n     * @dev Returns true if a collection may equip asset with `partId`.\n     * @param partId The ID of the part that we are checking\n     * @param targetAddress The address that we are checking for whether the part can be equipped into it or not\n     * @return isEquippable The status indicating whether the `targetAddress` can be equipped into `Part` with `partId` or not\n     */\n    function checkIsEquippable(\n        uint64 partId,\n        address targetAddress\n    ) external view returns (bool isEquippable);\n\n    /**\n     * @notice Used to check if the part is equippable by all addresses.\n     * @dev Returns true if part is equippable to all.\n     * @param partId ID of the part that we are checking\n     * @return isEquippableToAll The status indicating whether the part with `partId` can be equipped by any address or not\n     */\n    function checkIsEquippableToAll(\n        uint64 partId\n    ) external view returns (bool isEquippableToAll);\n\n    /**\n     * @notice Used to retrieve a `Part` with id `partId`\n     * @param partId ID of the part that we are retrieving\n     * @return part The `Part` struct associated with given `partId`\n     */\n    function getPart(uint64 partId) external view returns (Part memory part);\n\n    /**\n     * @notice Used to retrieve multiple parts at the same time.\n     * @param partIds An array of part IDs that we want to retrieve\n     * @return part An array of `Part` structs associated with given `partIds`\n     */\n    function getParts(\n        uint64[] memory partIds\n    ) external view returns (Part[] memory part);\n}"
    },
    "contracts/MultiAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./RMRKMultiAsset.sol\";\nimport \"./RMRKSoulboundPerToken.sol\";\n\ncontract MultiAsset is RMRKMultiAsset,RMRKSoulboundPerToken{\n    uint64 tokenId = 1;\n    uint64 assetId = 1;\n    uint256 index = 0;\n    function mint(string memory metadataURI,bool soulBound) public{\n        _mint(msg.sender,tokenId);\n        addAssets(tokenId,metadataURI);\n        _setSoulbound(tokenId,!soulBound);\n        tokenId++;\n    }\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 token_id\n    ) internal virtual override (RMRKSoulbound,RMRKMultiAsset) {\n        if (!isTransferable(token_id, from, to))\n            revert RMRKCannotTransferSoulbound();\n    }\n    function tokenCount() public view returns(uint64){\n        return tokenId;\n    }\n    function getTokens()  public view returns(uint64 [] memory){\n        uint64[] memory tokens = new uint64[] (tokenId-1);\n        for(uint64 i = 1; i < tokenId;i++){\n            tokens[i-1] = i;\n        }\n        return tokens;\n    }\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(RMRKMultiAsset,RMRKSoulbound) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n    function addAssets(uint64 token_id,string memory metadataURI) public {   \n        address owner = ownerOf(token_id);\n        require(owner == msg.sender,\"only owner can add assets\");   \n        _addAssetEntry(assetId,metadataURI);\n        _addAssetToToken(token_id,assetId,assetId);\n        _acceptAsset(token_id,index,assetId);\n        assetId++;\n    }\n}"
    },
    "contracts/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.21;\n\nerror RentrantCall();\n\n/**\n * @title ReentrancyGuard\n * @notice Smart contract used to guard against potential reentrancy exploits.\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @notice Initializes the ReentrancyGuard with the `_status` of `_NOT_ENTERED`.\n     */\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @notice Used to ensure that the function it is applied to cannot be reentered.\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantIn();\n        _;\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @notice Used to ensure that the current call is not a reentrant call.\n     * @dev If reentrant call is detected, the execution will be reverted.\n     */\n    function _nonReentrantIn() private {\n        // On the first call to nonReentrant, _notEntered will be true\n        if (_status == _ENTERED) revert RentrantCall();\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n}\n"
    },
    "contracts/RMRKCatalog.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.21;\n\nimport {IRMRKCatalog, IERC165} from \"./IRMRKCatalog.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title RMRKCatalog\n * @author RMRK team\n * @notice Catalog contract for RMRK equippable module.\n */\ncontract RMRKCatalog is IRMRKCatalog {\n    using Address for address;\n\n    /**\n     * @notice Mapping of uint64 `partId` to IRMRKCatalog `Part` struct\n     */\n    mapping(uint64 => Part) private _parts;\n\n    /**\n     * @notice Mapping of uint64 `partId` to boolean flag, indicating that a given `Part` can be equippable by any\n     *  address\n     */\n    mapping(uint64 => bool) private _isEquippableToAll;\n\n    uint64[] private _partIds;\n\n    string private _metadataURI;\n    string private _type;\n\n    /**\n     * @notice Used to initialize the Catalog.\n     * @param metadataURI Base metadata URI of the Catalog\n     * @param type_ Type of Catalog\n     */\n    constructor(string memory metadataURI, string memory type_) {\n        _setMetadataURI(metadataURI);\n        _setType(type_);\n    }\n\n    /**\n     * @notice Used to limit execution of functions intended for the `Slot` parts to only execute when used with such\n     *  parts.\n     * @dev Reverts execution of a function if the part with associated `partId` is uninitailized or is `Fixed`.\n     * @param partId ID of the part that we want the function to interact with\n     */\n    modifier onlySlot(uint64 partId) {\n        _onlySlot(partId);\n        _;\n    }\n\n    /**\n     * @notice Used to verify that an operation is only executed on slot Parts.\n     * @dev If the Part is not Slot type, the execution will be reverted.\n     * @param partId ID of the part to check\n     */\n    function _onlySlot(uint64 partId) private view {\n        ItemType itemType = _parts[partId].itemType;\n        if (itemType == ItemType.None) revert RMRKPartDoesNotExist();\n        if (itemType == ItemType.Fixed) revert RMRKPartIsNotSlot();\n    }\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IRMRKCatalog).interfaceId;\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function getMetadataURI() external view returns (string memory) {\n        return _metadataURI;\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function getType() external view returns (string memory) {\n        return _type;\n    }\n\n    /**\n     * @notice Internal helper function that sets the base metadata URI of the contract.\n     * @param metadataURI Base metadata URI of the contract\n     */\n    function _setMetadataURI(string memory metadataURI) internal {\n        _metadataURI = metadataURI;\n    }\n\n    /**\n     * @notice Internal helper function that sets the type of the contract.\n     * @param type_ Type of the contract\n     */\n    function _setType(string memory type_) internal {\n        _type = type_;\n    }\n\n    /**\n     * @notice Internal helper function that adds `Part` entries to storage.\n     * @dev Delegates to { _addPart } below.\n     * @param partIntake An array of `IntakeStruct` structs, consisting of `partId` and a nested `Part` struct\n     */\n    function _addPartList(IntakeStruct[] memory partIntake) internal {\n        uint256 len = partIntake.length;\n        for (uint256 i; i < len; ) {\n            _addPart(partIntake[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Internal function that adds a single `Part` to storage.\n     * @param partIntake `IntakeStruct` struct consisting of `partId` and a nested `Part` struct\n     *\n     */\n    function _addPart(IntakeStruct memory partIntake) internal {\n        uint64 partId = partIntake.partId;\n        Part memory part = partIntake.part;\n\n        if (partId == uint64(0)) revert RMRKIdZeroForbidden();\n        if (_parts[partId].itemType != ItemType.None)\n            revert RMRKPartAlreadyExists();\n        if (part.itemType == ItemType.None) revert RMRKBadConfig();\n        if (part.itemType == ItemType.Fixed && part.equippable.length != 0)\n            revert RMRKBadConfig();\n\n        _parts[partId] = part;\n        _partIds.push(partId);\n\n        emit AddedPart(\n            partId,\n            part.itemType,\n            part.z,\n            part.equippable,\n            part.metadataURI\n        );\n    }\n\n    /**\n     * @notice Internal function used to add multiple `equippableAddresses` to a single catalog entry.\n     * @dev Can only be called on `Part`s of `Slot` type.\n     * @dev Emits ***AddedEquippables*** event.\n     * @param partId ID of the `Part` that we are adding the equippable addresses to\n     * @param equippableAddresses An array of addresses that can be equipped into the `Part` associated with the `partId`\n     */\n    function _addEquippableAddresses(\n        uint64 partId,\n        address[] memory equippableAddresses\n    ) internal onlySlot(partId) {\n        if (equippableAddresses.length <= 0) revert RMRKZeroLengthIdsPassed();\n\n        uint256 len = equippableAddresses.length;\n        for (uint256 i; i < len; ) {\n            _parts[partId].equippable.push(equippableAddresses[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        delete _isEquippableToAll[partId];\n\n        emit AddedEquippables(partId, equippableAddresses);\n    }\n\n    /**\n     * @notice Internal function used to set the new list of `equippableAddresses`.\n     * @dev Overwrites existing `equippableAddresses`.\n     * @dev Can only be called on `Part`s of `Slot` type.\n     * @dev Emits ***SetEquippable*** event.\n     * @param partId ID of the `Part`s that we are overwiting the `equippableAddresses` for\n     * @param equippableAddresses A full array of addresses that can be equipped into this `Part`\n     */\n    function _setEquippableAddresses(\n        uint64 partId,\n        address[] memory equippableAddresses\n    ) internal onlySlot(partId) {\n        if (equippableAddresses.length <= 0) revert RMRKZeroLengthIdsPassed();\n        _parts[partId].equippable = equippableAddresses;\n        delete _isEquippableToAll[partId];\n\n        emit SetEquippables(partId, equippableAddresses);\n    }\n\n    /**\n     * @notice Internal function used to remove all of the `equippableAddresses` for a `Part` associated with the `partId`.\n     * @dev Can only be called on `Part`s of `Slot` type.\n     * @dev Emits ***SetEquippable*** event.\n     * @param partId ID of the part that we are clearing the `equippableAddresses` from\n     */\n    function _resetEquippableAddresses(\n        uint64 partId\n    ) internal onlySlot(partId) {\n        delete _parts[partId].equippable;\n        delete _isEquippableToAll[partId];\n\n        emit SetEquippables(partId, new address[](0));\n    }\n\n    /**\n     * @notice Sets the isEquippableToAll flag to true, meaning that any collection may be equipped into the `Part` with this\n     *  `partId`.\n     * @dev Can only be called on `Part`s of `Slot` type.\n     * @dev Emits ***SetEquippableToAll*** event.\n     * @param partId ID of the `Part` that we are setting as equippable by any address\n     */\n    function _setEquippableToAll(uint64 partId) internal onlySlot(partId) {\n        _isEquippableToAll[partId] = true;\n        emit SetEquippableToAll(partId);\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function checkIsEquippableToAll(\n        uint64 partId\n    ) public view returns (bool isEquippable) {\n        isEquippable = _isEquippableToAll[partId];\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function checkIsEquippable(\n        uint64 partId,\n        address targetAddress\n    ) public view returns (bool isEquippable) {\n        // If this is equippable to all, we're good\n        isEquippable = _isEquippableToAll[partId];\n\n        // Otherwise, must check against each of the equippable for the part\n        if (!isEquippable && _parts[partId].itemType == ItemType.Slot) {\n            address[] memory equippable = _parts[partId].equippable;\n            uint256 len = equippable.length;\n            for (uint256 i; i < len; ) {\n                if (targetAddress == equippable[i]) {\n                    isEquippable = true;\n                    break;\n                }\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function getPart(uint64 partId) public view returns (Part memory part) {\n        part = (_parts[partId]);\n    }\n\n    /**\n     * @inheritdoc IRMRKCatalog\n     */\n    function getParts(\n        uint64[] memory partIds\n    ) public view returns (Part[] memory parts) {\n        uint256 numParts = partIds.length;\n        parts = new Part[](numParts);\n\n        for (uint256 i; i < numParts; ) {\n            uint64 partId = partIds[i];\n            parts[i] = _parts[partId];\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/RMRKCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title RMRKCore\n * @author RMRK team\n * @notice Smart contract of the RMRK core module.\n * @dev This is currently just a passthrough contract which allows for granular editing of base-level ERC721 functions.\n */\ncontract RMRKCore {\n    string private constant _VERSION = \"2.3.2\";\n    bytes4 private constant _RMRK_INTERFACE = 0x524D524B; // \"RMRK\" in ASCII hex\n\n    /**\n     * @notice Version of the @rmrk-team/evm-contracts package\n     * @return version Version identifier for implementations of the @rmrk-team/evm-contracts package\n     */\n    function VERSION() public pure returns (string memory version) {\n        version = _VERSION;\n    }\n\n    /**\n     * @notice Interface identifier of the @rmrk-team/evm-contracts package\n     * @return rmrkInterface Interface identifier for implementations of the @rmrk-team/evm-contracts package\n     */\n    function RMRK_INTERFACE() public pure returns (bytes4 rmrkInterface) {\n        rmrkInterface = _RMRK_INTERFACE;\n    }\n}"
    },
    "contracts/RMRKEquippable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n//Generally all interactions should propagate downstream\n\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC5773} from \"./IERC5773.sol\";\nimport {IERC6220} from \"./IERC6220.sol\";\nimport {IERC7401} from \"./IERC7401.sol\";\nimport {IRMRKCatalog} from \"./IRMRKCatalog.sol\";\nimport {RMRKLib} from \"./RMRKLib.sol\";\nimport {AbstractMultiAsset} from \"./AbstractMultiAsset.sol\";\nimport {RMRKNestable} from \"./RMRKNestable.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title RMRKEquippable\n * @author RMRK team\n * @notice Smart contract of the RMRK Equippable module.\n */\ncontract RMRKEquippable is\n    ReentrancyGuard,\n    RMRKNestable,\n    AbstractMultiAsset,\n    IERC6220\n{\n    using RMRKLib for uint64[];\n\n    // ------------------- ASSETS --------------\n\n    // ------------------- ASSET APPROVALS --------------\n\n    /**\n     * @notice Mapping from token ID to approver address to approved address for assets.\n     * @dev The approver is necessary so approvals are invalidated for nested children on transfer.\n     * @dev WARNING: If a child NFT returns the original root owner, old permissions would be active again.\n     */\n    mapping(uint256 => mapping(address => address))\n        private _tokenApprovalsForAssets;\n\n    // ------------------- EQUIPPABLE --------------\n    /// Mapping of uint64 asset ID to corresponding catalog address.\n    mapping(uint64 => address) internal _catalogAddresses;\n    /// Mapping of uint64 ID to asset object.\n    mapping(uint64 => uint64) internal _equippableGroupIds;\n    /// Mapping of assetId to catalog parts applicable to this asset, both fixed and slot\n    mapping(uint64 => uint64[]) internal _partIds;\n\n    /// Mapping of token ID to catalog address to slot part ID to equipment information. Used to compose an NFT.\n    mapping(uint256 => mapping(address => mapping(uint64 => Equipment)))\n        internal _equipments;\n\n    /// Mapping of token ID to child (nestable) address to child ID to count of equipped items. Used to check if equipped.\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256)))\n        internal _equipCountPerChild;\n\n    /// Mapping of `equippableGroupId` to parent contract address and valid `slotId`.\n    mapping(uint64 => mapping(address => uint64)) internal _validParentSlots;\n\n    /**\n     * @notice Used to verify that the caller is either the owner of the given token or approved to manage the token's assets\n     *  of the owner.\n     * @param tokenId ID of the token that we are checking\n     */\n    function _onlyApprovedForAssetsOrOwner(uint256 tokenId) internal view {\n        if (!_isApprovedForAssetsOrOwner(_msgSender(), tokenId))\n            revert RMRKNotApprovedForAssetsOrOwner();\n    }\n\n    /**\n     * @notice Used to ensure that the caller is either the owner of the given token or approved to manage the token's assets\n     *  of the owner.\n     * @dev If that is not the case, the execution of the function will be reverted.\n     * @param tokenId ID of the token that we are checking\n     */\n    modifier onlyApprovedForAssetsOrOwner(uint256 tokenId) {\n        _onlyApprovedForAssetsOrOwner(tokenId);\n        _;\n    }\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, RMRKNestable) returns (bool) {\n        return\n            RMRKNestable.supportsInterface(interfaceId) ||\n            interfaceId == type(IERC5773).interfaceId ||\n            interfaceId == type(IERC6220).interfaceId;\n    }\n\n    // ------------------------------- ASSETS ------------------------------\n\n    // --------------------------- ASSET HANDLERS -------------------------\n\n    /**\n     * @notice Accepts a asset at from the pending array of given token.\n     * @dev Migrates the asset from the token's pending asset array to the token's active asset array.\n     * @dev Active assets cannot be removed by anyone, but can be replaced by a new asset.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - `index` must be in range of the length of the pending asset array.\n     * @dev Emits an {AssetAccepted} event.\n     * @param tokenId ID of the token for which to accept the pending asset\n     * @param index Index of the asset in the pending array to accept\n     * @param assetId ID of the asset that is being accepted\n     */\n    function acceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _acceptAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @notice Rejects a asset from the pending array of given token.\n     * @dev Removes the asset from the token's pending asset array.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - `index` must be in range of the length of the pending asset array.\n     * @dev Emits a {AssetRejected} event.\n     * @param tokenId ID of the token that the asset is being rejected from\n     * @param index Index of the asset in the pending array to be rejected\n     * @param assetId ID of the asset that is being rejected\n     */\n    function rejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _rejectAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @notice Rejects all assets from the pending array of a given token.\n     * @dev Effecitvely deletes the pending array.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     * @dev Emits a {AssetRejected} event with assetId = 0.\n     * @param tokenId ID of the token of which to clear the pending array.\n     * @param maxRejections Maximum number of expected assets to reject, used to prevent from rejecting assets which\n     *  arrive just before this operation.\n     */\n    function rejectAllAssets(\n        uint256 tokenId,\n        uint256 maxRejections\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _rejectAllAssets(tokenId, maxRejections);\n    }\n\n    /**\n     * @notice Sets a new priority array for a given token.\n     * @dev The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest\n     *  priority.\n     * @dev Value `0` of a priority is a special case equivalent to unitialized.\n     * @dev Requirements:\n     *\n     *  - The caller must own the token or be approved to manage the token's assets\n     *  - `tokenId` must exist.\n     *  - The length of `priorities` must be equal the length of the active assets array.\n     * @dev Emits a {AssetPrioritySet} event.\n     * @param tokenId ID of the token to set the priorities for\n     * @param priorities An array of priority values\n     */\n    function setPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _setPriority(tokenId, priorities);\n    }\n\n    // --------------------------- ASSET INTERNALS -------------------------\n\n    /**\n     * @notice Used to add a asset entry.\n     * @dev This internal function warrants custom access control to be implemented when used.\n     * @param id ID of the asset being added\n     * @param equippableGroupId ID of the equippable group being marked as equippable into the slot associated with\n     *  `Parts` of the `Slot` type\n     * @param catalogAddress Address of the `Catalog` associated with the asset\n     * @param metadataURI The metadata URI of the asset\n     * @param partIds An array of IDs of fixed and slot parts to be included in the asset\n     */\n    function _addAssetEntry(\n        uint64 id,\n        uint64 equippableGroupId,\n        address catalogAddress,\n        string memory metadataURI,\n        uint64[] memory partIds\n    ) internal virtual {\n        _addAssetEntry(id, metadataURI);\n\n        if (catalogAddress == address(0) && partIds.length != 0)\n            revert RMRKCatalogRequiredForParts();\n\n        _catalogAddresses[id] = catalogAddress;\n        _equippableGroupIds[id] = equippableGroupId;\n        _partIds[id] = partIds;\n    }\n\n    // ----------------------- ASSET APPROVALS ------------------------\n\n    /**\n     * @notice Used to grant approvals for specific tokens to a specified address.\n     * @dev This can only be called by the owner of the token or by an account that has been granted permission to\n     *  manage all of the owner's assets.\n     * @param to Address of the account to receive the approval to the specified token\n     * @param tokenId ID of the token for which we are granting the permission\n     */\n    function approveForAssets(address to, uint256 tokenId) public virtual {\n        address owner = ownerOf(tokenId);\n        if (to == owner) revert RMRKApprovalForAssetsToCurrentOwner();\n\n        if (\n            _msgSender() != owner &&\n            !isApprovedForAllForAssets(owner, _msgSender())\n        ) revert RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\n        _approveForAssets(to, tokenId);\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getApprovedForAssets(\n        uint256 tokenId\n    ) public view virtual returns (address approved) {\n        _requireMinted(tokenId);\n        approved = _tokenApprovalsForAssets[tokenId][ownerOf(tokenId)];\n    }\n\n    /**\n     * @notice Internal function to check whether the queried user is either:\n     *   1. The root owner of the token associated with `tokenId`.\n     *   2. Is approved for all assets of the current owner via the `setApprovalForAllForAssets` function.\n     *   3. Is granted approval for the specific tokenId for asset management via the `approveForAssets` function.\n     * @param user Address of the user we are checking for permission\n     * @param tokenId ID of the token to query for permission for a given `user`\n     * @return A boolean value indicating whether the user is approved to manage the token or not\n     */\n    function _isApprovedForAssetsOrOwner(\n        address user,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (user == owner ||\n            isApprovedForAllForAssets(owner, user) ||\n            getApprovedForAssets(tokenId) == user);\n    }\n\n    /**\n     * @notice Internal function for granting approvals for a specific token.\n     * @param to Address of the account we are granting an approval to\n     * @param tokenId ID of the token we are granting the approval for\n     */\n    function _approveForAssets(address to, uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n        _tokenApprovalsForAssets[tokenId][owner] = to;\n        emit ApprovalForAssets(owner, to, tokenId);\n    }\n\n    /**\n     * @notice Used to clear the approvals on a given token.\n     * @param tokenId ID of the token we are clearing the approvals of\n     */\n    function _cleanApprovals(uint256 tokenId) internal virtual override {\n        _approveForAssets(address(0), tokenId);\n    }\n\n    // ------------------------------- EQUIPPING ------------------------------\n\n    /**\n     * @inheritdoc RMRKNestable\n     */\n    function _transferChild(\n        uint256 tokenId,\n        address to,\n        uint256 destinationId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) internal virtual override {\n        if (!isPending) {\n            if (isChildEquipped(tokenId, childAddress, childId))\n                revert RMRKMustUnequipFirst();\n        }\n        super._transferChild(\n            tokenId,\n            to,\n            destinationId,\n            childIndex,\n            childAddress,\n            childId,\n            isPending,\n            data\n        );\n    }\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function equip(\n        IntakeEquip memory data\n    ) public virtual onlyApprovedForAssetsOrOwner(data.tokenId) nonReentrant {\n        _equip(data);\n    }\n\n    /**\n     * @notice Private function used to equip a child into a token.\n     * @dev If the `Slot` already has an item equipped, the execution will be reverted.\n     * @dev If the child can't be used in the given `Slot`, the execution will be reverted.\n     * @dev If the catalog doesn't allow this equip to happen, the execution will be reverted.\n     * @dev The `IntakeEquip` stuct contains the following data:\n     *  [\n     *      tokenId,\n     *      childIndex,\n     *      assetId,\n     *      slotPartId,\n     *      childAssetId\n     *  ]\n     * @dev Emits ***ChildAssetEquipped*** event.\n     * @param data An `IntakeEquip` struct specifying the equip data\n     */\n    function _equip(IntakeEquip memory data) internal virtual {\n        address catalogAddress = _catalogAddresses[data.assetId];\n        uint64 slotPartId = data.slotPartId;\n        if (\n            _equipments[data.tokenId][catalogAddress][slotPartId]\n                .childEquippableAddress != address(0)\n        ) revert RMRKSlotAlreadyUsed();\n\n        // Check from parent's asset perspective:\n        _checkAssetAcceptsSlot(data.assetId, slotPartId);\n\n        IERC7401.Child memory child = childOf(data.tokenId, data.childIndex);\n\n        // Check from child perspective intention to be used in part\n        // We add reentrancy guard because of this call, it happens before updating state\n        if (\n            !IERC6220(child.contractAddress)\n                .canTokenBeEquippedWithAssetIntoSlot(\n                    address(this),\n                    child.tokenId,\n                    data.childAssetId,\n                    slotPartId\n                )\n        ) revert RMRKTokenCannotBeEquippedWithAssetIntoSlot();\n\n        // Check from catalog perspective\n        if (\n            !IRMRKCatalog(catalogAddress).checkIsEquippable(\n                slotPartId,\n                child.contractAddress\n            )\n        ) revert RMRKEquippableEquipNotAllowedByCatalog();\n\n        _beforeEquip(data);\n        Equipment memory newEquip = Equipment({\n            assetId: data.assetId,\n            childAssetId: data.childAssetId,\n            childId: child.tokenId,\n            childEquippableAddress: child.contractAddress\n        });\n\n        _equipments[data.tokenId][catalogAddress][slotPartId] = newEquip;\n        _equipCountPerChild[data.tokenId][child.contractAddress][\n            child.tokenId\n        ] += 1;\n\n        emit ChildAssetEquipped(\n            data.tokenId,\n            data.assetId,\n            slotPartId,\n            child.tokenId,\n            child.contractAddress,\n            data.childAssetId\n        );\n        _afterEquip(data);\n    }\n\n    /**\n     * @notice Private function to check if a given asset accepts a given slot or not.\n     * @dev Execution will be reverted if the `Slot` does not apply for the asset.\n     * @param assetId ID of the asset\n     * @param slotPartId ID of the `Slot`\n     */\n    function _checkAssetAcceptsSlot(\n        uint64 assetId,\n        uint64 slotPartId\n    ) private view {\n        (, bool found) = _partIds[assetId].indexOf(slotPartId);\n        if (!found) revert RMRKTargetAssetCannotReceiveSlot();\n    }\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function unequip(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotPartId\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _unequip(tokenId, assetId, slotPartId);\n    }\n\n    /**\n     * @notice Private function used to unequip child from parent token.\n     * @dev Emits ***ChildAssetUnequipped*** event.\n     * @param tokenId ID of the parent from which the child is being unequipped\n     * @param assetId ID of the parent's asset that contains the `Slot` into which the child is equipped\n     * @param slotPartId ID of the `Slot` from which to unequip the child\n     */\n    function _unequip(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotPartId\n    ) internal virtual {\n        address targetCatalogAddress = _catalogAddresses[assetId];\n        Equipment memory equipment = _equipments[tokenId][targetCatalogAddress][\n            slotPartId\n        ];\n        if (equipment.childEquippableAddress == address(0))\n            revert RMRKNotEquipped();\n        _beforeUnequip(tokenId, assetId, slotPartId);\n\n        delete _equipments[tokenId][targetCatalogAddress][slotPartId];\n        _equipCountPerChild[tokenId][equipment.childEquippableAddress][\n            equipment.childId\n        ] -= 1;\n\n        emit ChildAssetUnequipped(\n            tokenId,\n            assetId,\n            slotPartId,\n            equipment.childId,\n            equipment.childEquippableAddress,\n            equipment.childAssetId\n        );\n        _afterUnequip(tokenId, assetId, slotPartId);\n    }\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function isChildEquipped(\n        uint256 tokenId,\n        address childAddress,\n        uint256 childId\n    ) public view virtual returns (bool isEquipped) {\n        isEquipped = _equipCountPerChild[tokenId][childAddress][childId] != 0;\n    }\n\n    // --------------------- ADMIN VALIDATION ---------------------\n\n    /**\n     * @notice Internal function used to declare that the assets belonging to a given `equippableGroupId` are\n     *  equippable into the `Slot` associated with the `partId` of the collection at the specified `parentAddress`.\n     * @dev Emits ***ValidParentEquippableGroupIdSet*** event.\n     * @param equippableGroupId ID of the equippable group\n     * @param parentAddress Address of the parent into which the equippable group can be equipped into\n     * @param slotPartId ID of the `Slot` that the items belonging to the equippable group can be equipped into\n     */\n    function _setValidParentForEquippableGroup(\n        uint64 equippableGroupId,\n        address parentAddress,\n        uint64 slotPartId\n    ) internal virtual {\n        if (equippableGroupId == uint64(0) || slotPartId == uint64(0))\n            revert RMRKIdZeroForbidden();\n        _validParentSlots[equippableGroupId][parentAddress] = slotPartId;\n        emit ValidParentEquippableGroupIdSet(\n            equippableGroupId,\n            slotPartId,\n            parentAddress\n        );\n    }\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function canTokenBeEquippedWithAssetIntoSlot(\n        address parent,\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotId\n    ) public view virtual returns (bool canBeEquipped) {\n        uint64 equippableGroupId = _equippableGroupIds[assetId];\n        uint64 equippableSlot = _validParentSlots[equippableGroupId][parent];\n        if (equippableSlot == slotId) {\n            (, bool found) = getActiveAssets(tokenId).indexOf(assetId);\n            canBeEquipped = found;\n        }\n    }\n\n    // --------------------- Getting Extended Assets ---------------------\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function getAssetAndEquippableData(\n        uint256 tokenId,\n        uint64 assetId\n    )\n        public\n        view\n        virtual\n        returns (\n            string memory metadataURI,\n            uint64 equippableGroupId,\n            address catalogAddress,\n            uint64[] memory partIds\n        )\n    {\n        metadataURI = getAssetMetadata(tokenId, assetId);\n        equippableGroupId = _equippableGroupIds[assetId];\n        catalogAddress = _catalogAddresses[assetId];\n        partIds = _partIds[assetId];\n    }\n\n    ////////////////////////////////////////\n    //              UTILS\n    ////////////////////////////////////////\n\n    /**\n     * @inheritdoc IERC6220\n     */\n    function getEquipment(\n        uint256 tokenId,\n        address targetCatalogAddress,\n        uint64 slotPartId\n    ) public view virtual returns (Equipment memory equipment) {\n        equipment = _equipments[tokenId][targetCatalogAddress][slotPartId];\n    }\n\n    // HOOKS\n\n    /**\n     * @notice A hook to be called before a equipping a asset to the token.\n     * @dev The `IntakeEquip` struct consist of the following data:\n     *  [\n     *      tokenId,\n     *      childIndex,\n     *      assetId,\n     *      slotPartId,\n     *      childAssetId\n     *  ]\n     * @param data The `IntakeEquip` struct containing data of the asset that is being equipped\n     */\n    function _beforeEquip(IntakeEquip memory data) internal virtual {}\n\n    /**\n     * @notice A hook to be called after equipping a asset to the token.\n     * @dev The `IntakeEquip` struct consist of the following data:\n     *  [\n     *      tokenId,\n     *      childIndex,\n     *      assetId,\n     *      slotPartId,\n     *      childAssetId\n     *  ]\n     * @param data The `IntakeEquip` struct containing data of the asset that was equipped\n     */\n    function _afterEquip(IntakeEquip memory data) internal virtual {}\n\n    /**\n     * @notice A hook to be called before unequipping a asset from the token.\n     * @param tokenId ID of the token from which the asset is being unequipped\n     * @param assetId ID of the asset being unequipped\n     * @param slotPartId ID of the slot from which the asset is being unequipped\n     */\n    function _beforeUnequip(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotPartId\n    ) internal virtual {}\n\n    /**\n     * @notice A hook to be called after unequipping a asset from the token.\n     * @param tokenId ID of the token from which the asset was unequipped\n     * @param assetId ID of the asset that was unequipped\n     * @param slotPartId ID of the slot from which the asset was unequipped\n     */\n    function _afterUnequip(\n        uint256 tokenId,\n        uint64 assetId,\n        uint64 slotPartId\n    ) internal virtual {}\n}\n"
    },
    "contracts/RMRKErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\n/// @title RMRKErrors\n/// @author RMRK team\n/// @notice A collection of errors used in the RMRK suite\n/// @dev Errors are kept in a centralised file in order to provide a central point of reference and to avoid error\n///  naming collisions due to inheritance\n\n/// Attempting to grant the token to 0x0 address\nerror ERC721AddressZeroIsNotaValidOwner();\n/// Attempting to grant approval to the current owner of the token\nerror ERC721ApprovalToCurrentOwner();\n/// Attempting to grant approval when not being owner or approved for all should not be permitted\nerror ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\n/// Attempting to grant approval to self\nerror ERC721ApproveToCaller();\n/// Attempting to use an invalid token ID\nerror ERC721InvalidTokenId();\n/// Attempting to mint to 0x0 address\nerror ERC721MintToTheZeroAddress();\n/// Attempting to manage a token without being its owner or approved by the owner\nerror ERC721NotApprovedOrOwner();\n/// Attempting to mint an already minted token\nerror ERC721TokenAlreadyMinted();\n/// Attempting to transfer the token from an address that is not the owner\nerror ERC721TransferFromIncorrectOwner();\n/// Attempting to safe transfer to an address that is unable to receive the token\nerror ERC721TransferToNonReceiverImplementer();\n/// Attempting to transfer the token to a 0x0 address\nerror ERC721TransferToTheZeroAddress();\n/// Attempting to grant approval of assets to their current owner\nerror RMRKApprovalForAssetsToCurrentOwner();\n/// Attempting to grant approval of assets without being the caller or approved for all\nerror RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\n/// Attempting to incorrectly configue a Catalog item\nerror RMRKBadConfig();\n/// Attempting to set the priorities with an array of length that doesn't match the length of active assets array\nerror RMRKBadPriorityListLength();\n/// Attempting to add an asset entry with `Part`s, without setting the `Catalog` address\nerror RMRKCatalogRequiredForParts();\n/// Attempting to transfer a soulbound (non-transferrable) token\nerror RMRKCannotTransferSoulbound();\n/// Attempting to accept a child that has already been accepted\nerror RMRKChildAlreadyExists();\n/// Attempting to interact with a child, using index that is higher than the number of children\nerror RMRKChildIndexOutOfRange();\n/// Attempting to find the index of a child token on a parent which does not own it.\nerror RMRKChildNotFoundInParent();\n/// Attempting to equip a `Part` with a child not approved by the Catalog\nerror RMRKEquippableEquipNotAllowedByCatalog();\n/// Attempting to use ID 0, which is not supported\n/// @dev The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\nerror RMRKIdZeroForbidden();\n/// Attempting to interact with an asset, using index greater than number of assets\nerror RMRKIndexOutOfRange();\n/// Attempting to reclaim a child that can't be reclaimed\nerror RMRKInvalidChildReclaim();\n/// Attempting to interact with an end-user account when the contract account is expected\nerror RMRKIsNotContract();\n/// Attempting to interact with a contract that had its operation locked\nerror RMRKLocked();\n/// Attempting to add a pending child after the number of pending children has reached the limit (default limit is 128)\nerror RMRKMaxPendingChildrenReached();\n/// Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is\n///  128)\nerror RMRKMaxPendingAssetsReached();\n/// Attempting to burn a total number of recursive children higher than maximum set\n/// @param childContract Address of the collection smart contract in which the maximum number of recursive burns was reached\n/// @param childId ID of the child token at which the maximum number of recursive burns was reached\nerror RMRKMaxRecursiveBurnsReached(address childContract, uint256 childId);\n/// Attempting to mint a number of tokens that would cause the total supply to be greater than maximum supply\nerror RMRKMintOverMax();\n/// Attempting to mint zero tokens\nerror RMRKMintZero();\n/// Attempting to pass complementary arrays of different lengths\nerror RMRKMismachedArrayLength();\n/// Attempting to transfer a child before it is unequipped\nerror RMRKMustUnequipFirst();\n/// Attempting to nest a child over the nestable limit (current limit is 100 levels of nesting)\nerror RMRKNestableTooDeep();\n/// Attempting to nest the token to own descendant, which would create a loop and leave the looped tokens in limbo\nerror RMRKNestableTransferToDescendant();\n/// Attempting to nest the token to a smart contract that doesn't support nesting\nerror RMRKNestableTransferToNonRMRKNestableImplementer();\n/// Attempting to nest the token into itself\nerror RMRKNestableTransferToSelf();\n/// Attempting to interact with an asset that can not be found\nerror RMRKNoAssetMatchingId();\n/// Attempting to manage an asset without owning it or having been granted permission by the owner to do so\nerror RMRKNotApprovedForAssetsOrOwner();\n/// Attempting to interact with a token without being its owner or having been granted permission by the\n///  owner to do so\n/// @dev When a token is nested, only the direct owner (NFT parent) can mange it. In that case, approved addresses are\n///  not allowed to manage it, in order to ensure the expected behaviour\nerror RMRKNotApprovedOrDirectOwner();\n/// Attempting to compose an asset wihtout having an associated Catalog\nerror RMRKNotComposableAsset();\n/// Attempting to unequip an item that isn't equipped\nerror RMRKNotEquipped();\n/// Attempting to interact with a management function without being the smart contract's owner\nerror RMRKNotOwner();\n/// Attempting to interact with a function without being the owner or contributor of the collection\nerror RMRKNotOwnerOrContributor();\n/// Attempting to transfer the ownership to the 0x0 address\nerror RMRKNewOwnerIsZeroAddress();\n/// Attempting to assign a 0x0 address as a contributor\nerror RMRKNewContributorIsZeroAddress();\n/// Attempting an operation requiring the token being nested, while it is not\nerror RMRKParentIsNotNFT();\n/// Attempting to add a `Part` with an ID that is already used\nerror RMRKPartAlreadyExists();\n/// Attempting to use a `Part` that doesn't exist\nerror RMRKPartDoesNotExist();\n/// Attempting to use a `Part` that is `Fixed` when `Slot` kind of `Part` should be used\nerror RMRKPartIsNotSlot();\n/// Attempting to interact with a pending child using an index greater than the size of pending array\nerror RMRKPendingChildIndexOutOfRange();\n/// Attempting to add an asset using an ID that has already been used\nerror RMRKAssetAlreadyExists();\n/// Attempting to equip an item into a slot that already has an item equipped\nerror RMRKSlotAlreadyUsed();\n/// Attempting to equip an item into a `Slot` that the target asset does not implement\nerror RMRKTargetAssetCannotReceiveSlot();\n/// Attempting to equip a child into a `Slot` and parent that the child's collection doesn't support\nerror RMRKTokenCannotBeEquippedWithAssetIntoSlot();\n/// Attempting to compose a NFT of a token without active assets\nerror RMRKTokenDoesNotHaveAsset();\n/// Attempting to determine the asset with the top priority on a token without assets\nerror RMRKTokenHasNoAssets();\n/// Attempting to accept or transfer a child which does not match the one at the specified index\nerror RMRKUnexpectedChildId();\n/// Attempting to reject all pending assets but more assets than expected are pending\nerror RMRKUnexpectedNumberOfAssets();\n/// Attempting to reject all pending children but children assets than expected are pending\nerror RMRKUnexpectedNumberOfChildren();\n/// Attempting to accept or reject an asset which does not match the one at the specified index\nerror RMRKUnexpectedAssetId();\n/// Attempting an operation expecting a parent to the token which is not the actual one\nerror RMRKUnexpectedParent();\n/// Attempting not to pass an empty array of equippable addresses when adding or setting the equippable addresses\nerror RMRKZeroLengthIdsPassed();\n/// Attempting to set the royalties to a value higher than 100% (10000 in basis points)\nerror RMRKRoyaltiesTooHigh();\n/// Attempting to do a bulk operation on a token that is not owned by the caller\nerror RMRKCanOnlyDoBulkOperationsOnOwnedTokens();\n/// Attempting to do a bulk operation with multiple tokens at a time\nerror RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime();\n/// Attempting to pay with native token with a value different than expected\nerror RMRKWrongValueSent();\n// Attempting to send native token to a recipient that is unable to receive it\nerror TransferFailed();"
    },
    "contracts/RMRKLib.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title RMRKLib\n * @author RMRK team\n * @notice RMRK library smart contract.\n */\nlibrary RMRKLib {\n    error IndexOutOfBounds();\n\n    /**\n     * @notice Used to remove an item from the array using the specified index.\n     * @dev The item is removed by replacing it with the last item and removing the last element.\n     * @param array An array of items containing the item to be removed\n     * @param index Index of the item to remove\n     */\n    function removeItemByIndex(uint64[] storage array, uint256 index) internal {\n        //Check to see if this is already gated by require in all calls\n        if (index >= array.length) revert IndexOutOfBounds();\n        array[index] = array[array.length - 1];\n        array.pop();\n    }\n\n    /**\n     * @notice Used to determine the index of the item in the array by spedifying its value.\n     * @dev This was adapted from Cryptofin-Solidity `arrayUtils`.\n     * @dev If the item is not found the index returned will equal `0`.\n     * @param A The array containing the item to be found\n     * @param a The value of the item to find the index of\n     * @return The index of the item in the array\n     * @return A boolean value specifying whether the item was found\n     */\n    function indexOf(\n        uint64[] memory A,\n        uint64 a\n    ) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i; i < length; ) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        return (0, false);\n    }\n}"
    },
    "contracts/RMRKMultiAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC5773} from \"./IERC5773.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {AbstractMultiAsset} from \"./AbstractMultiAsset.sol\";\nimport {RMRKCore} from \"./RMRKCore.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title RMRKMultiAsset\n * @author RMRK team\n * @notice Smart contract of the RMRK Multi asset module.\n */\ncontract RMRKMultiAsset is IERC165, IERC721, AbstractMultiAsset, RMRKCore {\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // ------------------- ASSETS --------------\n\n    // Mapping from token ID to approved address for assets\n    mapping(uint256 => address) private _tokenApprovalsForAssets;\n\n    // -------------------------- ERC721 MODIFIERS ----------------------------\n\n    /**\n     * @notice Used to verify that the caller is the owner of the given token or approved by its owner to manage it.\n     * @dev If the caller is not the owner or approved by the owner, the execution is reverted.\n     * @param tokenId ID of the token being checked\n     */\n    function _onlyApprovedOrOwner(uint256 tokenId) internal view {\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\n            revert ERC721NotApprovedOrOwner();\n    }\n\n    /**\n     * @notice Used to verify that the caller is the owner of the given token or approved by its owner to manage it.\n     * @param tokenId ID of the token being checked\n     */\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\n        _onlyApprovedOrOwner(tokenId);\n        _;\n    }\n\n    // ----------------------- MODIFIERS FOR ASSETS ------------------------\n\n    /**\n     * @notice Internal function to check whether the queried user is either:\n     *   1. The root owner of the token associated with `tokenId`.\n     *   2. Is approved for all assets of the current owner via the `setApprovalForAllForAssets` function.\n     *   3. Is granted approval for the specific tokenId for asset management via the `approveForAssets` function.\n     * @param user Address of the user we are checking for permission\n     * @param tokenId ID of the token to query for permission for a given `user`\n     * @return A boolean value indicating whether the user is approved to manage the token or not\n     */\n    function _isApprovedForAssetsOrOwner(\n        address user,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (user == owner ||\n            isApprovedForAllForAssets(owner, user) ||\n            getApprovedForAssets(tokenId) == user);\n    }\n\n    /**\n     * @notice Used to verify that the caller is either the owner of the given token or approved by its owner to manage\n     *  the assets on the given token.\n     * @dev If the caller is not the owner of the given token or approved by its owner to manage the assets on the\n     *  given token, the execution will be reverted.\n     * @param tokenId ID of the token being checked\n     */\n    function _onlyApprovedForAssetsOrOwner(uint256 tokenId) internal view {\n        if (!_isApprovedForAssetsOrOwner(_msgSender(), tokenId))\n            revert RMRKNotApprovedForAssetsOrOwner();\n    }\n\n    /**\n     * @notice Used to verify that the caller is either the owner of the given token or approved by its owner to manage\n     *  the assets on the given token.\n     * @param tokenId ID of the token being checked\n     */\n    modifier onlyApprovedForAssetsOrOwner(uint256 tokenId) {\n        _onlyApprovedForAssetsOrOwner(tokenId);\n        _;\n    }\n\n    // ------------------------------- ERC721 ---------------------------------\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC5773).interfaceId;\n    }\n\n    /**\n     * @notice Used to retrieve the number of tokens in ``owner``'s account.\n     * @param owner Address of the account being checked\n     * @return balance The balance of the given account\n     */\n    function balanceOf(\n        address owner\n    ) public view virtual returns (uint256 balance) {\n        if (owner == address(0)) revert ERC721AddressZeroIsNotaValidOwner();\n        balance = _balances[owner];\n    }\n\n    /**\n     * @notice Used to retrieve the owner of the given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param tokenId ID of the token for which to retrieve the token for\n     * @return owner Address of the account owning the token\n     */\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual returns (address owner) {\n        owner = _owners[tokenId];\n        if (owner == address(0)) revert ERC721InvalidTokenId();\n    }\n\n    /**\n     * @notice Used to grant a one-time approval to manage one's token.\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * @dev The approval is cleared when the token is transferred.\n     * @dev Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     * @dev Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     * @dev Emits an {Approval} event.\n     * @param to Address receiving the approval\n     * @param tokenId ID of the token for which the approval is being granted\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        address owner = ownerOf(tokenId);\n        if (to == owner) revert ERC721ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\n            revert ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @notice Used to retrieve the account approved to manage given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param tokenId ID of the token to check for approval\n     * @return approved Address of the account approved to manage the token\n     */\n    function getApproved(\n        uint256 tokenId\n    ) public view virtual returns (address approved) {\n        _requireMinted(tokenId);\n\n        approved = _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @notice Used to approve or remove `operator` as an operator for the caller.\n     * @dev Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     * @dev Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     * @dev Emits an {ApprovalForAll} event.\n     * @param operator Address of the operator being managed\n     * @param approved A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @notice Used to check if the given address is allowed to manage the tokens of the specified address.\n     * @param owner Address of the owner of the tokens\n     * @param operator Address being checked for approval\n     * @return isApproved A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)\n     *  or not (`false`)\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual returns (bool isApproved) {\n        isApproved = _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @notice Transfers a given token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * @dev Emits a {Transfer} event.\n     * @param from Address from which to transfer the token from\n     * @param to Address to which to transfer the token to\n     * @param tokenId ID of the token to transfer\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual onlyApprovedOrOwner(tokenId) {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @notice Used to safely transfer a given token token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address to transfer the tokens from\n     * @param to Address to transfer the tokens to\n     * @param tokenId ID of the token to transfer\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @notice Used to safely transfer a given token token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address to transfer the tokens from\n     * @param to Address to transfer the tokens to\n     * @param tokenId ID of the token to transfer\n     * @param data Additional data without a specified format to be sent along with the token transaction\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual onlyApprovedOrOwner(tokenId) {\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware\n     *  of the ERC721 protocol to prevent tokens from being forever locked.\n     * @dev `data` is additional data, it has no specified format and it is sent in call to `to`.\n     * @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative\n     *  mechanisms to perform token transfer, such as signature-based.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address from which to send the token from\n     * @param to Address to which to send the token to\n     * @param tokenId ID of the token to be sent\n     * @param data Additional data to send with the tokens\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        if (!_checkOnERC721Received(from, to, tokenId, data))\n            revert ERC721TransferToNonReceiverImplementer();\n    }\n\n    /**\n     * @notice Used to check whether the given token exists.\n     * @dev Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     * @dev Tokens start existing when they are minted (`_mint`) and stop existing when they are burned (`_burn`).\n     * @param tokenId ID of the token being checked\n     * @return exists A boolean value signifying whether the token exists\n     */\n    function _exists(\n        uint256 tokenId\n    ) internal view virtual returns (bool exists) {\n        exists = _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @notice Used to check whether the given account is allowed to manage the given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param spender Address that is being checked for approval\n     * @param tokenId ID of the token being checked\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token\n     */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner ||\n            isApprovedForAll(owner, spender) ||\n            getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @notice Used to safely mint the token to the specified address while passing the additional data to contract\n     *  recipients.\n     * @param to Address to which to mint the token.\n     * @param tokenId ID of the token to mint\n     * @param data Additional data to send with the tokens\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\n            revert ERC721TransferToNonReceiverImplementer();\n    }\n\n    /**\n     * @notice Used to mint a specified token to a given address.\n     * @dev WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must not exist.\n     *  - `to` cannot be the zero address.\n     * @dev Emits a {Transfer} event.\n     * @param to Address to mint the token to\n     * @param tokenId ID of the token to mint\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        if (to == address(0)) revert ERC721MintToTheZeroAddress();\n        if (_exists(tokenId)) revert ERC721TokenAlreadyMinted();\n        if (tokenId == uint256(0)) revert RMRKIdZeroForbidden();\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @notice Used to destroy the specified token.\n     * @dev The approval is cleared when the token is burned.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @dev Emits a {Transfer} event.\n     * @param tokenId ID of the token to burn\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n        _approveForAssets(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @notice Used to transfer the specified token from one user to another.\n     * @dev As opposed to {transferFrom}, this imposes no restrictions on `msg.sender`.\n     * @dev Requirements:\n     *\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must be owned by `from`.\n     * @dev Emits a {Transfer} event.\n     * @param from Address from which to transfer the token\n     * @param to Address to which to transfer the token\n     * @param tokenId ID of the token to transfer\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        if (ownerOf(tokenId) != from) revert ERC721TransferFromIncorrectOwner();\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n        delete _tokenApprovalsForAssets[tokenId];\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @notice Used to grant an approval to an address to manage the given token.\n     * @dev Emits an {Approval} event.\n     * @param to Address receiveing the approval\n     * @param tokenId ID of the token that the approval is being granted for\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @notice Used to manage an approval to an address to manage all of the tokens of the user.\n     * @dev If the user attempts to grant the approval to themselves, the execution is reverted.\n     * @dev Emits an {ApprovalForAll} event.\n     * @param owner Address of the account for which the approval is being granted\n     * @param operator Address receiving approval to manage all of the tokens of the `owner`\n     * @param approved Boolean value signifying whether\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        if (owner == operator) revert ERC721ApproveToCaller();\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @notice Used to verify thet the token has been minted.\n     * @dev The token is considered minted if its owner is not the `0x0` address.\n     * @dev This function doesn't output any feedback about the token existing, but it reverts if the token doesn't\n     *  exist.\n     * @param tokenId ID of the token being checked\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        if (!_exists(tokenId)) revert ERC721InvalidTokenId();\n    }\n\n    /**\n     * @notice Used to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * @dev The call is not executed if the target address is not a contract.\n     * @param from Address representing the previous owner of the given token\n     * @param to Yarget address that will receive the tokens\n     * @param tokenId ID of the token to be transferred\n     * @param data Optional data to send along with the call\n     * @return valid Boolean value signifying whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool valid) {\n        if (to.code.length != 0) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    data\n                )\n            returns (bytes4 retval) {\n                valid = retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == uint256(0)) {\n                    revert ERC721TransferToNonReceiverImplementer();\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            valid = true;\n        }\n    }\n\n    // ------------------------------- ASSETS ------------------------------\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function acceptAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _acceptAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function rejectAsset(\n        uint256 tokenId,\n        uint256 index,\n        uint64 assetId\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _rejectAsset(tokenId, index, assetId);\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function rejectAllAssets(\n        uint256 tokenId,\n        uint256 maxRejections\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _rejectAllAssets(tokenId, maxRejections);\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function setPriority(\n        uint256 tokenId,\n        uint64[] calldata priorities\n    ) public virtual onlyApprovedForAssetsOrOwner(tokenId) {\n        _setPriority(tokenId, priorities);\n    }\n\n    // ----------------------- APPROVALS FOR ASSETS ------------------------\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function approveForAssets(address to, uint256 tokenId) public virtual {\n        address owner = ownerOf(tokenId);\n        if (to == owner) revert RMRKApprovalForAssetsToCurrentOwner();\n\n        if (\n            _msgSender() != owner &&\n            !isApprovedForAllForAssets(owner, _msgSender())\n        ) revert RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\n        _approveForAssets(to, tokenId);\n    }\n\n    /**\n     * @notice Used to grant an approval to an address to manage assets of a given token.\n     * @dev Emits ***ApprovalForAssets*** event.\n     * @param to Address of the account to grant the approval to\n     * @param tokenId ID of the token for which the approval is being given\n     */\n    function _approveForAssets(address to, uint256 tokenId) internal virtual {\n        _tokenApprovalsForAssets[tokenId] = to;\n        emit ApprovalForAssets(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @inheritdoc IERC5773\n     */\n    function getApprovedForAssets(\n        uint256 tokenId\n    ) public view virtual returns (address approved) {\n        _requireMinted(tokenId);\n        approved = _tokenApprovalsForAssets[tokenId];\n    }\n\n    /**\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\n     * @dev Calling conditions:\n     *\n     *  - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`.\n     *  - When `from` is zero, `tokenId` will be minted to `to`.\n     *  - When `to` is zero, ``from``'s `tokenId` will be burned.\n     *  - `from` and `to` are never zero at the same time.\n     *\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token is being transferred\n     * @param to Address to which the token is being transferred\n     * @param tokenId ID of the token being transferred\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after any transfer of tokens. This includes minting and burning.\n     * @dev Calling conditions:\n     *\n     *  - When `from` and `to` are both non-zero.\n     *  - `from` and `to` are never zero at the same time.\n     *\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token has been transferred\n     * @param to Address to which the token has been transferred\n     * @param tokenId ID of the token that has been transferred\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/RMRKNestable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n//Generally all interactions should propagate downstream\n\npragma solidity ^0.8.21;\n\nimport {IERC7401} from \"./IERC7401.sol\";\nimport {RMRKCore} from \"./RMRKCore.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title RMRKNestable\n * @author RMRK team\n * @notice Smart contract of the RMRK Nestable module.\n * @dev This contract is hierarchy agnostic and can support an arbitrary number of nested levels up and down, as long as\n *  gas limits allow it.\n */\ncontract RMRKNestable is Context, IERC165, IERC721, IERC7401, RMRKCore {\n    uint256 private constant _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP = 100;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approver address to approved address\n    // The approver is necessary so approvals are invalidated for nested children on transfer\n    // WARNING: If a child NFT returns to a previous root owner, old permissions would be active again\n    mapping(uint256 => mapping(address => address)) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // ------------------- NESTABLE --------------\n\n    // Mapping from token ID to DirectOwner struct\n    mapping(uint256 => DirectOwner) private _RMRKOwners;\n\n    // Mapping of tokenId to array of active children structs\n    mapping(uint256 => Child[]) internal _activeChildren;\n\n    // Mapping of tokenId to array of pending children structs\n    mapping(uint256 => Child[]) internal _pendingChildren;\n\n    // Mapping of child token address to child token ID to whether they are pending or active on any token\n    // We might have a first extra mapping from token ID, but since the same child cannot be nested into multiple tokens\n    //  we can strip it for size/gas savings.\n    mapping(address => mapping(uint256 => uint256)) internal _childIsInActive;\n\n    // -------------------------- MODIFIERS ----------------------------\n\n    /**\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\n     * @dev If the caller is not the owner of the token or approved to manage it by its owner, the execution will be\n     *  reverted.\n     * @param tokenId ID of the token to check\n     */\n    function _onlyApprovedOrOwner(uint256 tokenId) internal view {\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\n            revert ERC721NotApprovedOrOwner();\n    }\n\n    /**\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\n     * @param tokenId ID of the token to check\n     */\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\n        _onlyApprovedOrOwner(tokenId);\n        _;\n    }\n\n    /**\n     * @notice Used to verify that the caller is approved to manage the given token or it its direct owner.\n     * @dev This does not delegate to ownerOf, which returns the root owner, but rater uses an owner from DirectOwner\n     *  struct.\n     * @dev The execution is reverted if the caller is not immediate owner or approved to manage the given token.\n     * @dev Used for parent-scoped transfers.\n     * @param tokenId ID of the token to check.\n     */\n    function _onlyApprovedOrDirectOwner(uint256 tokenId) internal view {\n        if (!_isApprovedOrDirectOwner(_msgSender(), tokenId))\n            revert RMRKNotApprovedOrDirectOwner();\n    }\n\n    /**\n     * @notice Used to verify that the caller is approved to manage the given token or is its direct owner.\n     * @param tokenId ID of the token to check\n     */\n    modifier onlyApprovedOrDirectOwner(uint256 tokenId) {\n        _onlyApprovedOrDirectOwner(tokenId);\n        _;\n    }\n\n    // ------------------------------- ERC721 ---------------------------------\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC7401).interfaceId;\n    }\n\n    /**\n     * @notice Used to retrieve the number of tokens in `owner`'s account.\n     * @param owner Address of the account being checked\n     * @return balance The balance of the given account\n     */\n    function balanceOf(\n        address owner\n    ) public view virtual returns (uint256 balance) {\n        if (owner == address(0)) revert ERC721AddressZeroIsNotaValidOwner();\n        balance = _balances[owner];\n    }\n\n    ////////////////////////////////////////\n    //              TRANSFERS\n    ////////////////////////////////////////\n\n    /**\n     * @notice Transfers a given token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * @dev Emits a {Transfer} event.\n     * @param from Address from which to transfer the token from\n     * @param to Address to which to transfer the token to\n     * @param tokenId ID of the token to transfer\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\n        _transfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @notice Used to safely transfer a given token token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address to transfer the tokens from\n     * @param to Address to transfer the tokens to\n     * @param tokenId ID of the token to transfer\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @notice Used to safely transfer a given token token from `from` to `to`.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address to transfer the tokens from\n     * @param to Address to transfer the tokens to\n     * @param tokenId ID of the token to transfer\n     * @param data Additional data without a specified format to be sent along with the token transaction\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function nestTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 destinationId,\n        bytes memory data\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\n        _nestTransfer(from, to, tokenId, destinationId, data);\n    }\n\n    /**\n     * @notice Used to safely transfer the token form `from` to `to`.\n     * @dev The function checks that contract recipients are aware of the ERC721 protocol to prevent tokens from being\n     *  forever locked.\n     * @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative\n     *  mechanisms to perform token transfer, such as signature-based.\n     * @dev Requirements:\n     *\n     *  - `from` cannot be the zero address.\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must exist and be owned by `from`.\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * @dev Emits a {Transfer} event.\n     * @param from Address of the account currently owning the given token\n     * @param to Address to transfer the token to\n     * @param tokenId ID of the token to transfer\n     * @param data Additional data with no specified format, sent in call to `to`\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId, data);\n        if (!_checkOnERC721Received(from, to, tokenId, data))\n            revert ERC721TransferToNonReceiverImplementer();\n    }\n\n    /**\n     * @notice Used to transfer the token from `from` to `to`.\n     * @dev As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @dev Requirements:\n     *\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` token must be owned by `from`.\n     * @dev Emits a {Transfer} event.\n     * @param from Address of the account currently owning the given token\n     * @param to Address to transfer the token to\n     * @param tokenId ID of the token to transfer\n     * @param data Additional data with no specified format, sent in call to `to`\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\n\n        _beforeTokenTransfer(from, to, tokenId);\n        _beforeNestedTokenTransfer(from, to, parentId, 0, tokenId, data);\n\n        _balances[from] -= 1;\n        _updateOwnerAndClearApprovals(tokenId, 0, to);\n        _balances[to] += 1;\n\n        emit Transfer(from, to, tokenId);\n        emit NestTransfer(from, to, parentId, 0, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n        _afterNestedTokenTransfer(from, to, parentId, 0, tokenId, data);\n    }\n\n    /**\n     * @notice Used to transfer a token into another token.\n     * @dev Attempting to nest a token into `0x0` address will result in reverted transaction.\n     * @dev Attempting to nest a token into itself will result in reverted transaction.\n     * @param from Address of the account currently owning the given token\n     * @param to Address of the receiving token's collection smart contract\n     * @param tokenId ID of the token to transfer\n     * @param destinationId ID of the token receiving the given token\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _nestTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 destinationId,\n        bytes memory data\n    ) internal virtual {\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\n        if (to == address(this) && tokenId == destinationId)\n            revert RMRKNestableTransferToSelf();\n\n        _checkDestination(to);\n        _checkForInheritanceLoop(tokenId, to, destinationId);\n\n        _beforeTokenTransfer(from, to, tokenId);\n        _beforeNestedTokenTransfer(\n            immediateOwner,\n            to,\n            parentId,\n            destinationId,\n            tokenId,\n            data\n        );\n        _balances[from] -= 1;\n        _updateOwnerAndClearApprovals(tokenId, destinationId, to);\n        _balances[to] += 1;\n\n        // Sending to NFT:\n        _sendToNFT(immediateOwner, to, parentId, destinationId, tokenId, data);\n    }\n\n    /**\n     * @notice Used to send a token to another token.\n     * @dev If the token being sent is currently owned by an externally owned account, the `parentId` should equal `0`.\n     * @dev Emits {Transfer} event.\n     * @dev Emits {NestTransfer} event.\n     * @param from Address from which the token is being sent\n     * @param to Address of the collection smart contract of the token to receive the given token\n     * @param parentId ID of the current parent token of the token being sent\n     * @param destinationId ID of the tokento receive the token being sent\n     * @param tokenId ID of the token being sent\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _sendToNFT(\n        address from,\n        address to,\n        uint256 parentId,\n        uint256 destinationId,\n        uint256 tokenId,\n        bytes memory data\n    ) private {\n        IERC7401 destContract = IERC7401(to);\n        destContract.addChild(destinationId, tokenId, data);\n\n        emit Transfer(from, to, tokenId);\n        emit NestTransfer(from, to, parentId, destinationId, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n        _afterNestedTokenTransfer(\n            from,\n            to,\n            parentId,\n            destinationId,\n            tokenId,\n            data\n        );\n    }\n\n    /**\n     * @notice Used to check if nesting a given token into a specified token would create an inheritance loop.\n     * @dev If a loop would occur, the tokens would be unmanageable, so the execution is reverted if one is detected.\n     * @dev The check for inheritance loop is bounded to guard against too much gas being consumed.\n     * @param currentId ID of the token that would be nested\n     * @param targetContract Address of the collection smart contract of the token into which the given token would be\n     *  nested\n     * @param targetId ID of the token into which the given token would be nested\n     */\n    function _checkForInheritanceLoop(\n        uint256 currentId,\n        address targetContract,\n        uint256 targetId\n    ) private view {\n        for (uint256 i; i < _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP; ) {\n            (\n                address nextOwner,\n                uint256 nextOwnerTokenId,\n                bool isNft\n            ) = IERC7401(targetContract).directOwnerOf(targetId);\n            // If there's a final address, we're good. There's no loop.\n            if (!isNft) {\n                return;\n            }\n            // Ff the current nft is an ancestor at some point, there is an inheritance loop\n            if (nextOwner == address(this) && nextOwnerTokenId == currentId) {\n                revert RMRKNestableTransferToDescendant();\n            }\n            // We reuse the parameters to save some contract size\n            targetContract = nextOwner;\n            targetId = nextOwnerTokenId;\n            unchecked {\n                ++i;\n            }\n        }\n        revert RMRKNestableTooDeep();\n    }\n\n    ////////////////////////////////////////\n    //              MINTING\n    ////////////////////////////////////////\n\n    /**\n     * @notice Used to safely mint the token to the specified address while passing the additional data to contract\n     *  recipients.\n     * @param to Address to which to mint the token\n     * @param tokenId ID of the token to mint\n     * @param data Additional data to send with the tokens\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId, data);\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\n            revert ERC721TransferToNonReceiverImplementer();\n    }\n\n    /**\n     * @notice Used to mint a specified token to a given address.\n     * @dev WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must not exist.\n     *  - `to` cannot be the zero address.\n     * @dev Emits a {Transfer} event.\n     * @dev Emits a {NestTransfer} event.\n     * @param to Address to mint the token to\n     * @param tokenId ID of the token to mint\n     * @param data Additional data with no specified format, sent in call to `to`\n     */\n    function _mint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _innerMint(to, tokenId, 0, data);\n\n        emit Transfer(address(0), to, tokenId);\n        emit NestTransfer(address(0), to, 0, 0, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n        _afterNestedTokenTransfer(address(0), to, 0, 0, tokenId, data);\n    }\n\n    /**\n     * @notice Used to mint a child token to a given parent token.\n     * @param to Address of the collection smart contract of the token into which to mint the child token\n     * @param tokenId ID of the token to mint\n     * @param destinationId ID of the token into which to mint the new child token\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _nestMint(\n        address to,\n        uint256 tokenId,\n        uint256 destinationId,\n        bytes memory data\n    ) internal virtual {\n        _checkDestination(to);\n        _innerMint(to, tokenId, destinationId, data);\n        _sendToNFT(address(0), to, 0, destinationId, tokenId, data);\n    }\n\n    /**\n     * @notice Used to mint a child token into a given parent token.\n     * @dev Requirements:\n     *\n     *  - `to` cannot be the zero address.\n     *  - `tokenId` must not exist.\n     *  - `tokenId` must not be `0`.\n     * @param to Address of the collection smart contract of the token into which to mint the child token\n     * @param tokenId ID of the token to mint\n     * @param destinationId ID of the token into which to mint the new token\n     * @param data Additional data with no specified format, sent in call to `to`\n     */\n    function _innerMint(\n        address to,\n        uint256 tokenId,\n        uint256 destinationId,\n        bytes memory data\n    ) private {\n        if (to == address(0)) revert ERC721MintToTheZeroAddress();\n        if (_exists(tokenId)) revert ERC721TokenAlreadyMinted();\n        if (tokenId == uint256(0)) revert RMRKIdZeroForbidden();\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n        _beforeNestedTokenTransfer(\n            address(0),\n            to,\n            0,\n            destinationId,\n            tokenId,\n            data\n        );\n\n        _balances[to] += 1;\n        _RMRKOwners[tokenId] = DirectOwner({\n            ownerAddress: to,\n            tokenId: destinationId\n        });\n    }\n\n    ////////////////////////////////////////\n    //              Ownership\n    ////////////////////////////////////////\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual override(IERC7401, IERC721) returns (address owner_) {\n        (address owner, uint256 ownerTokenId, bool isNft) = directOwnerOf(\n            tokenId\n        );\n        if (isNft) {\n            owner = IERC7401(owner).ownerOf(ownerTokenId);\n        }\n        owner_ = owner;\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function directOwnerOf(\n        uint256 tokenId\n    )\n        public\n        view\n        virtual\n        returns (address owner_, uint256 parentId, bool isNFT)\n    {\n        DirectOwner memory owner = _RMRKOwners[tokenId];\n        if (owner.ownerAddress == address(0)) revert ERC721InvalidTokenId();\n\n        owner_ = owner.ownerAddress;\n        parentId = owner.tokenId;\n        isNFT = owner.tokenId != 0;\n    }\n\n    ////////////////////////////////////////\n    //              BURNING\n    ////////////////////////////////////////\n\n    /**\n     * @notice Used to burn a given token.\n     * @dev In case the token has any child tokens, the execution will be reverted.\n     * @param tokenId ID of the token to burn\n     */\n    function burn(uint256 tokenId) public virtual {\n        burn(tokenId, 0);\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function burn(\n        uint256 tokenId,\n        uint256 maxChildrenBurns\n    )\n        public\n        virtual\n        onlyApprovedOrDirectOwner(tokenId)\n        returns (uint256 burnedChildren)\n    {\n        burnedChildren = _burn(tokenId, maxChildrenBurns);\n    }\n\n    /**\n     * @notice Used to burn a token.\n     * @dev When a token is burned, its children are recursively burned as well.\n     * @dev The approvals are cleared when the token is burned.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @dev Emits a {Transfer} event.\n     * @dev Emits a {NestTransfer} event.\n     * @param tokenId ID of the token to burn\n     * @param maxChildrenBurns Maximum children to recursively burn\n     * @return The number of recursive burns it took to burn all of the children\n     */\n    function _burn(\n        uint256 tokenId,\n        uint256 maxChildrenBurns\n    ) internal virtual returns (uint256) {\n        (address immediateOwner, uint256 parentId, ) = directOwnerOf(tokenId);\n        address rootOwner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(immediateOwner, address(0), tokenId);\n        _beforeNestedTokenTransfer(\n            immediateOwner,\n            address(0),\n            parentId,\n            0,\n            tokenId,\n            \"\"\n        );\n\n        _balances[immediateOwner] -= 1;\n        _approve(address(0), tokenId);\n        _cleanApprovals(tokenId);\n\n        Child[] memory children = childrenOf(tokenId);\n\n        delete _activeChildren[tokenId];\n        delete _pendingChildren[tokenId];\n        delete _tokenApprovals[tokenId][rootOwner];\n\n        uint256 pendingRecursiveBurns;\n        uint256 totalChildBurns;\n\n        uint256 length = children.length; //gas savings\n        for (uint256 i; i < length; ) {\n            if (totalChildBurns >= maxChildrenBurns)\n                revert RMRKMaxRecursiveBurnsReached(\n                    children[i].contractAddress,\n                    children[i].tokenId\n                );\n            delete _childIsInActive[children[i].contractAddress][\n                children[i].tokenId\n            ];\n            unchecked {\n                // At this point we know pendingRecursiveBurns must be at least 1\n                pendingRecursiveBurns = maxChildrenBurns - totalChildBurns;\n            }\n            // We substract one to the next level to count for the token being burned, then add it again on returns\n            // This is to allow the behavior of 0 recursive burns meaning only the current token is deleted.\n            totalChildBurns +=\n                IERC7401(children[i].contractAddress).burn(\n                    children[i].tokenId,\n                    pendingRecursiveBurns - 1\n                ) +\n                1;\n            unchecked {\n                ++i;\n            }\n        }\n        // Can't remove before burning child since child will call back to get root owner\n        delete _RMRKOwners[tokenId];\n\n        emit Transfer(immediateOwner, address(0), tokenId);\n        emit NestTransfer(immediateOwner, address(0), parentId, 0, tokenId);\n\n        _afterTokenTransfer(immediateOwner, address(0), tokenId);\n        _afterNestedTokenTransfer(\n            immediateOwner,\n            address(0),\n            parentId,\n            0,\n            tokenId,\n            \"\"\n        );\n\n        return totalChildBurns;\n    }\n\n    ////////////////////////////////////////\n    //              APPROVALS\n    ////////////////////////////////////////\n\n    /**\n     * @notice Used to grant a one-time approval to manage one's token.\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * @dev The approval is cleared when the token is transferred.\n     * @dev Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     * @dev Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     * @dev Emits an {Approval} event.\n     * @param to Address receiving the approval\n     * @param tokenId ID of the token for which the approval is being granted\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        address owner = ownerOf(tokenId);\n        if (to == owner) revert ERC721ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\n            revert ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @notice Used to retrieve the account approved to manage given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param tokenId ID of the token to check for approval\n     * @return approved Address of the account approved to manage the token\n     */\n    function getApproved(\n        uint256 tokenId\n    ) public view virtual returns (address approved) {\n        _requireMinted(tokenId);\n\n        approved = _tokenApprovals[tokenId][ownerOf(tokenId)];\n    }\n\n    /**\n     * @notice Used to approve or remove `operator` as an operator for the caller.\n     * @dev Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     * @dev Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     * @dev Emits an {ApprovalForAll} event.\n     * @param operator Address of the operator being managed\n     * @param approved A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        if (_msgSender() == operator) revert ERC721ApproveToCaller();\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @notice Used to check if the given address is allowed to manage the tokens of the specified address.\n     * @param owner Address of the owner of the tokens\n     * @param operator Address being checked for approval\n     * @return isApproved A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)\n     *  or not (`false`)\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual returns (bool isApproved) {\n        isApproved = _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @notice Used to grant an approval to manage a given token.\n     * @dev Emits an {Approval} event.\n     * @param to Address to which the approval is being granted\n     * @param tokenId ID of the token for which the approval is being granted\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n        _tokenApprovals[tokenId][owner] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @notice Used to update the owner of the token and clear the approvals associated with the previous owner.\n     * @dev The `destinationId` should equal `0` if the new owner is an externally owned account.\n     * @param tokenId ID of the token being updated\n     * @param destinationId ID of the token to receive the given token\n     * @param to Address of account to receive the token\n     */\n    function _updateOwnerAndClearApprovals(\n        uint256 tokenId,\n        uint256 destinationId,\n        address to\n    ) internal {\n        _RMRKOwners[tokenId] = DirectOwner({\n            ownerAddress: to,\n            tokenId: destinationId\n        });\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n        _cleanApprovals(tokenId);\n    }\n\n    /**\n     * @notice Used to remove approvals for the current owner of the given token.\n     * @param tokenId ID of the token to clear the approvals for\n     */\n    function _cleanApprovals(uint256 tokenId) internal virtual {}\n\n    ////////////////////////////////////////\n    //              UTILS\n    ////////////////////////////////////////\n\n    /**\n     * @notice Used to check whether the given account is allowed to manage the given token.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @param spender Address that is being checked for approval\n     * @param tokenId ID of the token being checked\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token\n     */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner ||\n            isApprovedForAll(owner, spender) ||\n            getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @notice Used to check whether the account is approved to manage the token or its direct owner.\n     * @param spender Address that is being checked for approval or direct ownership\n     * @param tokenId ID of the token being checked\n     * @return A boolean value indicating whether the `spender` is approved to manage the given token or its\n     *  direct owner\n     */\n    function _isApprovedOrDirectOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        (address owner, uint256 parentId, ) = directOwnerOf(tokenId);\n        // When the parent is an NFT, only it can do operations\n        if (parentId != 0) {\n            return (spender == owner);\n        }\n        // Otherwise, the owner or approved address can\n        return (spender == owner ||\n            isApprovedForAll(owner, spender) ||\n            getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @notice Used to enforce that the given token has been minted.\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     * @dev The validation checks whether the owner of a given token is a `0x0` address and considers it not minted if\n     *  it is. This means that both tokens that haven't been minted yet as well as the ones that have already been\n     *  burned will cause the transaction to be reverted.\n     * @param tokenId ID of the token to check\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        if (!_exists(tokenId)) revert ERC721InvalidTokenId();\n    }\n\n    /**\n     * @notice Used to check whether the given token exists.\n     * @dev Tokens start existing when they are minted (`_mint`) and stop existing when they are burned (`_burn`).\n     * @param tokenId ID of the token being checked\n     * @return exists A boolean value signifying whether the token exists\n     */\n    function _exists(\n        uint256 tokenId\n    ) internal view virtual returns (bool exists) {\n        exists = _RMRKOwners[tokenId].ownerAddress != address(0);\n    }\n\n    /**\n     * @notice Used to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * @dev The call is not executed if the target address is not a contract.\n     * @param from Address representing the previous owner of the given token\n     * @param to Yarget address that will receive the tokens\n     * @param tokenId ID of the token to be transferred\n     * @param data Optional data to send along with the call\n     * @return valid Boolean value signifying whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool valid) {\n        if (to.code.length != 0) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    data\n                )\n            returns (bytes4 retval) {\n                valid = retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == uint256(0)) {\n                    revert ERC721TransferToNonReceiverImplementer();\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            valid = true;\n        }\n    }\n\n    ////////////////////////////////////////\n    //      CHILD MANAGEMENT PUBLIC\n    ////////////////////////////////////////\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function addChild(\n        uint256 parentId,\n        uint256 childId,\n        bytes memory data\n    ) public virtual {\n        _requireMinted(parentId);\n\n        address childAddress = _msgSender();\n        if (childAddress.code.length == 0) revert RMRKIsNotContract();\n\n        Child memory child = Child({\n            contractAddress: childAddress,\n            tokenId: childId\n        });\n\n        _beforeAddChild(parentId, childAddress, childId, data);\n\n        uint256 length = pendingChildrenOf(parentId).length;\n\n        if (length < 128) {\n            _pendingChildren[parentId].push(child);\n        } else {\n            revert RMRKMaxPendingChildrenReached();\n        }\n\n        // Previous length matches the index for the new child\n        emit ChildProposed(parentId, length, childAddress, childId);\n\n        _afterAddChild(parentId, childAddress, childId, data);\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function acceptChild(\n        uint256 parentId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId\n    ) public virtual onlyApprovedOrOwner(parentId) {\n        _acceptChild(parentId, childIndex, childAddress, childId);\n    }\n\n    /**\n     * @notice Used to accept a pending child token for a given parent token.\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\n     *  array.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist\n     *  - `index` must be in range of the pending children array\n     * @dev Emits ***ChildAccepted*** event.\n     * @param parentId ID of the parent token for which the child token is being accepted\n     * @param childIndex Index of a child tokem in the given parent's pending children array\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\n     *  specified index of the given parent token's pending children array\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\n     *  pending children array\n     */\n    function _acceptChild(\n        uint256 parentId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId\n    ) internal virtual {\n        Child memory child = pendingChildOf(parentId, childIndex);\n        _checkExpectedChild(child, childAddress, childId);\n        if (_childIsInActive[childAddress][childId] != 0)\n            revert RMRKChildAlreadyExists();\n\n        _beforeAcceptChild(parentId, childIndex, childAddress, childId);\n\n        // Remove from pending:\n        _removeChildByIndex(_pendingChildren[parentId], childIndex);\n\n        // Add to active:\n        _activeChildren[parentId].push(child);\n        _childIsInActive[childAddress][childId] = 1; // We use 1 as true\n\n        emit ChildAccepted(parentId, childIndex, childAddress, childId);\n\n        _afterAcceptChild(parentId, childIndex, childAddress, childId);\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function rejectAllChildren(\n        uint256 tokenId,\n        uint256 maxRejections\n    ) public virtual onlyApprovedOrOwner(tokenId) {\n        _rejectAllChildren(tokenId, maxRejections);\n    }\n\n    /**\n     * @notice Used to reject all pending children of a given parent token.\n     * @dev Removes the children from the pending array mapping.\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\n     *  rootOwner of the previous parent.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist\n     * @dev Emits ***AllChildrenRejected*** event.\n     * @param tokenId ID of the parent token for which to reject all of the pending tokens.\n     * @param maxRejections Maximum number of expected children to reject, used to prevent from rejecting children which\n     *  arrive just before this operation.\n     */\n    function _rejectAllChildren(\n        uint256 tokenId,\n        uint256 maxRejections\n    ) internal virtual {\n        if (_pendingChildren[tokenId].length > maxRejections)\n            revert RMRKUnexpectedNumberOfChildren();\n\n        _beforeRejectAllChildren(tokenId);\n        delete _pendingChildren[tokenId];\n        emit AllChildrenRejected(tokenId);\n        _afterRejectAllChildren(tokenId);\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function transferChild(\n        uint256 tokenId,\n        address to,\n        uint256 destinationId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) public virtual onlyApprovedOrOwner(tokenId) {\n        _transferChild(\n            tokenId,\n            to,\n            destinationId,\n            childIndex,\n            childAddress,\n            childId,\n            isPending,\n            data\n        );\n    }\n\n    /**\n     * @notice Used to transfer a child token from a given parent token.\n     * @dev When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of\n     *  `to` being the `0x0` address.\n     * @dev Requirements:\n     *\n     *  - `tokenId` must exist.\n     * @dev Emits {ChildTransferred} event.\n     * @param tokenId ID of the parent token from which the child token is being transferred\n     * @param to Address to which to transfer the token to\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\n     *  pending array)\n     * @param childAddress Address of the child token's collection smart contract.\n     * @param childId ID of the child token in its own collection smart contract.\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of\n     *  the parent token (`true`) or in the active array (`false`)\n     * @param data Additional data with no specified format, sent in call to `_to`\n     */\n    function _transferChild(\n        uint256 tokenId,\n        address to,\n        uint256 destinationId, // newParentId\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) internal virtual {\n        Child memory child;\n        if (isPending) {\n            child = pendingChildOf(tokenId, childIndex);\n        } else {\n            child = childOf(tokenId, childIndex);\n        }\n        _checkExpectedChild(child, childAddress, childId);\n\n        _beforeTransferChild(\n            tokenId,\n            childIndex,\n            childAddress,\n            childId,\n            isPending,\n            data\n        );\n\n        if (isPending) {\n            _removeChildByIndex(_pendingChildren[tokenId], childIndex);\n        } else {\n            delete _childIsInActive[childAddress][childId];\n            _removeChildByIndex(_activeChildren[tokenId], childIndex);\n        }\n\n        if (to != address(0)) {\n            if (destinationId == uint256(0)) {\n                IERC721(childAddress).safeTransferFrom(\n                    address(this),\n                    to,\n                    childId,\n                    data\n                );\n            } else {\n                // Destination is an NFT\n                IERC7401(child.contractAddress).nestTransferFrom(\n                    address(this),\n                    to,\n                    child.tokenId,\n                    destinationId,\n                    data\n                );\n            }\n        }\n\n        emit ChildTransferred(\n            tokenId,\n            childIndex,\n            childAddress,\n            childId,\n            isPending,\n            to == address(0)\n        );\n        _afterTransferChild(\n            tokenId,\n            childIndex,\n            childAddress,\n            childId,\n            isPending,\n            data\n        );\n    }\n\n    /**\n     * @notice Used to verify that the child being accessed is the intended child.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param child A Child struct of a child being accessed\n     * @param expectedAddress The address expected to be the one of the child\n     * @param expectedId The token ID expected to be the one of the child\n     */\n    function _checkExpectedChild(\n        Child memory child,\n        address expectedAddress,\n        uint256 expectedId\n    ) private pure {\n        if (\n            expectedAddress != child.contractAddress ||\n            expectedId != child.tokenId\n        ) revert RMRKUnexpectedChildId();\n    }\n\n    ////////////////////////////////////////\n    //      CHILD MANAGEMENT GETTERS\n    ////////////////////////////////////////\n\n    /**\n     * @inheritdoc IERC7401\n     */\n\n    function childrenOf(\n        uint256 parentId\n    ) public view virtual returns (Child[] memory children) {\n        children = _activeChildren[parentId];\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n\n    function pendingChildrenOf(\n        uint256 parentId\n    ) public view virtual returns (Child[] memory children) {\n        children = _pendingChildren[parentId];\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function childOf(\n        uint256 parentId,\n        uint256 index\n    ) public view virtual returns (Child memory child) {\n        if (childrenOf(parentId).length <= index)\n            revert RMRKChildIndexOutOfRange();\n        child = _activeChildren[parentId][index];\n    }\n\n    /**\n     * @inheritdoc IERC7401\n     */\n    function pendingChildOf(\n        uint256 parentId,\n        uint256 index\n    ) public view virtual returns (Child memory child) {\n        if (pendingChildrenOf(parentId).length <= index)\n            revert RMRKPendingChildIndexOutOfRange();\n        child = _pendingChildren[parentId][index];\n    }\n\n    /**\n     * @notice Checks the destination is valid for a Nest Transfer/Mint.\n     * @dev The destination must be a contract that implements the IERC7401 interface.\n     * @param to Address of the destination\n     */\n    function _checkDestination(address to) internal view {\n        // Checking if it is a contract before calling it seems redundant, but otherwise it would revert with no error\n        if (to.code.length == 0) revert RMRKIsNotContract();\n        if (!IERC165(to).supportsInterface(type(IERC7401).interfaceId))\n            revert RMRKNestableTransferToNonRMRKNestableImplementer();\n    }\n\n    // HOOKS\n\n    /**\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\n     * @dev Calling conditions:\n     *\n     *  - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`.\n     *  - When `from` is zero, `tokenId` will be minted to `to`.\n     *  - When `to` is zero, ``from``'s `tokenId` will be burned.\n     *  - `from` and `to` are never zero at the same time.\n     *\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token is being transferred\n     * @param to Address to which the token is being transferred\n     * @param tokenId ID of the token being transferred\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after any transfer of tokens. This includes minting and burning.\n     * @dev Calling conditions:\n     *\n     *  - When `from` and `to` are both non-zero.\n     *  - `from` and `to` are never zero at the same time.\n     *\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token has been transferred\n     * @param to Address to which the token has been transferred\n     * @param tokenId ID of the token that has been transferred\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before nested token transfer.\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token is being transferred\n     * @param to Address to which the token is being transferred\n     * @param fromTokenId ID of the token from which the given token is being transferred\n     * @param toTokenId ID of the token to which the given token is being transferred\n     * @param tokenId ID of the token being transferred\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _beforeNestedTokenTransfer(\n        address from,\n        address to,\n        uint256 fromTokenId,\n        uint256 toTokenId,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after nested token transfer.\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param from Address from which the token was transferred\n     * @param to Address to which the token was transferred\n     * @param fromTokenId ID of the token from which the given token was transferred\n     * @param toTokenId ID of the token to which the given token was transferred\n     * @param tokenId ID of the token that was transferred\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _afterNestedTokenTransfer(\n        address from,\n        address to,\n        uint256 fromTokenId,\n        uint256 toTokenId,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before a child is added to the pending tokens array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that will receive a new pending child token\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\n     *  specified index of the given parent token's pending children array\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\n     *  pending children array\n     * @param data Additional data with no specified format\n     */\n    function _beforeAddChild(\n        uint256 tokenId,\n        address childAddress,\n        uint256 childId,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after a child is added to the pending tokens array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that has received a new pending child token\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\n     *  specified index of the given parent token's pending children array\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\n     *  pending children array\n     * @param data Additional data with no specified format\n     */\n    function _afterAddChild(\n        uint256 tokenId,\n        address childAddress,\n        uint256 childId,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before a child is accepted to the active tokens array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param parentId ID of the token that will accept a pending child token\n     * @param childIndex Index of the child token to accept in the given parent token's pending children array\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\n     *  specified index of the given parent token's pending children array\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\n     *  pending children array\n     */\n    function _beforeAcceptChild(\n        uint256 parentId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after a child is accepted to the active tokens array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param parentId ID of the token that has accepted a pending child token\n     * @param childIndex Index of the child token that was accpeted in the given parent token's pending children array\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\n     *  at the specified index of the given parent token's pending children array\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\n     *  token's pending children array\n     */\n    function _afterAcceptChild(\n        uint256 parentId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before a child is transferred from a given child token array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that will transfer a child token\n     * @param childIndex Index of the child token that will be transferred from the given parent token's children array\n     * @param childAddress Address of the collection smart contract of the child token that is expected to be located\n     *  at the specified index of the given parent token's children array\n     * @param childId ID of the child token that is expected to be located at the specified index of the given parent\n     *  token's children array\n     * @param isPending A boolean value signifying whether the child token is being transferred from the pending child\n     *  tokens array (`true`) or from the active child tokens array (`false`)\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _beforeTransferChild(\n        uint256 tokenId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called after a child is transferred from a given child token array of a given token.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that has transferred a child token\n     * @param childIndex Index of the child token that was transferred from the given parent token's children array\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\n     *  at the specified index of the given parent token's children array\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\n     *  token's children array\n     * @param isPending A boolean value signifying whether the child token was transferred from the pending child tokens\n     *  array (`true`) or from the active child tokens array (`false`)\n     * @param data Additional data with no specified format, sent in the addChild call\n     */\n    function _afterTransferChild(\n        uint256 tokenId,\n        uint256 childIndex,\n        address childAddress,\n        uint256 childId,\n        bool isPending,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @notice Hook that is called before a pending child tokens array of a given token is cleared.\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that will reject all of the pending child tokens\n     */\n    function _beforeRejectAllChildren(uint256 tokenId) internal virtual {}\n\n    /**\n     * @notice Hook that is called after a pending child tokens array of a given token is cleared.\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @param tokenId ID of the token that has rejected all of the pending child tokens\n     */\n    function _afterRejectAllChildren(uint256 tokenId) internal virtual {}\n\n    // HELPERS\n\n    /**\n     * @notice Used to remove a specified child token form an array using its index within said array.\n     * @dev The caller must ensure that the length of the array is valid compared to the index passed.\n     * @dev The Child struct consists of the following values:\n     *  [\n     *      tokenId,\n     *      contractAddress\n     *  ]\n     * @param array An array od Child struct containing info about the child tokens in a given child tokens array\n     * @param index An index of the child token to remove in the accompanying array\n     */\n    function _removeChildByIndex(Child[] storage array, uint256 index) private {\n        array[index] = array[array.length - 1];\n        array.pop();\n    }\n}\n"
    },
    "contracts/RMRKSoulbound.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.21;\n\nimport {IERC6454} from \"./IERC6454.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./RMRKErrors.sol\";\n\n/**\n * @title RMRKSoulbound\n * @author RMRK team\n * @notice Smart contract of the RMRK Soulbound module.\n */\nabstract contract RMRKSoulbound is IERC6454 {\n    /**\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\n     * @dev This is a hook ensuring that all transfers of tokens are reverted if the token is soulbound.\n     * @dev The only exception of transfers being allowed is when the tokens are minted or when they are being burned.\n     * @param from Address from which the token is originating (current owner of the token)\n     * @param to Address to which the token would be sent\n     * @param tokenId ID of the token that would be transferred\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        if (!isTransferable(tokenId, from, to))\n            revert RMRKCannotTransferSoulbound();\n    }\n\n    /**\n     * @inheritdoc IERC6454\n     */\n    function isTransferable(\n        uint256,\n        address from,\n        address to\n    ) public view virtual returns (bool isTransferable_) {\n        isTransferable_ = ((from == address(0) || // Exclude minting\n            to == address(0)) && from != to); // Exclude Burning // Besides the obvious transfer to self, if both are address 0 (general transferability check), it returns false\n    }\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual returns (bool) {\n        return interfaceId == type(IERC6454).interfaceId;\n    }\n}"
    },
    "contracts/RMRKSoulboundPerToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport {IERC6454} from \"./IERC6454.sol\";\nimport {RMRKSoulbound} from \"./RMRKSoulbound.sol\";\n\n/**\n * @title RMRKSoulboundPerToken\n * @author RMRK team\n * @notice Smart contract of the RMRK Soulbound module where the transfers are permitted or prohibited on a per-token basis.\n */\nabstract contract RMRKSoulboundPerToken is RMRKSoulbound {\n    /**\n     * @notice Emitted when a token's soulbound state changes.\n     * @param tokenId ID of the token\n     * @param state A boolean value signifying whether the token became soulbound (`true`) or transferrable (`false`)\n     */\n    event Soulbound(uint256 indexed tokenId, bool state);\n\n    // Mapping of token ID to soulbound state\n    mapping(uint256 => bool) private _isSoulbound;\n\n    /**\n     * @notice Sets the soulbound state of a token.\n     * @dev Custom access control has to be implemented when exposing this method in a smart contract that utillizes it.\n     * @param tokenId ID of the token\n     * @param state New soulbound state\n     */\n    function _setSoulbound(uint256 tokenId, bool state) internal virtual {\n        _isSoulbound[tokenId] = state;\n        emit Soulbound(tokenId, state);\n    }\n\n    /**\n     * @inheritdoc IERC6454\n     */\n    function isTransferable(\n        uint256 tokenId,\n        address from,\n        address to\n    ) public view virtual override returns (bool isTransferable_) {\n        isTransferable_ = (from == address(0) || // Exclude minting\n            to == address(0) || // Exclude Burning\n            !_isSoulbound[tokenId]);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 400
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}